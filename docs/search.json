[
  {
    "objectID": "index.html#section-1",
    "href": "index.html#section-1",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "",
    "text": "Sobre mim\n\n\nMe chamo Prof.¬†Dr.¬†Pedro Rafael D. Marinho. Meu curr√≠culo Lattes poder√° ser acessado clicando aqui.\nSou docente do Departamento de Estat√≠stica da UFPB. üë®‚Äçüè´\nToda minha forma√ß√£o acad√™mica √© na √°rea de estat√≠stica (bacharelado ao doutorado).\nTenho entusiasmo por programa√ß√£o, ci√™ncia de dados e aprendizagem de m√°quina üíªüìà.\n Me acompanhe no GitHub: https://github.com/prdm0.\n Me acompanhe no Linkedin: https://www.linkedin.com/in/prdm0/."
  },
  {
    "objectID": "index.html#sobre-mim",
    "href": "index.html#sobre-mim",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Sobre mim",
    "text": "Sobre mim\n\n\nMe chamo Prof.¬†Dr.¬†Pedro Rafael D. Marinho. Meu curr√≠culo Lattes poder√° ser acessado clicando aqui.\nSou docente do Departamento de Estat√≠stica da UFPB. üë®‚Äçüè´\nToda minha forma√ß√£o acad√™mica √© na √°rea de estat√≠stica (bacharelado ao doutorado).\nTenho entusiasmo por programa√ß√£o, ci√™ncia de dados e aprendizagem de m√°quina üíªüìà.\n Me acompanhe no GitHub: https://github.com/prdm0.\n Me acompanhe no Linkedin: https://www.linkedin.com/in/prdm0/."
  },
  {
    "objectID": "index.html#meu-segundo-lar",
    "href": "index.html#meu-segundo-lar",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Meu segundo lar",
    "text": "Meu segundo lar\n\n\n\nDepartamento de Estat√≠stica da UFPB."
  },
  {
    "objectID": "index.html#python",
    "href": "index.html#python",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "\n Python",
    "text": "Python\n\nAlguns motivos de se considerar python:\n\n\nPython √© Open Source;\nPython √© uma linguagem de programa√ß√£o de prop√≥sito geral;\nPython √© amplamente utilizada nas √°reas de ci√™ncia de dados a aprendizagem de m√°quina;\nPython √© uma linguagem muito f√°cil de se aprender, possuindo apenas 35 palavras reservadas. Por√©m, √© claro que muitas outas coisas dever√£o ser aprendidas. Para se fazer ci√™ncia de dados, por exemplo, voc√™ precisar√° estudar algumas bibliotecas;\nPython te obrigra organizar minimamente o c√≥digo, por meio de um sistema de indenta√ß√£o;\n\nPor ser uma linguagem muito utilizada, Python far√° com que voc√™ converse sobre ci√™ncia de dados com muitas pessoas. Aprender Python ser√° algo importante para o seu curr√≠culo e abrir√° oportunidades de emprego."
  },
  {
    "objectID": "index.html#python-1",
    "href": "index.html#python-1",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "\n Python",
    "text": "Python\n\nPython possui um n√∫mero de palavras reservadas muito pequeno, o que facilita o aprendizado. Voc√™ poder√° obter a lista das palavras reservadas fazendo:\n\n\nimport keyword\n\n# Lista com palavras reservadas\npalavras_reservadas = keyword.kwlist\n\n# Palavras reservadas em Python\nprint(palavras_reservadas)\n\n['False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']\n\nlen(palavras_reservadas)\n\n35"
  },
  {
    "objectID": "index.html#origem",
    "href": "index.html#origem",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Origem",
    "text": "Origem\n\n\n\nA linguagem Python foi desenvolvida em 1991 pelo matem√°tico e progamador holand√™s Guido van Rossum.\nGuido van Rossum estudou matem√°tica na Universidade de Amsterd√£.\nNa comunidade ele √© conhecido como ‚ÄúBenevolent Dictator for Life‚Äù - ‚ÄúDitador Benevolente Vital√≠cio‚Äù e sempre ditou a palavra final dos rumos da linguagem. Por√©m, em 2018 ele anunciou que estaria se afastando desta fun√ß√£o.\nPython atualmente √© desenvolvida de forma comunit√°ria pela funda√ß√£o sem fins lucrativos denominada de Python Software Foundation."
  },
  {
    "objectID": "index.html#origem-do-nome",
    "href": "index.html#origem-do-nome",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Origem do nome",
    "text": "Origem do nome\n\n\n\nGuido come√ßou a tarbalhar no projeto da linguagem em Dezembro 1989 ainda quando estudava na Universidade de Amsterd√£. J√°, o primeiro lan√ßamento p√∫blico da linguagem ocorreu em Fevereiro de 1991, quando a vers√£o 0.9.0 foi lan√ßada na Usenet.\n\nO nome Python foi escolhido por Guido van Rossum, criador da linguagem, como uma homenagem ao grupo de com√©dia brit√¢nico Monty Python. Ele estava procurando um nome que fosse curto, simples e f√°cil de digitar, e que n√£o estivesse sendo usado por outra linguagem de programa√ß√£o. Ele tamb√©m queria que o nome fosse algo relacionado √† com√©dia, pois ele achava que a programa√ß√£o deveria ser divertida e n√£o apenas uma tarefa chata.\n\n\n\nMonty Python - grupo de com√©dia brit√¢nico criador do Monty Python‚Äôs Flying Circus, que foi ao ar pela primeira vez em Outubro de 1969."
  },
  {
    "objectID": "index.html#mais-detalhes",
    "href": "index.html#mais-detalhes",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "\n Mais detalhes",
    "text": "Mais detalhes\n\n\n\nA entrevista #334 ao canal do Lex Fridman foi com o Guido van Russon, onde eles conversam sobre Python e o futuro da programa√ß√£o."
  },
  {
    "objectID": "index.html#section-4",
    "href": "index.html#section-4",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "",
    "text": "Para quem √© destinado o curso?:\n\n\nO curso √© destinado para pessoas que nunca tiveram contato com programa√ß√£o, como tamb√©m para pessoas que j√° programam em outras linguagens.\n\n\nO andamento que ser√° listado corresponde t√£o somente √† uma vis√£o geral da disciplina. Trata-se de apenas um resumo para que voc√™ possa entender qual ser√° a din√¢mica do curso. A inclus√£o de novos assuntos poder√£o ocorrer de acordo com o avan√ßo da turma (com base no perfil m√©dio que empiricamente irei observando)."
  },
  {
    "objectID": "index.html#andamento-do-curso",
    "href": "index.html#andamento-do-curso",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "\n Andamento do curso",
    "text": "Andamento do curso\n O curso come√ßar√° do b√°sico, por√©m, seguir√° para conceitos mais avan√ßados da linguagem.\n\n\n\nPrimeira parte: o enfoque ser√° a linguagem Python, sem discuss√µes sobre bibliotecas externas. Abordaremos temas como cria√ß√£o de ambiente virtuais, tipo de dados, estruturas de dados, opera√ß√µes matem√°ticas b√°sicas, manipula√ß√£o de strings, estruturas de controle de fluxo, la√ßos, listas compreensivas, defini√ß√£o de fun√ß√µes, fun√ß√£o lambda, fun√ß√µes varargs, closures e m√≥dulos.\n\n\n\n\nSegunda parte: exploraremos outros conceitos mais avan√ßados da linguagem. Ser√° abordado orienta√ß√£o √† objeto (classes, heran√ßas, heran√ßas m√∫ltiplas e polimorfismo), alguns aspectos de programa√ß√£o funcional, fun√ß√µes geradoras e tratamento de erros. Tamb√©m abordaremos as bibliotecas numpy, scipy e pandas, muito √∫teis para ci√™ncia de dados."
  },
  {
    "objectID": "index.html#section-5",
    "href": "index.html#section-5",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "",
    "text": "Andamento do curso \n\n\nComo foi dito, o curso come√ßar√° do b√°sico, por√©m, seguir√° para conceitos mais avan√ßados da linguagem.\n\n\n\nTerceira: na √∫ltima parte do curso, nosso enfoque recair√° sobre Sistemas de Gerenciamento de Banco de Dados - SGBD, em especial o DuckDB, na constru√ß√£o de gr√°ficos usando a biblioteca seaborn e na constru√ß√£o de bibliotecas em Python."
  },
  {
    "objectID": "index.html#bibliotecas-computacionais",
    "href": "index.html#bibliotecas-computacionais",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Bibliotecas Computacionais",
    "text": "Bibliotecas Computacionais"
  },
  {
    "objectID": "index.html#devo-apenas-seguir-os-slides",
    "href": "index.html#devo-apenas-seguir-os-slides",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Devo apenas seguir os slides?",
    "text": "Devo apenas seguir os slides?\n\n\nTenho duas respostas que se complementam:\n\n\n\n Para estudar os exemplos e fazer os exerc√≠cios que ir√£o aparecer com o andamento do curso. No decorrer da disciplina, exemplos e exerc√≠cios ir√£o aparecer de forma intensa e ser√° por meio desses slides que voc√™ dever√° consultar os exerc√≠cios para praticar.\n\n\n\n\n Nos slides ir√£o tamb√©m aparecer como exerc√≠cios, a leitura de cap√≠tulos de livros, materiais e documenta√ß√µes. Esses tamb√©m ser√£o considerados nas avalia√ß√µes, portanto, por favor, n√£o os negligencies.\n\n\nEm resumo, voc√™ dever√° seguir os slides, mas deve atentar-se aos exerc√≠cios com indica√ß√£o de leituras. Nessas leituras voc√™s ir√£o encontrar explica√ß√µes mais ‚Äúconversadas‚Äù que te dar√° mais conhecimento te√≥rico sobre os temas abordados."
  },
  {
    "objectID": "index.html#refer√™ncias-bibliogr√°ficas",
    "href": "index.html#refer√™ncias-bibliogr√°ficas",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Refer√™ncias bibliogr√°ficas",
    "text": "Refer√™ncias bibliogr√°ficas\n\n\n\nNo nosso curso, al√©m desses slides, iremos utilizar as seguintes refer√™ncias. Como dito anteriormente, atente-se aos exerc√≠cios que far√£o indica√ß√£o de leitura.\n\n\n A documenta√ß√£o oficial da linguagem √© um dos melhores materiais que voc√™ ir√° encontar para aprender Python https://docs.python.org/pt-br/3/ e est√° dispon√≠vel em diversos idiomas. Poucas linguagens possue uma documenta√ß√£o robusta e did√°tica quanto Python!\n\n\n\n\n O livro Pense em Python √© um √≥timo material que √© disponibilizado graduitamente. Tamb√©m √© poss√≠vel comprar o livro f√≠sico. Pense em Python √© uma tradu√ß√£o do livro Think Python (2¬™ edi√ß√£o), de Allen B. Downey, traduzido e publicado no Brasil pela Editora Novatec sob licen√ßa da O‚ÄôReilly Media."
  },
  {
    "objectID": "index.html#refer√™ncias-bibliogr√°ficas-1",
    "href": "index.html#refer√™ncias-bibliogr√°ficas-1",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Refer√™ncias bibliogr√°ficas",
    "text": "Refer√™ncias bibliogr√°ficas"
  },
  {
    "objectID": "index.html#outras-informa√ß√µes",
    "href": "index.html#outras-informa√ß√µes",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Outras informa√ß√µes",
    "text": "Outras informa√ß√µes\n\n\n\n\nPrezado discente, esteja sempre atento ao SIGAA. Isso √© sua obriga√ß√£o. Eventualmente poderei cadastrar not√≠cias que s√£o de vital import√¢ncia para voc√™s. Por exemplo, poderei alterar as datas das avalia√ß√µes. Se a informa√ß√£o estiver nos sistemas oficiais da institui√ß√£o, voc√™ ser√° o respons√°vel por conhec√™-la;\nNo SIGAA voc√™ ter√° acesso ao plano de curso;\nNo SIGAA encontra-se registradas as datas da respectivas avalia√ß√µes: primeira, segunda e terceira avalia√ß√£o, al√©m da reposi√ß√£o e prova final.\nSegundo a Resolu√ß√£o N¬∫ 29/2020 do CONSEPE UFPB voc√™ ter√° direito em repor, independentemente do motivo, uma das tr√™s avalia√ß√µes. Mas ser√° apenas uma!"
  },
  {
    "objectID": "index.html#git-e-github",
    "href": "index.html#git-e-github",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Git e GitHub",
    "text": "Git e GitHub\n\nEm dias atuais, em que vivemos programando e constantemente produzindo c√≥digos de programa√ß√£o para analisar dados e/ou automatizar tarefas do nosso dia a dia, ter uma forma de versionar c√≥digo √© fundamental. O  - git e  - GitHub ser√£o um dos seus maiores parceiros na programa√ß√£o."
  },
  {
    "objectID": "index.html#git-e-github-1",
    "href": "index.html#git-e-github-1",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Git e GitHub",
    "text": "Git e GitHub\n\n\nN√£o negligencie o aprendizado dessas ferramentas. Por exemplo, √© por meio do GitHub que muitos programadores interagem, funcionando inclusive como uma rede social de programadores.\n\n\n\nPor onde aprender utilizar o Git e GitHub?\n\n\n\n Bem, h√° diversos materiais na internet, mas coloco aqui tr√™s v√≠deo aulas que criei para discente de uma outra disciplina que lecionei no departamento. Com esses tr√™s v√≠deos voc√™ conseguir√° dar seus passos e colocar o Git e GitHub em sua rotina di√°ria de programa√ß√£o.\n\nPor exemplo, essa apresenta√ß√£o econtar-se no meu GitHub https://github.com/prdm0. Inclusive foi no GitHub que hospedei o HTML e demais arquivos dessa apresenta√ß√£o para que voc√™s pudessem acessar o conte√∫do por um simples link. Legal, n√£o?"
  },
  {
    "objectID": "index.html#aulas-de-git-e-github",
    "href": "index.html#aulas-de-git-e-github",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Aulas de Git e GitHub",
    "text": "Aulas de Git e GitHub\n\n\n\nExerc√≠cio: voc√™ dever√° assistir as tr√™s v√≠deo aulas abaixo. Com elas voc√™ poder√° dar os primeiros passos no uso do Git e GitHub:"
  },
  {
    "objectID": "index.html#use-linux",
    "href": "index.html#use-linux",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "\n Use Linux",
    "text": "Use Linux\nVoc√™ n√£o √© obrigado, para cursar essa disciplina, utilizar utilizar alguma distribui√ß√£o GNU/Linux. Todavia existem diversas vantagens em utilizar. Enumero algumas logo abaixo:\n\n\nUtilizar um novo sistema operacional ser√° importante para o seu portfolio. Em alguma empresa que eventualmente voc√™ venha trabalhar, pode ser que o uso do Linux seja o padr√£o. \nO Linux √© Open Source. Isso quer dizer que al√©m de ser de gra√ßa, o seu c√≥digo fonte √© aberto. D√™ prefer√™ncia ao uso de ferramentas open source. D√™ prefer√™ncia √† liberdade e quebre as algemas! üéâ\n√â f√°cil manter todo o sistema e seus programas atualizados. Ao inv√™s de atualizar cada programa voc√™ poder√° atualizar tudo de uma √∫nica vez.\nAo contr√°rio do que muitas pessoas dizem, usar Linux √© muito f√°cil. Atualmente h√° diversos ambientes gr√°ficos com v√°rias op√ß√µes para voc√™ clicar e configurar o seu sistema. Alguma dessas interfaces poder√° cair no seu gosto.\nQuando voc√™ virar um programador, em algum momento voc√™ ir√° utilizar sistemas que s√£o hospedados na nuvem. Muito provavelmente voc√™ ir√° hospedar uma aplica√ß√£o ou ir√° simplesmente utilizar o poder computacional de uma m√°quina em algum servidor. Muito provavelmente o que voc√™ encontrar√° √© um sistema operacional com kernel Linux ."
  },
  {
    "objectID": "index.html#use-linux-1",
    "href": "index.html#use-linux-1",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "\n Use Linux",
    "text": "Use Linux\n\n\n\nExerc√≠cio: Leia o Cap√≠tulo 2 do meu material da disciplina de Estat√≠stica Computacional.\n\nAssim termino a minha tentativa de evangeliza√ß√£o sobre o Linux.\n\n\n\nEsse √© o Tux, o marcote do Linux. Meigo, feliz e saciado!"
  },
  {
    "objectID": "index.html#ide-para-programar",
    "href": "index.html#ide-para-programar",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "IDE para programar",
    "text": "IDE para programar\n\nExistem diversas op√ß√µes para de Integrated Development Environment - IDE para se programar em Python. Enumero algumas que acho que voc√™ poder√° explorar e depois escolher. √â quest√£o de gosto e voc√™ precisa experimentar para poder escolher.\n\n\n\nVisual Studio Code - VSCode: IDE Open Source desenvolvida pela Microsoft e que est√° dispon√≠vel para m√∫ltiplas plataformas.\n\nPyCharm: IDE paga, mas que possui uma vers√£o gratuita. Acho muito pesada. Particularmente n√£o gosto muito.\n\nSpyder: IDE Open Source que √© legal, mas prefiro o VSCode.\n\nRStudio: Sim, √© poss√≠vel programar em Python no RStudio. Interessante se voc√™ deseja integrar c√≥digos R com c√≥digos em Python, por meio da biblioteca reticulate.\n\nJupyterLab: √© o mais recente ambiente de desenvolvimento interativo baseado na Web para notebooks, c√≥digo e dados. √â legal se voc√™ deseja mesclar textos e c√≥digo. √ötil para documentar um fluxo de an√°lise de dados, por exemplo."
  },
  {
    "objectID": "index.html#rstudio-python-e-r-juntos",
    "href": "index.html#rstudio-python-e-r-juntos",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "RStudio = Python e R juntos =  +  = ‚ù§Ô∏è",
    "text": "RStudio = Python e R juntos =  +  = ‚ù§Ô∏è\n\nVideo"
  },
  {
    "objectID": "index.html#jupyterlab",
    "href": "index.html#jupyterlab",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "JupyterLab",
    "text": "JupyterLab\n\n\nPara instalar o Jupyter notebook ou o JupyterLab, uma vers√£o mais recente do Jupyter, voc√™ antes precisa ter instalado no seu sistema operacional o Python Package Index - PyPi.\n\nO PyPi √© um reposit√≥rio oficial de bibliotecas para Python. √â an√°logo ao Comprehensive R Archive Network - CRAN do R. Ao contr√°rio do R, onde voc√™ instala as bibliotecas dentro da se√ß√£o R, o PyPi voc√™ executa no terminal de linha de comando do seu sistema operacional, isto √©, fora da se√ß√£o Python.\n\n\n\nNo seu termial Bash (terminal do Linux), voc√™ dever√° fazer:\n\n# Verificando a vers√£o do pip instalada.\npip --version\n\n# Instalando um sofware/biblioteca dispon√≠vel\n# nos reposit√≥rios do PyPi. Esse exemplo,\n# instanado o jupyter-lab\npip install -U jupyter-lab"
  },
  {
    "objectID": "index.html#jupyterlab-1",
    "href": "index.html#jupyterlab-1",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "JupyterLab",
    "text": "JupyterLab\nPara executar uma inst√¢ncia do JupyterLab, execute o comando abaixo no terminal do seu sistema GNU/Linux:\n\njupyter-lab &!\n\nA par√¢metro &! executa o programa, no caso o JupyterLab, em segundo plano, ou seja, a se√ß√£o do terminal do Linux ficar√° desocupada para rodar outros comandos Shell Script. Mas, voc√™ poderia rodar o comando assim sem especificar o &!.\n\n\nVideo"
  },
  {
    "objectID": "index.html#jupyterlab-2",
    "href": "index.html#jupyterlab-2",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "JupyterLab",
    "text": "JupyterLab\n\n\n\n\nA extens√£o dos notebooks √© .ipynb, em que, ipy faz alus√£o ao interpretador de python padr√£o que √© utilizado no Jupyter que √© o IPython e o nb refere-se √† notebook. Notebooks s√£o arquivos em que voc√™ ir√° misturar texto com c√≥digo. O legal √© que se voc√™ conhece os comandos de marca√ß√£o do Markdown, voc√™ poder√° utiliz√°-los para a constru√ß√£o de um texto consistente.\n\n\n\nAl√©m disso, √© poss√≠vel utilizar a sintaxe do \\(\\LaTeX\\) para inclus√£o de f√≥rmulas e nota√ß√µes matem√°ticas.\n\nN√£o sabe \\(\\LaTeX\\)? Aqui est√° um √≥timo material para voc√™ se debru√ßar. √â f√°cil. Aprenda!"
  },
  {
    "objectID": "index.html#jupyterlab-e-markdown",
    "href": "index.html#jupyterlab-e-markdown",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "JupyterLab e Markdown \n",
    "text": "JupyterLab e Markdown \n\n\n\nAlguns comandos √∫teis do Markdown  voc√™ poder√° encontrar clicando aqui.\n\nDependendo do tutorial de Markdown que voc√™ possa estar utilizando, pode ser que algum c√≥digo funcione de forma um pouco diferente. Por exemplo, a sintaxe de Markdown para usar na biblioteca Quarto poder√° n√£o ir√° funcionar, em seus aspectos mais rebuscados, no JupyterLab.\n\n\n\nEm falando em Quarto <https://quarto.org>, aproveito para deixar a dica para que voc√™s venham estudar e dominar. Ele permitir√° que voc√™ possa construir relat√≥rios autom√°ticos din√¢micos em Python, R, Julia e Observable. Por exemplo, essa apresenta√ß√£o foi constru√≠da em Quarto. H√° no site do Quarto um tutorial b√°sico de Markdown <https://quarto.org/docs/authoring/markdown-basics.html>. Lembre-se: Alguns comandos de Makdown que funciona no Quarto pode n√£o funcionar no JupyterLab.\n\nAten√ß√£o: JupyterLab e Quarto s√£o duas coisas bem distintas. A √∫nica semelhan√ßa √© que ambos permitem que voc√™ utilizem c√≥digos Markdown para a produ√ß√£o de textos formatados. Por favor, n√£o confunda!"
  },
  {
    "objectID": "index.html#jupyterlab-e-markdown-1",
    "href": "index.html#jupyterlab-e-markdown-1",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "JupyterLab e Markdown \n",
    "text": "JupyterLab e Markdown \n\n\nExerc√≠cio: Salve o c√≥digo no arquivo exemplo_juptylab.ipynb e importe-o no JupyterLab. Voc√™ j√° sabe como chamar o JupyterLab! Procure entender e memorizar os comandos que foram utilizados para a forma√ß√£o do texto, ou seja, os comandos de Markdown utilizados.\n\n\nCaso voc√™ abra o c√≥digo em um editor de texto, voc√™ ver√° um c√≥digo que a primeira vista pode ser estranho para voc√™. Relaxe, esse √© o c√≥digo que por tr√°s, sem voc√™ ver, √© salvo no arquivo .ipynb. O que voc√™ ver√° ao utilizar o JupyterLab s√£o as informa√ß√µes importadas l√° no ambiente. √â uma visualiza√ß√£o muito mais palat√°vel.\n\n\n\nNa verdade, o c√≥digo que √© salvo na extens√£o .ipynb √© um c√≥digo que tamb√©m √© f√°cil de se entender. Trata-se de um c√≥digo JavaScript Object Notation - JSON. Esse formato √© muito comum em APIs, sendo esta uma forma de comunica√ß√£o entre sistemas.\n\nMuitos dados n√£o s√£o dispon√≠veis em arquivos CSV, XLS, XLSX e est√£o dispon√≠veis em uma API, onde a informa√ß√£o s√£o lidas de arquivos no formado JSON. Na verdade essa √© a forma mais consistente e elegante de ler dados. Se os dados que precisa ler est√° dispon√≠vel em uma API, voc√™ est√° em uma situa√ß√£o confort√°vel."
  },
  {
    "objectID": "index.html#jupyterlab-e-markdown-2",
    "href": "index.html#jupyterlab-e-markdown-2",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "JupyterLab e Markdown \n",
    "text": "JupyterLab e Markdown \n\n\n\nImagem do JupyterLab ao importar o arquivo exemplo_juptylab.ipynb. Esse bem formatado que mistura c√≥digos Python √© a forma que voc√™ ver√° o conte√∫do JSON do arquivo .ipynb"
  },
  {
    "objectID": "index.html#visual-studio-code---vscode",
    "href": "index.html#visual-studio-code---vscode",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Visual Studio Code - VSCode",
    "text": "Visual Studio Code - VSCode\n\nNo VSCode tamb√©m √© poss√≠vel trabalhar com arquivos com extens√£o .ipynb. Do mesmo modo que no JupyterLab, no VSCode baste criar um arquivo com a extens√£o .ipynb e come√ßar a trabalhar com c√≥digo Markdown e seu c√≥digo Python.\n\n\n\n\nImagem do VSCode executando o arquivo exemplo_juptylab.ipynb do exerc√≠cio anterior. Experimente voc√™ tamb√©m editar arquivos .ipynb no VSCode."
  },
  {
    "objectID": "index.html#opini√£o-pessoal",
    "href": "index.html#opini√£o-pessoal",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Opini√£o pessoal",
    "text": "Opini√£o pessoal\n\n\n\nVoc√™ n√£o perguntou, mas como a aula √© minha, vou responder. üòÖ\n\n\nO que eu prefiro para programar em Python? Ouvi essa pergunta?! Bem, entre todos os ambientes de desenvolvimento que mencionei, prefiro o VSCode.\n\n\nMeus motivos s√£o:\n\n\n√â Open Source e h√° uma comunidade muito ativa que mant√™m plugins interessantes para ele;\nComo dito no item acima, h√° diversos plugins/extens√µes que s√£o dispon√≠veis para ele e que ajuda o progamador em sua produtividade;\nAcho ele bem construido e me lembra editores antigos como Atom que gostava muito;\nEmpresas como a Posit Ltda desenvolve produtos, a exemplo do Posit Workbench em que √© poss√≠vel vincular o VSCode e trabalhar com R e Python no VSCode;\nMuitas vezes prefiro trabalhar diretamente com arquivios .py, ou seja, com o script python para que eu possa executar no interpretador iterativo ou chamar fun√ß√µes por linha de comando no shell bash.\n\n\n\n√â uma quest√£o de gosto, e est√° tudo bem se voc√™ preferir um outro editor de c√≥digo e/ou IDE de programa√ß√£o. Apenas saiba que na hora de construir algo maior, como um pacote ou um programa sofisticado, voc√™ precisar√° de arquivos .py e n√£o arquivos .ipynb.\n\nE repito. Arquivos .ipynb s√£o legais, por exemplo, para documentar um fluxo de trabalho de analise de dados. Como tamb√©m consigo trabalhar com notebooks em VSCode, me sinto bem servido."
  },
  {
    "objectID": "index.html#section-10",
    "href": "index.html#section-10",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "",
    "text": "Python √© uma linguagem interpretada\n\n\n\nA imagem acima descreve o processo de interpreta√ß√£o do c√≥digo Python. A implementa√ß√£o padr√£o do interpretador de Python √© CPython\n\n\nCPython o interpretador de Python mais comumente usado e √© o interpretador padr√£o para a linguagem Python. Ele pode ser usado para executar c√≥digo Python em muitos sistemas operacionais diferentes, incluindo Windows, macOS e Linux. Al√©m disso, ele √© open source, o que significa que o c√≥digo fonte est√° dispon√≠vel para qualquer pessoa ver ou modificar.\n\nO nome √© CPython pelo fato do interpretador ter sido escrito utilizando a linguagem C."
  },
  {
    "objectID": "index.html#interpretador",
    "href": "index.html#interpretador",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Interpretador",
    "text": "Interpretador\n\n\n\n\nPerceba que no processo de interpreta√ß√£o de Python, um bytecode (c√≥digo de m√°quina) √© gerado e que posteriormente √© interpretado pela Python Virtual Machine - PVM. √â algo semelhante que ocorre em Java, por√©m l√° o processo √© considerado uma compila√ß√£o, pois todo o c√≥digo √© compilado de uma √∫nica vez, al√©m de haver diversas otimiza√ß√µes internas no processo de convers√£o.\n\nEm Python, a compila√ß√£o ocorre linha por linha e logo ap√≥s a interpreta√ß√£o do peda√ßo do c√≥digo compilado ocorre. Em outras palavras, todo esse processo ocorre de forma din√¢mica durante a execu√ß√£o do programa.\n\nSeu processador n√£o entende c√≥digo Python ou de qualquer outra linguagem. Seu processador s√≥ entende c√≥digo de m√°quina!"
  },
  {
    "objectID": "index.html#implementa√ß√µes-alternativas",
    "href": "index.html#implementa√ß√µes-alternativas",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Implementa√ß√µes Alternativas",
    "text": "Implementa√ß√µes Alternativas\n\nExistem diversas implementa√ß√µes alternativas de Python\n\n\nCPython: Implementa√ß√£o original da linguagem escrita em C. √â nessa implementa√ß√£o que novas funcionalidade ir√£o aparecer primeiro;\nPyPy: este √© um interpretador de Python alternativo que usa uma implementa√ß√£o diferente da linguagem e pode ser mais r√°pido que o CPython em alguns casos;\nIronPython: este √© um interpretador de Python para .NET, que permite que voc√™ use Python em aplicativos .NET e no ambiente de desenvolvimento Visual Studio;\nJython: este √© um interpretador de Python escrito em Java, que permite que voc√™ use Python em aplicativos Java e integre Python e Java em seus projetos;\nMicroPython: este √© um interpretador de Python para dispositivos embarcados, o que significa que ele pode ser usado em microcontroladores e outros dispositivos de baixo poder de processamento.\n\nAten√ß√£o: iremos sempre utilizar o CPython, que √© a implementa√ß√£o padr√£o da linguagem. Encare as demais implementa√ß√µes como informa√ß√£o adicional para o seu disco que armazena conhecimentos üß†."
  },
  {
    "objectID": "index.html#c√≥digo-compilado-de-python",
    "href": "index.html#c√≥digo-compilado-de-python",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "C√≥digo compilado de Python \n",
    "text": "C√≥digo compilado de Python \n\n\nAntes de tudo, deixa eu te dizer que voc√™ pode executar o c√≥digo Python usando o interpretador de Python que vem dispon√≠vel em algumas IDE‚Äôs que foram apresentadas, ou seja, na IDE de sua escolha, voc√™ ir√° criar o arquivo Python e com algum atalho ir√° executar o c√≥digo escrito no arquivo .py no console/interpretador utilizado pela IDE.\n\nA outra forma √© executando o script em algum terminal, fora de alguma IDE. Por exemplo, suponha que em algum diret√≥rio voc√™ teinha um c√≥digo Python que deseja executar fora de uma IDE. Por exemplo, suponha que tenho o arquivo soma.py no diret√≥rio /home/prdm0/Downloads. N√£o precisa agora entender o c√≥digo. Apenas saiba que a fun√ß√£o soma ir√° somar uma lista de valores passados.\nimport py_compile\nimport sys\n\ndef soma(*args):\n  lista = map(lambda x: float(args[x]), range(len(args)))\n  print(f\"A soma √© {sum(lista)}\")\n\nsoma(*sys.argv[1:])\n\npy_compile.compile(\n  file=\"/home/prdm0/Downloads/soma.py\",\n  cfile=\"/home/prdm0/Downloads/soma.pyc\"\n)\n\nAo executar o arquivo, o diret√≥rio /home/prdm0/Downloads/ ser√° criado o arquivo soma.pyc um c√≥digo bin√°rio."
  },
  {
    "objectID": "index.html#c√≥digo-compilado-de-python-1",
    "href": "index.html#c√≥digo-compilado-de-python-1",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "C√≥digo compilado de Python \n",
    "text": "C√≥digo compilado de Python \n\n\nAgora no terminal do seu sistema, basta executarmos o arquivo soma.pyc:\n\n# Rode no terminal shell, onde √© poss√≠vel invocar o Python:\npython /home/prdm0/soma.pyc 1.7 2.3 3.0\n\nVoc√™ ter√° como retorno, o valor 7.\n\n\nNote que no c√≥digo, os valores 1.7, 2.3 e 3.0 foram passados para a fun√ß√£o pela lista sys.argv e esses valores s√£o passados como string, isto √©, s√£o do tipo str. Por isso que o c√≥digo teve a preocupa√ß√£o em converter as informa√ß√µes para o tipo float (veja a linha 5 do c√≥digo).\n\nSe o c√≥digo te parece estranho, n√£o se preocupe. Com o avan√ßo do curso os conceitos ir√£o clereando. Apenas entenda que √© poss√≠vel passar argumentos para fun√ß√µes em script .py via terminal usando a lista argv do m√≥dulo sys."
  },
  {
    "objectID": "index.html#utilizando-shebang",
    "href": "index.html#utilizando-shebang",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Utilizando shebang #! \n",
    "text": "Utilizando shebang #! \n\nO shebang, denotado por #!, √© uma instru√ß√£o no in√≠cio de um arquivo de script que informa ao sistema operacional qual interpretador deve ser usado para executar o script.\n\nVoc√™ pode usar o shebang para executar scripts Python na linha de comando, desde que o interpretador Python esteja instalado no seu sistema, claro!\n\n\nExemplo: Construa o arquivo shebang_cumprimento.py, de tal modo que o conte√∫do do arquivo seja:\n\n#!/usr/bin/env python\n\n# Definindo uma fun√ß√£o qualquer em Python.\ndef cumprimento(cump = \"Ol√° pessoa\"):\n  print(f\"{cump}, bem vindo ao curso de Python!\")\n\n# Executando a fun√ß√£o cumprimento() definida logo acima:\ncumprimento()\n\nPodemos agora em um terminal shell (terminal do seu sistema) navegar at√© o diret√≥rio do arquivo shebang_cumprimento.py e execut√°-lo fazendo ./shebang_cumprimento.py. Essa nota√ß√£o ./arquivo √© a que utilizamos em terminais do linux para exectuar arquivos bin√°rios."
  },
  {
    "objectID": "index.html#utilizando-shebang-1",
    "href": "index.html#utilizando-shebang-1",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Utilizando shebang #! \n",
    "text": "Utilizando shebang #! \n\n\nAntes de exectuar o arquivo, √© preciso d√° permiss√£o de execu√ß√£o. Para tanto, devemos navegar at√© o diret√≥rio do arquivo e executar o comando sudo chmod +x shebang_cumprimento.py. Supondo que o arquivo shebang_cumprimento.py, esteja no diret√≥rio ~/Downloads, ent√£o deverei fazer:\n\n# Usando o comando cd para navegar entre os diret√≥rios.\n# A nota√ß√£o ~ significa diret√≥rio do usu√°rio. No meu caso\n# √© o diret√≥rio /home/prdm0\n\n# Poderia ter feito cd /home/prdm0/√êownloads. √â em Downloads\n# que encontra-se o arquivo shebang_cumprimento.py, no meu caso:\ncd ~/Dowloads\n\n# Dando permiss√£o para executar o arquivo:\nsudo chmod +x shebang_cumprimento.py\n\n# Executando o arquivo:\n./shebang_cumprimento.py\n\nAten√ß√£o: √© poss√≠vel executar scripts de qualquer linguagem seguindo esses passos. Por exemplo, se voc√™ tem o R instalado no seu sistema, usar√≠amos #!/usr/bin/env R como primeira linha do script .R.\n\nSe voc√™ n√£o sabe onde encontra-se o bin√°rio da linguagem que desej√° utilizar, no terminal linux voc√™ poder√° fazer where python ou which python. No meu caso, o retorno foi /usr/bin/python.\n\nAcresventamos o env para especificar ao sistema operacional que ele dever√° executar a primeira ocorr√™ncia de python em um dado sistema operacional, uma vez que o script poderia n√£o ser executado caso em algum outro sistema, a linguagem python n√£o estivesse em /usr/bin.\n\nColocar o env diz ao sistema operacional que procure python na vari√°vel PATH do sistema."
  },
  {
    "objectID": "index.html#utilizando-shebang-2",
    "href": "index.html#utilizando-shebang-2",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Utilizando shebang #! \n",
    "text": "Utilizando shebang #! \n\n\nO v√≠deo logo abaixo mostra o procedimento para se criar um arquivo execut√°vel de um script python para ser executado via terminal.\n\n\nVideo"
  },
  {
    "objectID": "index.html#criando-ambientes-virtuais-em",
    "href": "index.html#criando-ambientes-virtuais-em",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Criando ambientes virtuais em \n",
    "text": "Criando ambientes virtuais em \n\n\nOs ambientes virtuais em Python s√£o ambientes isolados que permitem que voc√™ instale pacotes e m√≥dulos em um espa√ßo de trabalho separado do sistema. Isso permite que voc√™ tenha diferentes vers√µes de pacotes e m√≥dulos instalados em diferentes projetos sem afetar uns aos outros. Al√©m disso, os ambientes virtuais permitem que voc√™ teste seu c√≥digo em diferentes vers√µes do Python sem afetar a instala√ß√£o global do Python no seu sistema.\n\n# Navegando ao diret√≥rio onde criarei o ambiente:\ncd ~/Downloads\n\n# Criando o ambiente:\npython -m venv meu_ambiente\n\n# Ativando o ambiente (\"meu_ambiente\") criado:\nsource ~/Downloads/meu_ambiente/bin/activate\n\nNota: N√£o utilize o Download como diret√≥rio de trabalho. Coloquei no c√≥digo apenas como exemplo. Eventualmente voc√™ ir√° deletar os arquivos em Downloads e acabaria perdendo seus projetos associados ao ambiente criado."
  },
  {
    "objectID": "index.html#criando-ambientes-virtuais-em-1",
    "href": "index.html#criando-ambientes-virtuais-em-1",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Criando ambientes virtuais em \n",
    "text": "Criando ambientes virtuais em \n\n\n\nVideo\nV√≠deo mostrando como criar ambientes virtuais em Python. Uma forma conveniente de manter vers√µes diferentes diferentes e isoladas do projeto, independentemente das vers√µes de bibliotecas Python instaladas no sistema operacional.\n\n\n\nNota: Utilize o comando deactivate para sair do shell do ambiente virtual e voltar ao padr√£o."
  },
  {
    "objectID": "index.html#criando-ambientes-virtuais-em-2",
    "href": "index.html#criando-ambientes-virtuais-em-2",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Criando ambientes virtuais em \n",
    "text": "Criando ambientes virtuais em \n\n\nExerc√≠cio: Crie um abiente virtual no diret√≥rio raiz do seu usu√°rio. Atribua o nome meu_primeiro_ambiente, acesse o ambiente usando o comando source e instale as bibliotecas numpy e pandas, utilizando o comando pip. Depois saia do ambiente utilizando a fun√ß√£o deactivate."
  },
  {
    "objectID": "index.html#criando-ambientes-virtuais-em-3",
    "href": "index.html#criando-ambientes-virtuais-em-3",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Criando ambientes virtuais em \n",
    "text": "Criando ambientes virtuais em \n\n\nPara obter todos os pacotes instalados em Python no seu ambiente virtual ou mesmo na instala√ß√£o padr√£o de Python em seu sistema operacional voc√™ poder√° fazer uso do comando freeze:\n\n\n# Listando as bibliotecas e suas respectivas vers√µes:\npip freeze\n\nbcc==0.18.0\nblinker==1.4\nBrlapi==0.8.3\ncertifi==2020.6.20\nchardet==4.0.0\nchrome-gnome-shell==0.0.0\nclick==8.0.3\ncolorama==0.4.4\ncommand-not-found==0.3\ncryptography==3.4.8\ncupshelpers==1.0\ndbus-python==1.2.18\ndefer==1.0.6\ndistro==1.7.0\nGDAL==3.4.1\nhidpidaemon==18.4.6\nhttplib2==0.20.2\nidna==3.3\nimportlib-metadata==4.6.4\njeepney==0.7.1\nkernelstub==3.1.4\nkeyring==23.5.0\nlanguage-selector==0.1\nlaunchpadlib==1.10.16\nlazr.restfulclient==0.14.4\nlazr.uri==1.0.6\nlouis==3.20.0\nmacaroonbakery==1.3.1\nmore-itertools==8.10.0\nnetaddr==0.8.0\nnetifaces==0.11.0\nnumpy==1.21.5\noauthlib==3.2.0\npandas==1.5.3\npop-transition==1.1.2\nprotobuf==3.12.4\npycairo==1.20.1\npycups==2.0.1\npydbus==0.6.0\nPyGObject==3.42.1\nPyJWT==2.3.0\npymacaroons==0.13.0\nPyNaCl==1.5.0\npyparsing==2.4.7\npyRFC3339==1.1\npython-apt==2.4.0+ubuntu1\npython-dateutil==2.8.2\npython-debian===0.1.43ubuntu1\npython-gnupg==0.4.8\npython-xlib==0.29\npytz==2022.1\npyxdg==0.27\nPyYAML==5.4.1\nrepolib==2.2.0\nrepoman==1.4.0\nrequests==2.25.1\nSecretStorage==3.3.1\nsessioninstaller==0.0.0\nsix==1.16.0\nsystemd-python==234\nubuntu-advantage-tools==8001\nubuntu-drivers-common==0.0.0\nufw==0.36.1\nurllib3==1.26.5\nwadllib==1.3.6\nxdg==5\nxkit==0.0.0\nzipp==1.0.0"
  },
  {
    "objectID": "index.html#criando-ambientes-virtuais-em-4",
    "href": "index.html#criando-ambientes-virtuais-em-4",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Criando ambientes virtuais em \n",
    "text": "Criando ambientes virtuais em \n\n\nExemplo: Salvando a lista de bibliotecas Python e suas respectivas vers√µes que encontram-se instaladas. Esse comando poder√° ser utilizado dentro de uma se√ß√£o shell de um ambiente virtual ou no ambiente ambiente global:\n\n# Se quiser salvar em um arquivo para depois poder\n# utilizar para instalar as bibliotecas, fa√ßa.\n# Ser√° salvo no diret√≥rio atual pwd. Voc√™ poder√°\n# utilizar o comando cd para navegar para o diret√≥rio\n# que deseja salvar o arquivo requiriments.txt:\npip freeze > requiriments.txt\n\n# Caso queira instalar as bibliotecas listadas no arquivo\n# requiriments.txt, fa√ßa, no diret√≥rio do arquivo:\npip install -r requiriments.txt"
  },
  {
    "objectID": "index.html#alguns-comandos-√∫teis-do-pip",
    "href": "index.html#alguns-comandos-√∫teis-do-pip",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Alguns comandos √∫teis do pip\n",
    "text": "Alguns comandos √∫teis do pip\n\n\nListo abaixo alguns comandos √∫teis do pip\n\n\nInstalando um pacote: pip install nome_do_pacote\n\nRemovendo um pacote: pip unistall nome_do_pacote\n\nAtualizando o pip: pip install --upgrade pip\n\nAtualizando um pacote: pip install --upgrade nome_do_pacote\n\nListando os pacotes instalados: pip freeze\n\nGera uma lista dos pacotes instalados: pip list\n\nMostra informa√ß√µes detalhadas sobre um pacote instalado: pip show nome_do_pacote\n\n\n\nNota: Ao contr√°rio do pip freeze em que podemos salvar a sa√≠da em um arquivo texto para podermos utilizar em uma futura instala√ß√£o, o pip list apenas lista uma tabela com o nome dos pacotes instalados. Voc√™ poder√° substituir --upgrade por -U."
  },
  {
    "objectID": "index.html#analogias-e",
    "href": "index.html#analogias-e",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Analogias  e \n",
    "text": "Analogias  e \n\n\nMe permita fazer uma pequena analogia entre Python e R, caso voc√™ j√° conheca alguma coisa de R.\n\n\n\nPython \n\n\n\n\nimport biblioteca importa uma biblioteca.\n\npip install -U biblioteca instala uma biblioteca. Esse comando deve ser executado fora do Python.\n\nnumpy: fornece um m√©todos para trabalhar de forma vetorizada com arrays em Python, al√©m de fornecer m√©todos para trabalhar com √°lgebra linear.\n\nscipy: fornece rotinas para trabalhar com computa√ß√£o cient√≠fica em Python: m√©todos de otimiza√ß√£o, integar√ß√£o, entre outros.\n\npandas: biblioteca inspirada nos data frames de R. Fornece estruturas de dados e opera√ß√µes para manipula√ß√£o e an√°lise de dados.\n\nfunctools: biblioteca que fornece fun√ß√µes de alta ordem que s√£o √∫teis para trabalhar com programa√ß√£o funcional. Possui rotinas que s√£o equivalentas a algumas dispon√≠veis no R base e do pacote purrr de R.\n\nseaborn: biblioteca para visualiza√ß√£o de dados que fornece interface de alto n√≠vel para a constru√ß√£o de gr√°ficos estat√≠sticos. Essa biblioteca foi inspirada no biblioteca ggplot2 de R.\n\nscikit-learn: biblioteca mais popular de aprendizagem de m√°quina, constru√≠da sobre a biblioteca numpy e que fornece uma grande quantidade de ferramentas e algoritmos.\n\n\nR \n\n\n\n\nlibrary(biblioteca) importa uma biblioteca.\n\ninstall.packages(\"biblioteca\") instala uma biblioteca. Comando executado em uma se√ß√£o de R.\nO R base j√° fornece rotinas para trabalharmos com arrays, al√©m de rotinas para poder realizar opera√ß√µes alg√©bricas sobre eles: invers√£o de matrizes, c√°lculo de determinante, multiplica√ß√£o de matrizes, entre diversas outras.\nO R base tamb√©m fornece rotinas para trabalar com computa√ß√£o cient√≠fica. Portanto, √© poss√≠vel encontrar fun√ß√µes como optim e integrete que s√£o internas √† linguagem.\nDo mesmo modo, o R tamb√©m apresenta como parte da linguagem, os data frames. Por√©m, tamb√©m √© poss√≠vel utilizar pacotes como dplyr e data.table para realizar manipula√ß√£o de dados de forma mais consistente.\n\npurrr: al√©m da possibilidade de trabalhar com os funcionais padr√£o da linguagem R, como apply, sapply, vapply, tapply, Map, entre outros, o pacote purrr fornece diversos outros funcionais para se trabalhar com progama√ß√£o funcional em R. -ggplot2: biblioteca muito utilizada na comunidade R para constru√ß√£o de gr√°ficos estat√≠sticos e que se baseia no The Grammar of Graphics. -tidymodels: √© uma cole√ß√£o de pacotes que visam tornar o processo de cria√ß√£o de modelos de aprendizagem de m√°quina mais f√°cil e consistente."
  },
  {
    "objectID": "index.html#eu-j√°-sei-r-preciso-aprender-python",
    "href": "index.html#eu-j√°-sei-r-preciso-aprender-python",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Eu j√° sei R , preciso aprender Python ?",
    "text": "Eu j√° sei R , preciso aprender Python ?\n\nBem, aconselho que voc√™ aprenda Python! Muito embora, em an√°lise de dados, tudo que podemos fazer com Python tamb√©m podemos fazer com R, afinal ambas as linguagens s√£o Turing Completeness, √© importante que voc√™ domine a linguagem Python .\n\nListo alguns motivos\n\n\nPython √© uma linguagem muito f√°cil de se aprender;\nPython √© uma linguagem de prop√≥sito geral;\nPython √© uma das linguagens de programa√ß√£o mais utilizada em todo mundo;\n\nProgramar em Python far√° com que voc√™ possa dialogar com muitas pessoas da ci√™ncia da computa√ß√£o;\n\nProgramar em Python ampliar√° suas oportunidades de emprego. Conhecer ambas as linguagens far√° com que voc√™ se enquadre em um grande n√∫mero de vagas üéâ;\nEventualmente, voc√™ poder√° vir a trabalhar em projetos fora da √°rea de ci√™ncia de dados. Python tamb√©m √© √∫til fora do escopo de ci√™ncia de dados."
  },
  {
    "objectID": "index.html#estruturas-de-dados-de-python",
    "href": "index.html#estruturas-de-dados-de-python",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Estruturas de dados de Python \n",
    "text": "Estruturas de dados de Python \n\n\nAo aprender qualquer linguagem de programa√ß√£o, voc√™ dever√° dominar as estruturas de dados da linguagem. Sem esse dom√≠nio, jamais voc√™ ser√° capaz de produzir c√≥digos pofissionais.\n\nMas a final, o que √© estrutura de dados?\n\n\nUma estrutura de dados √© uma forma de armazenar e organizar dados de maneira que eles possam ser acessados e modificados de maneira eficiente. Existem v√°rias estruturas de dados diferentes que podem ser usadas para resolver problemas de maneira √≥tima e cada linguagem possui suas estruturas que precisam ser dominadas.\n\n\nAbordaremos cada uma das estruturas de dados de Python e os principais m√©todos associados √† essas estruturas. Elas tamb√©m apareceram at√© o fim do curso e ser√° por meio delas e outros conceitos que voc√™ ir√° resolver os exerc√≠cios."
  },
  {
    "objectID": "index.html#estruturas-de-dados-de-python-1",
    "href": "index.html#estruturas-de-dados-de-python-1",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Estruturas de dados de Python \n",
    "text": "Estruturas de dados de Python \n\n\n\n\nO legal da linguagem Python √© que ela possui poucas estruturas de dados, por√©m, s√£o estruturas bastante flex√≠veis, permitindo resolver diversos problemas. Iremos abordar uma de cada vez, onde exploraremos exemplos e exerc√≠cios para dominarmos essas estruturas e os m√©todos associados a cada uma das respectivas estruturas de dados.\n\nAs estruturas de dados de Python s√£o\n\n\n\nListas: s√£o uma sequ√™ncia mut√°vel de itens. Voc√™ pode adicionar, remover, inserir e acessar itens em uma lista. As listas s√£o criadas usando colchetes. Por exemplo: [1, 2, 3];\n\nTupas: s√£o semelhantes √†s listas, mas s√£o imut√°veis. Voc√™ n√£o pode adicionar, remover ou inserir itens em uma tupla depois de cri√°-la. As tuplas s√£o criadas usando par√™nteses. Por exemplo: (1, 2, 3);\n\nDicion√°rios: s√£o uma estrutura de dados que armazena pares chave-valor. Voc√™ pode usar as chaves para acessar os valores no dicion√°rio. Os dicion√°rios s√£o criados usando chaves. Por exemplo: {'nome': 'Jo√£o', 'idade': 25};\n\nConjuntos: s√£o uma cole√ß√£o de itens √∫nicos e n√£o ordenados. Voc√™ pode adicionar, remover e verificar a exist√™ncia de itens em um conjunto. Os conjuntos s√£o criados usando chaves ou a palavra-chave set. Por exemplo: {1, 2, 3} ou set([1, 2, 3])\n\n\nStrings: s√£o uma sequ√™ncia de caracteres. Voc√™ pode usar as strings para armazenar e processar texto. As strings s√£o criadas usando aspas simples ou duplas. Por exemplo: 'Ol√°, mundo!' ou \"Ol√°, mundo!\"."
  },
  {
    "objectID": "index.html#analogia-estruturas-de-dados-de-python-e-r",
    "href": "index.html#analogia-estruturas-de-dados-de-python-e-r",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Analogia: estruturas de dados de Python  e R \n",
    "text": "Analogia: estruturas de dados de Python  e R \n\n\n\nAnteriormente falei do pacote reticulate, em que mostrei em um v√≠deo curto que √© poss√≠vel converter uma estrutura de dados de R para Python, assim como √© poss√≠vel converter uma estrutura de dados de Python para R.\n\n\n\nCaso voc√™ conhe√ßa algumas estruturas de dados de R, pensar na ‚Äúequival√™ncia‚Äù entre algumas estruturas de dados de R com estruturas de Python poder√° ajudar a voc√™ pensar em quando utilizar uma dada estrutura de dados de Python.\n\n\n\nSe voc√™ n√£o conhece nada de R, poder√°, se desdejar, pular o pr√≥ximo slide; ok? üëç"
  },
  {
    "objectID": "index.html#analogia-entre-as-estruturas-de-dados-de-python-e-r",
    "href": "index.html#analogia-entre-as-estruturas-de-dados-de-python-e-r",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Analogia entre as estruturas de dados de Python  e R \n",
    "text": "Analogia entre as estruturas de dados de Python  e R \n\n\n\n\n em R:\n\nVetor com uma √∫nica posi√ß√£o em R √© um escalar em Python: x <- 1\n\nUm vetor at√¥mico em R √© uma lista em Python: v <- c(1.1, 2.3, 5.4)\n\nUma lista n√£o nomeada em R √© uma tupla em Python: l <- list(1L, TRUE, \"pedro\")\n\nUma lista nomeada em R √© um dicion√°rio em Python: y <- list(a = 1, b = TRUE, c = 3)\n\nTipo nulo e tipos l√≥gicos em R: NULL, TRUE e FALSE\n\nUma matriz em R torna-se uma matriz em numpy: m <- matrix(1L:25L, ncol = 5, nrow = 5)\n\nUm data frame em R torna-se um data frame em pandas: df <- data.frame(nome = c(\"Maria\", \"Jo√£o\"), idade = c(10, 23))\n\n\n\n\n em Python:\n\nUm escalar em Python: x = 1\n\nUm lista em Python: v = [1.1, 2.3, 5.4]\n\nUma tupla em Python: l = (1, True, \"pedro\")\n\nUm dicion√°rio em Python y = {'a' = 1, 'b' = True, 'c' = 3} ou y = dict(a = 1, b = True, c = 3)\n\nTipo nulo e tipos l√≥gicos em Python: None, True e False\n\nUma matriz em numpy: m = np.arange(1, 26).reshape(5, 5, order='F')\n\nUm data frame em pandas: df = pd.DataFrame({\"nome\": [\"Maria\", \"Jo√£o\"], \"idade\": [10, 23]})"
  },
  {
    "objectID": "index.html#algumas-conven√ß√µes-de-nomenclatura",
    "href": "index.html#algumas-conven√ß√µes-de-nomenclatura",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Algumas conven√ß√µes de nomenclatura",
    "text": "Algumas conven√ß√µes de nomenclatura\n\n\n\nVari√°veis: Usar snake case (estilo snake_case), come√ßando com letra min√∫scula, nomes descritivos e significativos, usar o sufixo _ (underscore) para vari√°veis privadas. Vari√°veis privadas s√£o definidas no interior de classes e s√£o destinadas apenas para serem utilizadas dentro delas;\nFun√ß√µes: indica-se utilizar snake_case, come√ßando com letra min√∫scula, nomes descritivos e significativos, usando verbos no nome da fun√ß√£o para indicar sua a√ß√£o. Evitar nomes gen√©ricos!\nConstantes/Vari√°veis Globais: indixa-se escrever o nome de uma constante em caixa alta, utilizando snake case, se for necess√°rio.\nClasses: A conven√ß√£o mais comum para nomear Classes √© usar PascalCase, onde as palavras s√£o combinadas sem espa√ßos e cada primeira letra de cada palavra √© mai√∫scula, como MyObject ou EmployeeData.\nM√≥dulos: assim como as fun√ß√µes, o nomes de m√≥dulos deve ser em letras min√∫sculas e poder√° usar snake_case para melhorar a legibilidade.\n\n\nDica: Algumas vezes pode ser √∫til usar prefixos para indicar o tipo de objeto, como str_ para uma string, lst_ para uma lista, dict_ para um dicion√°rio, set_ para conjunto, etc."
  },
  {
    "objectID": "index.html#section-12",
    "href": "index.html#section-12",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "",
    "text": "Opera√ß√µes matem√°ticas (opera√ß√µes b√°sicas)\n\nSem recorrer ao uso de bibliotecas nem de importa√ß√µes de m√≥dulos, os operadores matem√°ticos b√°sicos s√£o descritos na Tabela abaixo. Note que o operador de exponencializa√ß√£o √© definido por ** e n√£o por ^ (comum em outras linguagens).\n\n\n\nOperador\nExemplo\nDescri√ß√£o\nResultado\n\n\n\n+\n1 + 1\nsoma\n2\n\n\n-\n1 - 1\nsubtra√ß√£o\n0\n\n\n*\n2 * 4\nmultiplica√ß√£o\n8\n\n\n/\n2 / 4\ndivis√£o\n0.5\n\n\n**\n2 ** 3\nexponencializa√ß√£o\n8\n\n\n//\n-5 // 2\ndivis√£o inteira\n-3\n\n\n%\n5 % 2\nresto da divis√£o\n1"
  },
  {
    "objectID": "index.html#opera√ß√µes-de-atribui√ß√µes",
    "href": "index.html#opera√ß√µes-de-atribui√ß√µes",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Opera√ß√µes de atribui√ß√µes",
    "text": "Opera√ß√µes de atribui√ß√µes\n\nAssim como em muitas linguagens, o operador = √© utilizado como operador de atribui√ß√£o. Al√©m disso, podemos combinar o operador = com os operadores aritm√©ticos b√°sicos, apresentados no slide anterior, de modo a ter uma abrevia√ß√£o que envolve uma opera√ß√£o matem√°tica com uma atribui√ß√£o.\n\n\n\nOperador\nExemplo\nEquival√™ncia\nValor de x\n\n\n\nx = 10\n-\n-\n10\n\n\n+=\nx += 2\nx = x + 2\n12\n\n\n-=\nx -= 2\nx = x - 2\n8\n\n\n*=\nx *= 4\nx = x * 4\n40\n\n\n/=\nx /= 4\nx = x/4\n2.5\n\n\n**=\nx **= 3\nx = x ** 3\n1000\n\n\n//=\nx //= 2\nx = x // 3\n3\n\n\n%=\nx %= 3\nx = x % 2\n0"
  },
  {
    "objectID": "index.html#opera√ß√£o-de-atribui√ß√£o-e-tipos-de-dados",
    "href": "index.html#opera√ß√£o-de-atribui√ß√£o-e-tipos-de-dados",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Opera√ß√£o de atribui√ß√£o e tipos de dados \n",
    "text": "Opera√ß√£o de atribui√ß√£o e tipos de dados \n\n\nObserva√ß√£o: A linguagem Python realizada a tipagem do conte√∫do dos objetos de forma din√¢mica, ao contr√°rio de liguagens como C e C++ que possuem tipagem est√°tica. Se uma tentativa de alguma opera√ß√£o for realizada com tipos de dados incompat√≠veis, o erro ser√° observado em tempo de execu√ß√£o do programa.\n\nO nome de um objeto √© apenas um ‚Äúapelido‚Äù para um endere√ßo de mem√≥ria. O(s) dado(s) que encontra-se no endere√ßo de mem√≥ria √© que tem um tipo. Linguagens com tipagem din√¢mica, como Python e R s√£o capazes de escolher que tipo utilizar dinamicamente para cada vari√°vel, podendo alter√°-lo dinamicamente durante a execu√ß√£o do programa.\n\nExemplo: Em nenhuma defini√ß√£o das vari√°veis abaixo foi preciso especificar os tipos dos objetos.\n\n# Utilizando snake_case e nomes bastante sugestivos\nprofessor_da_ufpb = \"Prof. Pedro Rafael\"\naluno = \"Fulano de Tal\"\n\n# x √© um n√∫mero qualquer:\nx = 10\n\n# Realizando opera√ß√µes com atribui√ß√£o:\nx += 2 # igual √† x = x + 2\nx -= 2 # igual √† x = x - 2\nx *= 2 # igual √† x = x * 2\nx /= 2 # igual √† x = x / 2\nx //= 2 # igual √† x = x // 2\nx %= 2 # igual √† x = x % 2\nx **= 2 # igual √† x = x ** 2"
  },
  {
    "objectID": "index.html#mais-opera√ß√µes-matem√°ticas-b√°sicas",
    "href": "index.html#mais-opera√ß√µes-matem√°ticas-b√°sicas",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Mais opera√ß√µes matem√°ticas b√°sicas",
    "text": "Mais opera√ß√µes matem√°ticas b√°sicas\n\nOutras opera√ß√µes matem√°ticas b√°sicas poder√£o ser encontradas no m√≥dulo math. Este m√≥dulo fornece acesso √†s fun√ß√µes matem√°ticas definidas pelo padr√£o C.\n\nVoc√™ poder√° observar todas as fun√ß√µes dispon√≠vel em um m√≥dulo utilizado a fun√ß√£o dir():\n\n\n# Importando o m√≥dulo math\nimport math\n\n# Quando aplicado √† um m√≥dulo, dir() retornar√° todos os seus atributos. Isso inclui\n# todas as fun√ß√µes internas implementadas no m√≥dulo:\ndir(math)\n\n['__doc__', '__loader__', '__name__', '__package__', '__spec__', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atan2', 'atanh', 'ceil', 'comb', 'copysign', 'cos', 'cosh', 'degrees', 'dist', 'e', 'erf', 'erfc', 'exp', 'expm1', 'fabs', 'factorial', 'floor', 'fmod', 'frexp', 'fsum', 'gamma', 'gcd', 'hypot', 'inf', 'isclose', 'isfinite', 'isinf', 'isnan', 'isqrt', 'lcm', 'ldexp', 'lgamma', 'log', 'log10', 'log1p', 'log2', 'modf', 'nan', 'nextafter', 'perm', 'pi', 'pow', 'prod', 'radians', 'remainder', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'tau', 'trunc', 'ulp']"
  },
  {
    "objectID": "index.html#mais-opera√ß√µes-matem√°ticas-b√°sicas-1",
    "href": "index.html#mais-opera√ß√µes-matem√°ticas-b√°sicas-1",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Mais opera√ß√µes matem√°ticas b√°sicas",
    "text": "Mais opera√ß√µes matem√°ticas b√°sicas\n\nVoc√™ poder√° obter informa√ß√µes sobre o que cada uma das fun√ß√µes faz usando a fun√ß√£o help().\n\nExemplo: Consultado o que faz o m√©todo cos do m√≥dulo math:\n\n\nimport math\n\nhelp(math.cos)\n\nHelp on built-in function cos in module math:\n\ncos(x, /)\n    Return the cosine of x (measured in radians).\n\n\n\nNota: Mais adiante no curso falaremos de m√≥dulos e como criar nosso pr√≥prios m√≥dulos. Todavia, adianto que m√≥dulos nada mais s√£o que arquivos .py para que possamos com a instru√ß√£o import importar para outros scripts Python."
  },
  {
    "objectID": "index.html#mais-opera√ß√µes-matem√°ticas-b√°sicas-2",
    "href": "index.html#mais-opera√ß√µes-matem√°ticas-b√°sicas-2",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Mais opera√ß√µes matem√°ticas b√°sicas",
    "text": "Mais opera√ß√µes matem√°ticas b√°sicas\n A Tabela abaixo lista algumas fun√ß√µes do m√≥dulo math que podem ser √∫teis. Como exerc√≠cio, estude a documenta√ß√£o das fun√ß√µes do m√≥dulo math.\n\n\n\n\n\n\n\n\nM√©todo\nExemplo\nComent√°rio\n\n\n\nsqrt\nmath.sqrt(3)\nObtendo \\(\\sqrt(3)\\)\n\n\n\npi\nmath.pi\nObtendo o valor de \\(\\pi\\)\n\n\n\ne\nmath.e\nObtendo a constante de Euler\n\n\nexp\nmath.exp(2)\nObtendo \\(\\exp(2)\\)\n\n\n\nlog\nmath.log(2)\nObtendo \\(\\log(2)\\) (logaritmo natural)\n\n\nlog10\nmath.log10(2)\nObtendo o logaritmo de 2 na base 10\n\n\nfactorial\nmath.factorial(5)\nObtendo \\(5!\\) (fatorial de 5)\n\n\ncomb\nmath.comb(5, 2)\nObtendo a combina√ß√£o de 5 √† 2\n\n\nperm\nmath.perm(5, 2)\nObtendo o arranjo 5 √† 2\n\n\ntrunc\nmath.trunc(10.73)\nObtendo o valor trunvcado de o n√∫mero 10.73\n\n\ngamma\nmath.gramma(3)\nObtendo \\(\\Gamma(3)\\) (gamma de 3)\n\n\nlgamma\nmath.lgamma(-3)\nCalculadno \\(\\log(|\\Gamma(-3)|)\\)\n\n\n\nceil\nmath.ceil(10.3)\nArredondando 10.3 para cima (resultado = 11)\n\n\nfloor\nmath.floor(10.9)\nArredondando 10.9 para baixo (resultado = 10)\n\n\nsin\nmath.sin(3)\nObtendo \\(\\sin(3)\\)\n\n\n\ncos\nmath.cos(-1)\nCalculando \\(\\cos(-1)\\)\n\n\n\ntan\nmath.tan(4)\nCalculando \\(\\tan(4)\\)\n\n\n\nfsum\nmath.fsum([1, 2])\nSomando os valores da lista [1, 2]"
  },
  {
    "objectID": "index.html#mais-opera√ß√µes-matem√°ticas-b√°sicas-3",
    "href": "index.html#mais-opera√ß√µes-matem√°ticas-b√°sicas-3",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Mais opera√ß√µes matem√°ticas b√°sicas",
    "text": "Mais opera√ß√µes matem√°ticas b√°sicas\n\nExiste algumas fun√ß√µes matem√°ticas que s√£o dispon√≠veis na linguagem Python mas s√£o encontram-se dispon√≠veis no m√≥dulo math. Na Tabela que segue, listo as principais:\n\n\n\n\n\n\n\n\nM√©todo\nExemplo\nComent√°rio\n\n\n\nround\nround(5.7)\nArredonda 5.7 (resultado 6)\n\n\nsum\nsum[5,2,0])\nRetorna a soma da lista [5, 2, 0]\n\n\n\nmin\nmin([5,2,0])\nRetorna o m√≠nimo da lista [5, 2, 0]\n\n\n\nmax\nmax([5,2,0])\nRetorna o m√°ximo da lista [5, 2, 0]\n\n\n\nabs\nabs(-5)\nRetorna o valor absoluto de -5, i.e, \\(|-5|\\)\n\n\n\ndivmod\ndivmod(5,2)\nRetorna uma tupla com a divis√£o inteira de 5 por 2 e o resto"
  },
  {
    "objectID": "index.html#m√©todos-ou-fun√ß√µes",
    "href": "index.html#m√©todos-ou-fun√ß√µes",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "M√©todos ou fun√ß√µes?",
    "text": "M√©todos ou fun√ß√µes?\n\nMuito embora Python √© uma linguagem multiparadigma, o paradigma de orienta√ß√£o √† objeto, em Python, √© muito consistente. Ainda falaremos melhor sobre orienta√ß√£o √† objeto. Por√©m, uma das caracter√≠sticas desse paradigma de programa√ß√£o √© o encapsulamento, em que os objetos encapsulam m√©todos e atributos.\n\nObserva√ß√£o: Aqui, chamaremos de m√©todos as fun√ß√µes encapsuladas de um objeto. Leia os coment√°rios dos c√≥digos!\n\nExemplo: A fun√ß√£o __abs__() ser√° um m√©todo do objeto math.sin(-1). No VSCode voc√™ poder√° apertar Tab para ver os m√©todos de math.sin(-1). Voc√™ tamb√©m poder√° utilizar a fun√ß√£o dir():\n\n\n# Importando o m√≥dulo math\nimport math\n\n# Realizando a opera√ß√£o sin(-1), utilizando a fun√ß√£o sin() de math.\n# \"resultado\" √© um objeto. Objetos em linguagens orientadas a objeto\n# poder√° encapsular m√©todos, que s√£o fun√ß√µes que podem operar sobre\n# o objeto:\nresultado = math.sin(-1)\n\n# Checando os m√©todos e atributos do objeto \"resultado\":\ndir(resultado)\n\n# Imprimindo o resultado:\n\n['__abs__', '__add__', '__bool__', '__ceil__', '__class__', '__delattr__', '__dir__', '__divmod__', '__doc__', '__eq__', '__float__', '__floor__', '__floordiv__', '__format__', '__ge__', '__getattribute__', '__getformat__', '__getnewargs__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__int__', '__le__', '__lt__', '__mod__', '__mul__', '__ne__', '__neg__', '__new__', '__pos__', '__pow__', '__radd__', '__rdivmod__', '__reduce__', '__reduce_ex__', '__repr__', '__rfloordiv__', '__rmod__', '__rmul__', '__round__', '__rpow__', '__rsub__', '__rtruediv__', '__setattr__', '__setformat__', '__sizeof__', '__str__', '__sub__', '__subclasshook__', '__truediv__', '__trunc__', 'as_integer_ratio', 'conjugate', 'fromhex', 'hex', 'imag', 'is_integer', 'real']\n\nprint(resultado)\n\n# Tomando o valor absoluto de resultado:\n\n-0.8414709848078965\n\nprint(resultado.__abs__())\n\n# Poder√≠amos ter utilizado a fun√ß√£o abs():\n\n0.8414709848078965\n\nprint(abs(resultado))\n\n0.8414709848078965"
  },
  {
    "objectID": "index.html#m√©todos-ou-fun√ß√µes-1",
    "href": "index.html#m√©todos-ou-fun√ß√µes-1",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "M√©todos ou fun√ß√µes?",
    "text": "M√©todos ou fun√ß√µes?\n\nN√£o estranhe os m√©todos definidos no padr√£o __nome__. Eles s√£o simplesmente fun√ß√µes comuns que voc√™ poder√° definir dentro da classe de um objeto. Aqui voc√™ est√° lendo mais um termo comum em linguagens orientadas √† objetos; o conceito de classes.\n\nExemplo: Todo objeto tem sua classe. Veja a classe de um objeto usando a fun√ß√£o type():\n\n\n# Importando o m√≥dulo math. Sempre realize a importa√ß√£o dos m√≥dulos no in√≠cio\n# do seu script Python:\nimport math\n\n# Chegando a classe do objeto math.cos(-1):\ntype(math.cos(-1))\n\n<class 'float'>"
  },
  {
    "objectID": "index.html#m√©todos-ou-fun√ß√µes-2",
    "href": "index.html#m√©todos-ou-fun√ß√µes-2",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "M√©todos ou fun√ß√µes?",
    "text": "M√©todos ou fun√ß√µes?\n\nMuitas fun√ß√µes em Python s√£o documentadas com Docstrings que nada mais s√£o que uma descri√ß√£o r√°pida a respeito da fun√ß√£o. Falaremos sobre Docstrings mais a frente, mas voc√™ poder√° consultar a Docstring de uma fun√ß√£o usando o m√©todo __doc__ que normalmente √© implementado nas fun√ß√µes de um m√≥dulo.\n\nExemplo: Consultando a Docstring da fun√ß√£o sin do m√≥dulo math:\n\n# Importe os m√≥dulos no in√≠cio do arquivo .py. N√£o √© uma boa pr√°tica de programa√ß√£o importar\n# m√≥dulos no meio de uma arquivo:\n\nimport math\n\n# Retornando a docstring da fun√ß√£o sin do m√≥dulo math:\nmath.sin.__doc__\n\n'Return the sine of x (measured in radians).'\n\n\n\nNota: Os m√©todos no padr√£o __name__ s√£o chamadas de m√©todos m√°gicos ou simplesmente de ‚ÄúDunder‚Äù. M√©todos Dunder s√£o fun√ß√µes como qualquer outra que voc√™ poder√° implementar em classes de objetos. Mais a frente no curso voltaremos a esse tema."
  },
  {
    "objectID": "index.html#operadores-relacionais",
    "href": "index.html#operadores-relacionais",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Operadores relacionais",
    "text": "Operadores relacionais\n\nOperadores relacionais s√£o utilizados para comparar valores em Python. A Tabela que segue apresenta os operadores relacionais em Python. Como resultado da compara√ß√£o, teremos um valor booleano True ou False.\n\n\n\n\n\n\n\n\nOperador\nDescri√ß√£o\nExemplo\n\n\n\n==\nIgualdade\n\nx == y retorna verdadeiro se x for igual a y\n\n\n\n!=\nDiferen√ßa\n\nx != y retorna verdadeiro se x for diferente de y\n\n\n\n>\nMaior que\n\nx > y retorna verdadeiro se x for maior que y\n\n\n\n<\nMenor que\n\nx < y retorna verdadeiro se x for menor que y\n\n\n\n>=\nMaior ou igual\n\nx >= y retorna verdadeiro se x for maior ou igual a y\n\n\n\n<=\nMenor ou igual\n\nx <= y retorna verdadeiro se x for menor ou igual a y"
  },
  {
    "objectID": "index.html#operadores-l√≥gicos",
    "href": "index.html#operadores-l√≥gicos",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Operadores l√≥gicos",
    "text": "Operadores l√≥gicos\n\nAs opera√ß√µes l√≥gicas e relacionais envolve o t√≠po l√≥gico bool de Python (por exemplo, fa√ßa type(True)), podendo retornar True ou False, a depender da condi√ß√£o. Podemos combinalas e assim, iremos construir express√µes l√≥gicas.\n\nA Tabela abaixo apresenta os operadores l√≥gicos de Python:\n\n\n\nOperador em Python\nOpera√ß√£o l√≥gica\n\n\n\nnot\nnega√ß√£o\n\n\nand\ne\n\n\nor\nou\n\n\n\n\nExerc√≠cio: Estude o c√≥digo baixo. Entenda o motivo dos resultados das express√µes l√≥gicas:\n\n\nsou_verdade = True\n\n# Negando\nprint(not sou_verdade)\n\n# Negando duas vezes sou verdade:\n\nFalse\n\nprint(not not sou_verdade)\n\n# Quando usamos or, ao menos um precisa ser verdade\n# para o retorno ser True\n\nTrue\n\nprint(True or False)\n\nTrue\n\nprint(False or True)\n\nTrue\n\nprint(False or True or False)\n\n# Usando and e or. Voc√™ poder√° utilizar par√™nteses para\n# compor opera√ß√µes l√≥gicas:\n\nTrue\n\nprint((True or False) and True)\n\nTrue\n\nprint((True and False) or True)\n\n# negando a primeira parte:\n\nTrue\n\nprint(not(True and False) or True)\n\nTrue"
  },
  {
    "objectID": "index.html#entrada-de-dados",
    "href": "index.html#entrada-de-dados",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Entrada de dados",
    "text": "Entrada de dados\n\nEm Python podemos utilizar a fun√ß√£o input() para solicitar informa√ß√£o ao usu√°rio do programa. √â importante notar que a fun√ß√£o input() ir√° ler a informa√ß√£o digitada pelo usu√°rio como uma string, isto √©, como uma cadeia de caracteres.\n\nExemplo: Solicitando ao usu√°rio uma informa√ß√£o, convertendo para inteiro usando int() e usando operadores l√≥gicos e relacionais para a cria√ß√£o de express√µes l√≥gicas.\n\nidade = int(input(\"--> Por favor, informe sua idade: \"))\n\n# Checando se 30 < idade < 50 ou idade > 70:\nprint((idade > 30 or idade < 50) or idade > 70)\n\n# Uma outra forma seria:\nprint((30 < idade < 50) or idade > 70)"
  },
  {
    "objectID": "index.html#convers√µes-de-tipos-de-dados",
    "href": "index.html#convers√µes-de-tipos-de-dados",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Convers√µes de tipos de dados",
    "text": "Convers√µes de tipos de dados\n\nAssim como utilizamos a fu√ß√£o int para converter a entra para inteiro, tamb√©m poderemos tentar outros tipos de coer√ß√µes.\n\nExemplo: utilizando as fun√ß√µes chr(), int(), float() e bool(), para for√ßar a conver√ß√£o de objetos para string, inteiro, real e booleano, respectivamente:\n\n\nnumero = 65\n\n# Realizando convers√µes de tipos de dados, se poss√≠vel\ncaractere = chr(numero)\nnum_int = int(numero)\nnum_real = float(numero)\nvalor_logico = bool(numero)\n\n# Imprimendo as informa√ß√µes\nprint(caractere)\n\nA\n\nprint(num_int)\n\n65\n\nprint(num_real)\n\n65.0\n\nprint(valor_logico)\n\nTrue"
  },
  {
    "objectID": "index.html#convers√µes-de-tipos-de-dados-1",
    "href": "index.html#convers√µes-de-tipos-de-dados-1",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Convers√µes de tipos de dados",
    "text": "Convers√µes de tipos de dados\n\n\n\nSe voc√™ √© novo em programa√ß√£o, o que pode parecer mais estranho no exemplo anterior √© que o n√∫mero 65 foi convertido para o caracter \"A\" e para o valor True, ao utilizarmos as fun√ß√µes de convers√£o de tipos chr e bool, respectivamente.\n\nEm Python, assim como ocorre em diversas outras linguagens, qualquer n√∫mero diferente de zero √© convertido para True ao utilizar a convers√£o para o tipo booleano, sendo False a convers√£o do n√∫mero zero.\n\n J√° a convers√£o do n√∫mero 65 para o caracter \"A\" se deve a √≠ntima rela√ß√£o entre n√∫meros interios de 0 a 255 para caracteres da Tabela ASCII. Por exemplo, print(chr(64)) a string composta pelo character @."
  },
  {
    "objectID": "index.html#opera√ß√£o-com-strings",
    "href": "index.html#opera√ß√£o-com-strings",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Opera√ß√£o com strings",
    "text": "Opera√ß√£o com strings\n\nEm Python, √© poss√≠vel realizar opera√ß√µes em vari√°veis do tipo strings. Strings s√£o cadeias de caracteres, como por exemplo, print(\"Ol√°, bem vindo ao curso\") a frase entre aspas que √© passada como argumento para a fun√ß√£o print().\n\nExemplo (contatena√ß√£o): concatenando duas ou mais strings:\n\n\nnome = \"Jo√£ozinho\"\nstr_1 = \"Eu, \"\nstr_2 = nome\nstr_3 = \", serei um grande programador\"\nstr_4 = \" de Python!\"\n\n# Concatenando as strings com o operador +\nprint(str_1 + str_2 + str_3 + str_4)\n\nEu, Jo√£ozinho, serei um grande programador de Python!"
  },
  {
    "objectID": "index.html#opera√ß√£o-com-strings-1",
    "href": "index.html#opera√ß√£o-com-strings-1",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Opera√ß√£o com strings",
    "text": "Opera√ß√£o com strings\n\nVoc√™ tamb√©m poder√° utilizar o operador de multiplica√ß√£o * para repetir uma string. Tamb√©m √© poss√≠vel obter a quantidade de caracteres de uma dada string, utilizando a fun√ß√£o len() ou o m√©todo Dunder ( __len__()) encapsulado em um objeto do tipo str.\n\nExemplo: repetindo, uma string qualquer, em um total igual √† metade do comprimento da string arredondado para cima:\n\n\nimport math\n\nstr_qualquer = \"\\tLero lero, ...\\n\"\nprint(str_qualquer * math.ceil(len(str_qualquer)/2))\n\n    Lero lero, ...\n    Lero lero, ...\n    Lero lero, ...\n    Lero lero, ...\n    Lero lero, ...\n    Lero lero, ...\n    Lero lero, ...\n    Lero lero, ...\n\n\n\nObserva√ß√£o: os caracteres \\t e \\n em uma string referem-se √† um √∫nico caracter. S√£o caracteres especiais que denotam tabula√ß√£o e nova linha, respectivamente."
  },
  {
    "objectID": "index.html#composi√ß√£o-de-string",
    "href": "index.html#composi√ß√£o-de-string",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Composi√ß√£o de string",
    "text": "Composi√ß√£o de string\n\nPoderemos compor strings utilizando alguns marcadores (‚Äúplaceholders‚Äù). S√£o eles:\n\n\n\nMarcador\nTipo\n\n\n\n%d\nN√∫meros inteiros\n\n\n%f\nN√∫meros decimais\n\n\n%s\nStrings\n\n\n\n\nExemplo: Considere as vari√°veis nome = \"Dennis Ritchie\", importancia = \"criador da linguagem C\", ano = 2011. Vamos construir a string \"Dennis Ritchie, criador da linguagem C\", faleceu em 2011.\". Para isso, poderemos aproveitar as informa√ß√µes que est√£o contidas nas vari√°veis nome, importancia e ano.\n\n\n# nome e importancia s√£o vari√°veis do tipo str (s√£o strings):\nnome = \"Dennis Ritchie\"\nimportancia = \"criador da linguagem C\"\n\n# a vari√°vel ano √© do tipo int:\nano = 2011\n\n# Montando a string que desejamos:\nprint(\"%s, %s, faleceu em %d.\" % (nome, importancia, ano))\n\nDennis Ritchie, criador da linguagem C, faleceu em 2011."
  },
  {
    "objectID": "index.html#composi√ß√£o-de-string-1",
    "href": "index.html#composi√ß√£o-de-string-1",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Composi√ß√£o de string",
    "text": "Composi√ß√£o de string\n\nPodemos tamb√©m incrementar os operadores %d, %f e %s para flexibilizar um pouco mais a formata√ß√£o, caso seja necess√°rio, adequando melhor a sa√≠da com o uso de operadores de largura de campo.\n\nExemplo: estude o exemplo que segue:\n\n\nnome = \"Sofia\"\nidade = 35\naltura = 171.5\nmedida = \"cm\"\n\nprint(\"->%20s, tem %03d anos e %6.2f de altura\" % (nome, idade, altura))\n\n# Note o sinal de '-':\n\n->               Sofia, tem 035 anos e 171.50 de altura\n\nprint(\"->%-20s, tem %03d anos e %-10.2f de altura\" % (nome, idade, altura))\n\n->Sofia               , tem 035 anos e 171.50     de altura"
  },
  {
    "objectID": "index.html#composi√ß√£o-de-string-2",
    "href": "index.html#composi√ß√£o-de-string-2",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Composi√ß√£o de string",
    "text": "Composi√ß√£o de string\n\nO sinal de negativo no exemplo anterior informa que o elemento dever√° ser alinhado √† esquerda.\n\nA nota√ß√£o %numeros, informa qual a quantidade de espa√ßo para os caracteres devem ser reservado para a string. Se uma quantidade inferior for reservada, a linguagem Python ir√° negligenciar essa informa√ß√£o e imprimir√° a string inteira. Tente fazer print(\"%1s\" % (\"Pedro Rafael\")).\n\nA nota√ß√£o %a.bf para n√∫meros decimais, informa que dever√° reservar um espa√ßo de tamanho a para representar o n√∫mero, e este n√∫mero ser√° impresso com b casas decimais. A informa√ß√£o a dever√° incluir o ponto como parte do n√∫mero. Por exemplo, rode o c√≥digo print(\"%10.2f\" % (10)).\n\n\nExemplo: Poderemos preencher a esquerda com 0, caso tenhamos deixado muito espa√ßo para representa√ß√£o de um n√∫mero.\n\n\nimport math\nnumero_pi = math.pi\nnumero_euler = math.e\n\nprint(\"O n√∫mero de Euler √© %4.2f\\nO n√∫mero Pi √© %4.2f\" % (numero_euler, numero_pi))\n\nO n√∫mero de Euler √© 2.72\nO n√∫mero Pi √© 3.14"
  },
  {
    "objectID": "index.html#composi√ß√£o-de-string-3",
    "href": "index.html#composi√ß√£o-de-string-3",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Composi√ß√£o de string",
    "text": "Composi√ß√£o de string\n\nUma forma mais moderna de compor strings √© usando o m√©todo format(). Considere o pr√≥ximo exemplo.\n\nExemplo: considere o exemplo abaixo, onde utilizamos o m√©todo format(). Note que a linguagem Python √© zero of set, ou seja, √© ‚Äúzero-based‚Äù, o que significa que a indexa√ß√£o come√ßa por 0.\n\n\nnome = \"Maria\"\nidade = 23\n\n# Usando o m√©todo format:\nprint(\"Meu nome √© {} e tenho {}\".format(nome, idade))\n\n# Podemos passar as posi√ß√µes entre as chaves:\n\nMeu nome √© Maria e tenho 23\n\nprint(\"Tenho {1} e me chamo {0}\".format(nome, idade))\n\nTenho 23 e me chamo Maria"
  },
  {
    "objectID": "index.html#formata√ß√£o-de-alinhamento",
    "href": "index.html#formata√ß√£o-de-alinhamento",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Formata√ß√£o de alinhamento",
    "text": "Formata√ß√£o de alinhamento\n\nUtilizando o m√©todo format, tamb√©m poderemos especificar ‚Äúconfigurar‚Äù a m√°scara para impress√£o dos dados, isto √©, poderemos manipular a largura de campo. Tamb√©m podemos utilizar formata√ß√£o de alinhamento no m√©todo format(). S√£o elas:\n\n\n\n\n\n\n\n\nFormata√ß√£o\nExemplo\nDescri√ß√£o\n\n\n\n{:<}\n\"{:<10}\"\nAlinha √† esquerda e ocupa no m√≠nimo 10 caracteres\n\n\n{:>}\n\"{:>10}\"\nAlinha √† direita e ocupa no m√≠nimo 10 caracteres\n\n\n{:^}\n\"{:^10}\"\nCentraliza e ocupa no m√≠nimo 10 caracteres\n\n\n{:=^10}\n\"{:=^10}\"\nCentraliza e ocupa no m√≠nimo 10 caracteres, justificando para o sinal\n\n\n{:0=3d}\n\"{:0=3d}\"\nAlinha √† direita, preenche com zeros e ocupa no m√≠nimo 3 caracteres\n\n\n{:x<4}\n\"{:x<4}\"\nAlinha √† esquerda e preenche com ‚Äúx‚Äù e ocupa no m√≠nimo 4 caracteres\n\n\n{:b>5}\n\"{:b>5}\"\nAlinha √† direita e preenche com ‚Äúb‚Äù e ocupa no m√≠nimo 5 caracteres"
  },
  {
    "objectID": "index.html#formata√ß√£o-de-alinhamento-1",
    "href": "index.html#formata√ß√£o-de-alinhamento-1",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Formata√ß√£o de alinhamento",
    "text": "Formata√ß√£o de alinhamento\n\nExemplo: considere o exemplo que segue. Olhe com cuidado cada uma das formata√ß√µes. Entender bem elas ajudar√° voc√™ organizar a sa√≠da das suas fun√ß√µes.\n\n\nprint(\"{:<10}\".format(\"left\"))     # \"left     \"\n\nleft      \n\nprint(\"{:>10}\".format(\"right\"))    # \"     right\"\n\n     right\n\nprint(\"{:^10}\".format(\"center\"))   # \"  center  \"\n\n  center  \n\nprint(\"{:=^10}\".format(\"center\"))  # \"==center==\"\n\n==center==\n\nprint(\"{:0=3d}\".format(5))         # \"005\"\n\n005\n\nprint(\"{:x<4}\".format(\"a\"))        # \"axxx\"\n\naxxx\n\nprint(\"{:b>5}\".format(2))          # \"bbb10\"\n\nbbbb2"
  },
  {
    "objectID": "index.html#formata√ß√£o-de-alinhamento-2",
    "href": "index.html#formata√ß√£o-de-alinhamento-2",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Formata√ß√£o de alinhamento",
    "text": "Formata√ß√£o de alinhamento\n\nExerc√≠cio: Considere os objetos nome, idade e salario, conforme abaixo:\n\n\nnome = \"Jo√£o da Silva\"\nidade = 38\nsalario = 12500.37\n\n\nMonte uma f-string s, tal que print(s) retorne:\n\n\n\nNome: [Jo√£o da Silva+++++++], Idade: [0038], Sal√°rio: [***12500.370***]"
  },
  {
    "objectID": "index.html#formata√ß√£o-de-alinhamento-3",
    "href": "index.html#formata√ß√£o-de-alinhamento-3",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Formata√ß√£o de alinhamento",
    "text": "Formata√ß√£o de alinhamento\n\nExerc√≠cio: Considere o c√≥digo que segue:\n\nnome = \"Sofia\"\nidade = 35\naltura = 171.5\nmedida = \"cm\"\n\nUtilizando o m√©todo format(), os operadores de alinhamento e um √∫nico print(), implemente um c√≥digo que forne√ßa a sa√≠da que segue:\n\n\n\nNome = Sofia.............................................\nIdade = ____35____\nAltura = .....171.50cm"
  },
  {
    "objectID": "index.html#formata√ß√£o-de-alinhamento-4",
    "href": "index.html#formata√ß√£o-de-alinhamento-4",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Formata√ß√£o de alinhamento",
    "text": "Formata√ß√£o de alinhamento\n\nSolu√ß√£o:\n\n\nnome = \"Sofia\"\nidade = 35\naltura = 171.5\nmedida = \"cm\"\n\nprint(\"Nome = {0:.<50}\\nIdade = {1:_^10}\\nAltura = {2:.=11.2f}{3}\".format(nome, idade, altura, medida))\n\nNome = Sofia.............................................\nIdade = ____35____\nAltura = .....171.50cm"
  },
  {
    "objectID": "index.html#utilizando-f-strings",
    "href": "index.html#utilizando-f-strings",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Utilizando f-strings",
    "text": "Utilizando f-strings\n\nA partir da vers√£o 3.6 de Python, uma nova forma bastante conveniente surgiu para realizar composi√ß√£o de strings, s√£o as chamadas f-strings. Chama-se assim pois usamos nota√ß√£o f\"\". \n\nDiferen√ßas e semelha√ßas para o uso do format():\n\n\nDiferen√ßa: Voc√™ dever√° passar os nomes das vari√°veis em {};\n\nSemelhan√ßas: as regras de formata√ß√£o ap√≥s os : s√£o ind√™nticas √†s descritas para o m√©todo format().\n\n\nExemplo: utilizando f-string com opera√ß√µes de alinhamento.\n\nnome = \"Pedro Rafael\"\naltura = 171.5\nunidade = \"cm\"\nidade = 35\nprint(f\"Nome: {nome:.<20}\\nAltura: {altura:.^8.2f}{unidade}\\nIdade: {idade:0=3d}\")\n\nNome: Pedro Rafael........\nAltura: .171.50.cm\nIdade: 035"
  },
  {
    "objectID": "index.html#fatiando-strings",
    "href": "index.html#fatiando-strings",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Fatiando strings",
    "text": "Fatiando strings\n\nEm Python, assim como poderemos fazer em outas estruturas de dados que veremos, uma string √© um iterador, isto √©, √© um objeto ao qual poderemos percorrer.\n\nSe podemos percober, ent√£o isso implica que poderemos acessar subelementos.\n\nExemplo: Acessando substrings de uma string principal.\n\ns = \"Bem vindo ao curso de Python pessoal\"\n\nprint(s[0])\n\nB\n\nprint(s[len(s) - 1])\n\nl\n\nprint(s[:5])\n\nBem v\n\nprint(s[-3:-1])\n\noa\n\nprint(s[:])\n\nBem vindo ao curso de Python pessoal\n\nprint(s[:-8])\n\nBem vindo ao curso de Python"
  },
  {
    "objectID": "index.html#fatiando-strings-1",
    "href": "index.html#fatiando-strings-1",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Fatiando strings",
    "text": "Fatiando strings\n\n\n\nAlgumas observa√ß√µes\n\nPython √© zero-based, i.e., o seu sistema de index√£o come√ßa em zero\n\nNo que index√£o de tr√°s para frente s√£o realizadas utilizando valores negativos e o √∫ltimo elemento √© o elemento -1, uma vez que 0 = -0, e portanto n√£o faria sentido indexar de tr√°s para frete a partir do √≠ndice -0.\n\nStrings n√£o s√£o estruturas de dados, e sim, tipos de dados! Todavia, √© poss√≠vel realizar indexa√ß√µes como vimos. As demais estruturas de dados de Python, em que poderemos utilizar √≠ndices para acessar seus elementos, segue o mesmo esquema de indexa√ß√£o das strings, por exemplo, as listas e tuplas."
  },
  {
    "objectID": "index.html#listas",
    "href": "index.html#listas",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Listas",
    "text": "Listas\n\nEm Python, listas s√£o um tipo de estrutura de dados em que podemos armazenar dados, podendo ser de tipos diferentes, e podemos percorrer pelo √≠ndice do elemento na lista.\n\nLembre-se que assim como as strings, as demais estruturas de dados de Python come√ßam sua indexa√ß√£o por zero.\n\nExemplo: Note que acessar os √≠ndices de tr√°s para crente, a indexa√ß√£o come√ßa de \\(-1\\), do mesmo modo que em strings e em arrays do Numpy adiante no curso.\n\n\n# Criando uma lista vazia\nl1 = []\n# Criando uma lista de valores inteiros\nl2 = [1, 6, 8]\n\n# Acessando o primeiro elemento de l2\nl2[0]\n\n# Acessando o √∫ltimo elemento de l2\n\n1\n\nl2[-1]\n\n# Acessando os dois √∫ltimos elementos\n\n8\n\nl2[-2:]\n\n# Acessando os dois primeiros\n\n[6, 8]\n\nl2[0:2]\n\n# Tamb√©m acessando os dois primeiros\n\n[1, 6]\n\nl2[-3:-1]\n\n[1, 6]"
  },
  {
    "objectID": "index.html#listas-1",
    "href": "index.html#listas-1",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Listas",
    "text": "Listas\n\nTamb√©m poderemos ter listas aninhadas e o acesso se d√° da mesma forma. O exemplo que segue explora isso. Leia os coment√°rios.\n\nExemplo: Criando listas aninhadas e acessando seus elementos.\n\n\n# Frutas\nfrutas = ['laranja', 'uva', 'ma√ß√£', 'tomate']\nquantidade_frutas = [10, 20, 5, 8]\n\n# Verduras\nverduras = ['cebola', 'alho', 'piment√£o']\nquantidade_verduras = [10, 8, 5]\n\n# Frutas e verduras\nfrutas_e_verduras = [[frutas, quantidade_frutas], [verduras, quantidade_verduras]]\n\n# Obtendo da lista aninhada frutas_e_verduras, apenas as frutas:\nfrutas_e_verduras[0][0]\n\n# Quais as duas √∫ltimas frutas?\nfrutas_e_verduras[0][0][len(frutas_e_verduras[0][0])-2:]\n\n['laranja', 'uva', 'ma√ß√£', 'tomate']\n['ma√ß√£', 'tomate']"
  },
  {
    "objectID": "index.html#listas-2",
    "href": "index.html#listas-2",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Listas",
    "text": "Listas\n\nEm linguagens orientadas √† objetos, como Python, quase tudo s√£o objetos. Objetos geralmente possui m√©todos associados. Objetos da classe list fornecem diversos m√©todos √∫teis.\n\n\n\n# Criando uma lista\nlista = [\"Jo√£o\", \"Maria\", \"Jos√©\", \"Pedro\"]\n\n# Chegando o tipo:\ntype(lista)\n\n# Testando a inst√¢ncia:\nisinstance(lista, list)\n\n# ou\n\ntype(lista) == list\n\n# Listando os m√©todos de um objeto do tipo list\ndir(lista)\n\n\n\n<class 'list'>\nTrue\nTrue\n['__add__', '__class__', '__class_getitem__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__iadd__', '__imul__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__rmul__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'append', 'clear', 'copy', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort']"
  },
  {
    "objectID": "index.html#listas-3",
    "href": "index.html#listas-3",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Listas",
    "text": "Listas\n\nAlguns m√©toods aparerem com os nomes envolvidos por duplo underscores __. Esses m√©todos s√£o chamados de m√©todos m√°gicos ou m√©todos dunder. Tais m√©todos s√£o √∫teis para permitir flexibilidade na classe. Por exemplo, os desenvolvedores da classe list implementaram o m√©todo __add__ que permitir√° a soma de duas listas.\n\nExemplo: Note que foi poss√≠vel chamar o m√©todo m√°gico __add__ de um objeto da classe list. Invocar o m√©todo m√°gico diretamente pode n√£o ser uma boa pr√°tica. A implementa√ß√£o de __add__ na classe interna list permite que possamos usar o operador bin√°rio + para somar listas. Note que a soma de listas nesse caso significa concatenar as listas.\n\n\n\nl1 = [1, 2, 7, 8, 10]\nl2 = [12, 20, -1]\n\n# __add__ √© um m√©todo m√°gico que se implementado na\n# defini√ß√£o da classe permite que possamos somar\n# duas listas assim:\nl1 + l2\n\n# Ou ent√£o assim:\n\n\n[1, 2, 7, 8, 10, 12, 20, -1]\nl1.__add__(l2)\n[1, 2, 7, 8, 10, 12, 20, -1]"
  },
  {
    "objectID": "index.html#listas-4",
    "href": "index.html#listas-4",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Listas",
    "text": "Listas\n\n√â aconselh√°vel evitar o uso direto dos m√©todos m√°gicos em Python. Os m√©todos m√°gicos s√£o uma forma de encapsulamento e oculta√ß√£o de c√≥digo que permite ao programador escrever c√≥digo mais conciso e limpo. No entanto, os m√©todos m√°gicos tamb√©m podem tornar o c√≥digo mais dif√≠cil de entender e manter, portanto, √© importante us√°-los com sabedoria.\n\nUsando palavras mais diretas, quando voc√™ estiver implementando suas pr√≥prias classes, voc√™ poder√° implementar, por exemplo, o m√©todo m√°gico __add__ que permitir√° voc√™ utilizar opera√ß√µes de soma com seus objetos.\n\nExemplo: M√©todo __doc__ √© usado para retornar docstrings (strings de documenta√ß√£o) de m√©todos e objetos.\n\n\n\n# Criando uma lista vazia:\nsou_uma_lista = list()\n\n# Outra forma de criar uma lista vazia:\nsou_uma_lista = []\n\n# Invocando o m√©todo m√°gico __doc__\n# Ele retorna uma docstring com informa√ß√µes sobre o objeto\nsou_uma_lista.__doc__\n\n\n\n'Built-in mutable sequence.\\n\\nIf no argument is given, the constructor creates a new empty list.\\nThe argument must be an iterable if specified.'"
  },
  {
    "objectID": "index.html#listas-5",
    "href": "index.html#listas-5",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Listas",
    "text": "Listas\n\n\n\nExemplo: Perceba que podemos comparar l1 == l2, uma vez que __eq__ √© um m√©todo da classe list. Note tamb√©m que podemos fazer len(l1) ou len(l2) uma vez que existe o m√©todo __len__ implementado no interior da classe list:\n\n\n# Criando duas listas (l1 e l2):\nl1 = [100, 2, 7, 8, 10]\nl2 = [12, 20, -1]\n\n# S√≥ √© poss√≠vel comparar l1 com l2 abaixo, pois quem implementou\n# a classe list, implementou o m√©todo m√°gico __eq__:\nl1 == l2\n\n# Equivale a fazer\nl1.__eq__(l2)\n\n# Podemos obter o tamanho de uma lista porque existe o m√©todo\n# __len__ implementado na classe list:\nlen(l1)\n\n# Poder√≠amos ter feito:\nl1.__len__()\n\nFalse\nFalse\n5\n5\n\n\n\nExerc√≠cio: Pesquise na internet qual a flexibilidade que os m√©todos m√°gicos __le__, __lt__, __ge__ e __gt__ fornecem a classe list ou a qualquer classe que os cont√©m."
  },
  {
    "objectID": "index.html#listas-6",
    "href": "index.html#listas-6",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Listas",
    "text": "Listas\n\nExemplo: N√£o precisa entender o c√≥digo por completo. Apenas note que implementei o m√©todo m√°gico __sub__ de Python e criei uma nova classe de listas, de nome MinhaLista, que permite subtrair duas listas. Note que n√£o podemos subtrair listas padr√µes de Python, por√©m, agora poderemos subtrair objetos da classe MinhaLista segundo alguma l√≥gica. A l√≥gica implementada em __sub__ √© subtrair os dois primeiros elementos. Voc√™ poderia implementar qualquer outra! Aqui, MinhaLista √© uma subclasse (classe derivada/classe filha) de list.\n\n\nclass MinhaLista(list):\n    # Adicionando a capacidade de subtrair. Aqui\n    # ser√° subtra√≠do os primeiros elementos:\n    def __sub__(self, outra):\n        return self[0] - outra[0]\n\n# Cirando dois objetos da classe MinhaLista:\nl1 = MinhaLista([1, 2, 3])\nl2 = MinhaLista([5, 4, 3])\n\n# Agora posso subtrair duas listas segundo alguma l√≥gica:\nl1 - l2\n\n-4"
  },
  {
    "objectID": "index.html#listas-7",
    "href": "index.html#listas-7",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Listas",
    "text": "Listas\n\nPortanto, os m√©todos m√°gicos s√£o nada mais que m√©todos implementados na defini√ß√£o de uma classe de Python que visam dar maior flexibilidade aos objetos (inst√¢ncias) dessas classes, permitindo, por exemplo, definir opera√ß√µes de soma, subtra√ß√£o, multiplica√ß√£o, divis√£o, compara√ß√µes usando operadores relacionais entre objetos, calcular o tamanho, entre outros recursos.\n\nPor exemplo, somar duas strings significa junt√°-las. O que uma opera√ß√£o ir√° fazer depende do que voc√™ implementar na l√≥gica da fun√ß√£o. Voc√™ aprender√° isso mais tarde.\n\nFoque, por enquanto, apenas nos m√©todos de um objeto do tipo list cujos nomes n√£o est√£o envoltos de __, isto √©, nos m√©todos que n√£o s√£o ‚Äúm√©todos m√°gicos‚Äù.\n\n\n# Desconsidere o c√≥digo abaixo. Estou usando apenas para\n# listar os m√©todos que n√£o come√ßam com '_'.\n[x for x in dir(list) if not x.startswith('_')]\n\n['append', 'clear', 'copy', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort']\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAluno {turma[‚Äònomes‚Äô][0]}, matr√≠cula 0{turma[‚Äòid‚Äô][0]}: m√©dia {round(st.mean(turma[‚Äònotas‚Äô][0]), 2)}‚Äú) ‚Äì>\n\nAluno {turma[‚Äònomes‚Äô][1]}, matr√≠cula 0{turma[‚Äòid‚Äô][1]}: m√©dia {round(st.mean(turma[‚Äònotas‚Äô][1]), 2)}‚Äú) ‚Äì>\n\nAluno {turma[‚Äònomes‚Äô][2]}, matr√≠cula 0{turma[‚Äòid‚Äô][2]}: m√©dia {round(st.mean(turma[‚Äònotas‚Äô][2]), 2)}‚Äú) ‚Äì>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nx is z: {x is z}‚Äú) ‚Äì>  x == z: {x == z}‚Äù) ‚Äì>  y is z: {y is z}‚Äú) ‚Äì>  y == z: {y == z}‚Äù) ‚Äì>\n\n\n\nx == y: {x == y}‚Äú) ‚Äì>  x is y: {x is y}‚Äù) ‚Äì> \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nObjeto num antes do if: {num}‚Äú) ‚Äì>\n\n\n\n\nObjeto num depois do if: {num}‚Äú) ‚Äì> \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n‚Äì>\n\n‚Äì>\n\n‚Äì>\n\n‚Äì>\n\n‚Äì>\n\n‚Äì>\n\n‚Äì>\n\n‚Äì>\n\n‚Äì>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDepartamento de Estat√≠stica da UFPB"
  },
  {
    "objectID": "index.html#listas-8",
    "href": "index.html#listas-8",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Listas",
    "text": "Listas\n\nAbaixo segue uma tabela de m√©todos √∫teis de um objeto que √© inst√¢ncia da classe list. Seja l = [1, 2, 5, 7]\n\n\n\n\n\n\n\n\n\nM√©todo\nExemplo\nDescri√ß√£o\n\n\n\n\nappend\nl.append([1,6,7])\nAdiciona a lista [1,6,7] ao final de l\n\n\nclear\nl.clear()\nRemove todos elementos de l\n\n\ncopy\ng = l.copy()\nCria uma c√≥pia de l\n\n\ncount\nl.count(1)\nConta o n√∫mero de ocorr√™ncias de 1 em l\n\n\nextend\nl.extend([1,2])\nAdiciona os elementos de [1,2] ao final de l\n\n\nindex\nl.index(2)\nRetorna o √≠ndice da primeira ocorr√™ncia de 2\n\n\ninsert\nl.insert(1, 3)\nInsere 3 na posi√ß√£o 1 da lista l\n\n\nremove\nl.remove(2)\nRemove a primeira ocorr√™ncia de 2 em l\n\n\npop\nl.pop(len(l)-1)\nRemove o √∫ltimo elemento da lista l, devolvendo o elemento removido\n\n\nreverse\nl.reverse()\nRetorna a lista reversa de l\n\n\nsort\nl.sort()\nOrdena a lista l"
  },
  {
    "objectID": "index.html#listas-9",
    "href": "index.html#listas-9",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Listas",
    "text": "Listas\n\nExerc√≠cio: Com base no exemplo da tabela acima, descreva a diferen√ßa dos m√©todos append e extend.\n\nMuitos m√©todos de Python utilizando passagem por refer√™ncia, isto √©, n√£o realizam c√≥pias do objeto para realizar a opera√ß√£o. No exemplo que segue, note que l.sort() ordena a lista l sem realizar c√≥pia. Se desejamos realizar uma c√≥pia, deveremos usar o m√©todo copy.\n\nExemplo: Estude o c√≥digo abaixo. Note que com a fun√ß√£o id() poderemos obter o endere√ßo de mem√≥ria de objetos em Python. Perceba tamb√©m que opera√ß√µes de atribui√ß√£o de listas, no caso, l2 = l1 n√£o far√° com que l2 seja uma c√≥pia de l1. Isso trar√° desepenho computacional, uma vez que evitar√° c√≥pias desnecess√°rias, mas poder√° pegar de surpresa iniciantes na linguagem.\n\n\nl1 = [4, 7, 8, -1]\n\n# Ordenando l.\nl1.sort()\n\n# Note que n√£o foi preciso reatribuir l1.sort() √† l1\n# para que l1 tivesse seus valores ordenados\nprint(l1)\n\n# Note tamb√©m que l2 n√£o √© uma c√≥pia de l1 quando\n# utilizamos o operador de atribui√ß√£o =\nl2 = l1 # l2 n√£o √© c√≥pia de l1\n\n# Aqui l2 olha para o mesmo endere√ßo de mem√≥ria de l1.\nprint(f\"Endere√ßo de l1 = {id(l1)}\")\nprint(f\"Endere√ßo de l2 = {id(l2)}\")\n\n# Se quisermos que l3 seja uma c√≥pia de l1, usamos copy():\nl3 = l1.copy()\nprint(f\"Endere√ßo de l1 = {id(l1)}\")\nprint(f\"Endere√ßo de l2 = {id(l2)}\")\n\n# Note que ordenar l2 ir√° ordenar l1, uma vez que l2\n# n√£o √© c√≥pia de l1. Nesse caso, dizemos que l2 √© um view\n# de l1. Ambos apontam para o mesmo enderelo de mem√≥ria.\nl2.sort() # Ordenar l2 equivale a ordenar l1.\nprint(l1)\n\n[-1, 4, 7, 8]\nEndere√ßo de l1 = 139638637776896\nEndere√ßo de l2 = 139638637776896\nEndere√ßo de l1 = 139638637776896\nEndere√ßo de l2 = 139638637776896\n[-1, 4, 7, 8]"
  },
  {
    "objectID": "index.html#listas-10",
    "href": "index.html#listas-10",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Listas",
    "text": "Listas\n\nQual a diferen√ßas de pop e remove?\n\n\nO m√©todo remove ir√° remover a primeira ocorr√™ncia do valor passado ao m√©todo. Por exemplo. l.remove(1) ir√° remover a primeira ocorr√™ncia do valor 1 na lista l. J√°, fazer l.pop(1) ir√° remover o elemento na posi√ß√£o 1 da lista l.\n\n\n\nUma outra diferen√ßa importante √© que o m√©todo pop ir√° devolver o elemento removido. Ou seja, removido = l.pop(1) ir√° armazenar o valor removido que se encontrava na posi√ß√£o 1 da lista l e poder√° ser armazenado no objeto removido. Por√©m, tente fazer o mesmo com remove."
  },
  {
    "objectID": "index.html#listas-11",
    "href": "index.html#listas-11",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Listas",
    "text": "Listas\n\nExemplo: Removendo elementos da lista l usando os m√©todos pop e remove. Note que b ser√° do tipo None, uma vez que remove ir√° remover a primeira ocorr√™ncia de 1 em l, mas sem devolver o valor removido.\n\n\n# Removendo usando pop:\nl = [1,2,3]\na = l.pop(1)\nprint(a)\n\n# Removendo usando remove:\nl = [1,2,3]\nb = l.remove(1)\n\n# Note que b ser√° do tipo None, uma vez que\n# o m√©todo remove remover√° sem devolver o\n# elemento removido:\nprint(b)\n\n2\nNone"
  },
  {
    "objectID": "index.html#listas-12",
    "href": "index.html#listas-12",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Listas",
    "text": "Listas\n\nExemplo: O c√≥digo que segue apresentam alguns exemplos comentados de como acessar elementos de uma lista:\n\n\n# Criando a lista x:\nx = [1, 6, 3, 0, -1, 2, 8, 7]\n\nprint(f\"Acessando os tr√™s primeiros: {x[:3]}\")\nprint(f\"Quarto ao √∫ltimo elemento de l: {x[4:]}\")\n\n# Note que o √∫ltimo elemento n√£o √© incluso no fatiamento:\nprint(f\"Acessando do segundo ao quinto: {x[1:6]}\")\n\n# Poderemos utilizar um terceiro √≠ndice.\n# Note que o √∫ltimo elemento n√£o √© incluso no fatiamento:\nprint(f\"Acessando do primeiro ao s√©timo, pulando 2 {x[1:7]}\")\n\n# Poderemos utilizar um terceiro √≠ndice para dar o passo:\nprint(f\"Acessando do 5 ao primeiro, pulando 2: {x[5::-2]}\")\n\n# Note que o elemento na posi√ß√£o 3 n√£o √© incluso:\nprint(f\"Acessando do √∫ltimo ao terceiro, pulando 2: {x[len(x):3:-2]}\")\n\nAcessando os tr√™s primeiros: [1, 6, 3]\nQuarto ao √∫ltimo elemento de l: [-1, 2, 8, 7]\nAcessando do segundo ao quinto: [6, 3, 0, -1, 2]\nAcessando do primeiro ao s√©timo, pulando 2 [6, 3, 0, -1, 2, 8]\nAcessando do 5 ao primeiro, pulando 2: [2, 0, 6]\nAcessando do √∫ltimo ao terceiro, pulando 2: [7, 2]"
  },
  {
    "objectID": "index.html#listas-13",
    "href": "index.html#listas-13",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Listas",
    "text": "Listas\n\nO √∫ltimo √≠ndice de uma fatia (slice) de lista ou outra estrutura em Python n√£o √© incluso porque as fatias usam uma nota√ß√£o ‚Äúin√≠cio:fim‚Äù onde ‚Äúin√≠cio‚Äù √© inclu√≠do na fatia e ‚Äúfim‚Äù √© exclu√≠do. Portanto, ao selecionar uma fatia com o √≠ndice final desejado, √© preciso adicionar 1 a esse √≠ndice.\n\nAl√©m disso:\n\n\nl = [4, 8, 0, 12, 9, 13, 11]\n\n# Acessando todos os elementos de l. √â o mesmo\n# que considerar apenas l:\nprint(f\"l[:] = {l[:]}\")\n\n# Obtendo a lista invertida (passo 1):\nprint(f\"l[::-1] = {l[::-1]}\")\n\n# Obtendo a lista invertida (passo 2):\nprint(f\"l[::-2] = {l[::-2]}\")\n\nl[:] = [4, 8, 0, 12, 9, 13, 11]\nl[::-1] = [11, 13, 9, 12, 0, 8, 4]\nl[::-2] = [11, 9, 0, 4]"
  },
  {
    "objectID": "index.html#tuplas",
    "href": "index.html#tuplas",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Tuplas",
    "text": "Tuplas\n\nDiferentemente de listas, que que poderemos alterar os seus valores, tuplas s√£o estruturas de dados imut√°veis em Python.\n\nVoc√™ poder√° usar tuplas para representar valores constantes.\n\n# Definindo uma tupla de nome t:\nt = (\"Pedro\", 35, \"Valentina\", 1)\n\n# Acessando os dois √∫ltimos elementos:\nt[2:len(t)]\n\n# A tentativa de substituir um elemento da\n# tupla t dar√° erro. Tuplas s√£o objetos\n# imut√°veis:\nt[0] = \"Emanuelle\" # Dar√° erro"
  },
  {
    "objectID": "index.html#tuplas-1",
    "href": "index.html#tuplas-1",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Tuplas",
    "text": "Tuplas\n\nDurante toda a execu√ß√£o do programa, uma tupla n√£o poder√° ser modificada. No exemplo anterior, voc√™ poder√° no decorrer do programa redefinir o objeto t, ou seja, poder√° alterar todo o objeto t, que poder√° em algum momento, por exemplo, se tornar uma lista, mas enquanto t for uma tupla, opera√ß√µes de indexa√ß√£o para substitui√ß√£o de valor n√£o poder√° ser realizada. Tuplas s√£o imut√°veis!\n\n\n# Criando uma tupla vazia\nt = () # ou t = tuple()\n\n# Apesar de n√£o podermos alterar elementos de uma tupla,\n# poderemos concatenar tuplas com o operador +:\nt = t + (1, 2, 3) + (4,)\nprint(t)\n\n# Repetindo a lista com o operador '*':\nt = t * 3\nprint(t)\n\n(1, 2, 3, 4)\n(1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4)"
  },
  {
    "objectID": "index.html#tuplas-2",
    "href": "index.html#tuplas-2",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Tuplas",
    "text": "Tuplas\n\nNo c√≥digo anterior, note (4,). Para criar uma t√∫pla com um √∫nico elemento voc√™ der√° colocar a v√≠rgula. Note que type((4)) n√£o √© do tipo tuple:\n\n\n# (4) n√£o √© uma tupla com um √∫nico elemento:\ntype((4)) == tuple\n\n# (4,) √© uma tupla com um √∫nico elemento:\ntype((4,)) == tuple\n\nFalse\nTrue\n\n\n\nOutra forma de chegar poderia ser utilizando a fun√ß√£o isinstance(obj, classe):\n\n\n# t1 n√£o √© uma tupla\nt1 = (4)\nisinstance(t1, tuple)\n\n# t2 √© uma tupla\nt2 = (4,)\nisinstance(t2, tuple)\n\nFalse\nTrue"
  },
  {
    "objectID": "index.html#tuplas-3",
    "href": "index.html#tuplas-3",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Tuplas",
    "text": "Tuplas\n\nApesar de termos usado a fun√ß√£o isinstance na explica√ß√£o de tuplas em Python, essa fun√ß√£o √© aplic√°vel sempre que voc√™ desejar saber se um objeto √© de uma determinada inst√¢ncia.\n\n\nUsando typeUsando isinstance\n\n\nNormalmente usamos type() para chegar a classe de algum objeto. Por exemplo, se desejarmos saber qual a classe de objetos quaisquer, sejam eles l, s e t, faremos:\n\n\n\nl = [1, 2, -1, 0.58]\ns = \"string\"\nt = (1, -5, 1.2)\n\ntype(l)\ntype(s)\ntype(t)\n\n\n<class 'list'>\n<class 'str'>\n<class 'tuple'>\n\n\n\n\nNote que o retorno √© a classe dos respectivos objetos. Para s foi retornado o tipo de dado (string/str) e para l e t foi retornado a estrutura de dados, list e tuple, respectivamente. Emfim, ser√° retornado a classe do objeto que poder√° fazer mens√£o ao tipo, estrutura de dados ou √† alguma caracter√≠stica do objeto que voc√™ deseja inspecionar.\n\n\nObserve o uso da fun√ß√£o type na aba anterior. Se desejo fazer uma pergunta sobre os tipos que agora sabemos quais s√£o, uma vez que foram retornados por type, poderemos perguntar fazendo:\n\n\n\n# l √© uma lista?\nisinstance(l, list) # ou type(l) == list\n\n# s √© uma string (str)?\nisinstance(s, str) # ou type(s) == str\n\n# t √© uma tupla?\nisinstance(t, tuple) # ou type(t) == tuple\n\n\nTrue\nTrue\nTrue"
  },
  {
    "objectID": "index.html#tuplas-4",
    "href": "index.html#tuplas-4",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Tuplas",
    "text": "Tuplas\n\nOs par√™nteses em tuplas s√£o opicionais. Considere o exemplo:\n\n\nt = 1, \"carro\"\n\n# O objeto t √© uma tupla?\nisinstance(t, tuple)\n\nTrue\n\n\n\nA linguagem Python n√£o impedir√° voc√™ de ter tuplas concatenadas, ou eventualmente ter uma lista como elemento de uma tuplas. Concatena√ß√µes coerentes de estruturas de dados normalmente ser√£o permiss√≠veis.\n\n\nl = (1, 2, (6, 7), (1, [\"a\", (\"b\", \"c\")]))\n\n# Acessando a tupla (\"b\", \"c\"):\nl[-1][1][1]\n\n('b', 'c')"
  },
  {
    "objectID": "index.html#tuplas-5",
    "href": "index.html#tuplas-5",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Tuplas",
    "text": "Tuplas\n\nObjetos do tipo tupla apresentam dois m√©todos comuns, desconsiderando os m√©todos m√°gicos (m√©todos dunder). S√£o eles o m√©todo index() e o m√©todo count(). O primeiro, fornece o √≠ndice da primeira ocorr√™ncia de uma valor na tupla. J√° o segundo, conta o n√∫mero de ocorr√™ncias de uma quantidade na lista.\n\nVeja:\n\n\nfrutas = (\"uva\", \"banana\", \"abacaxi\", \"abacaxi\")\n\n# Buscando o n√∫mero de ocorr√™ncias de uva e abacaixi e\n# salvando na lista frequ√™ncia:\nfrequencia = [frutas.count(\"uva\"), frutas.count(\"abacaxi\")]\nprint(f\"[N. de uva, N. de abacaxi] = {frequencia}\\n\")\n\n# Buscando o √≠ndice da primeira ocorr√™ncia de banana:\nprint(f\"\\'banana\\' encontra-se na posi√ß√£o {frutas.index('banana')} de frutas\\n\")\n\n[N. de uva, N. de abacaxi] = [1, 2]\n\n'banana' encontra-se na posi√ß√£o 1 de frutas"
  },
  {
    "objectID": "index.html#dicion√°rios",
    "href": "index.html#dicion√°rios",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Dicion√°rios",
    "text": "Dicion√°rios\n\nDicion√°rios consiste em uma estrutura de dados similar √† uma lista, por√©m com propriedade de acesso diferente. No caso das listas, podemos acessar seus elementos por √≠ndices num√©ricos. J√° um dicion√°rio, cada elemento possui uma chave. √â por meio dessa chave que acessamos os respectivos √≠tens.\n \n\n\n\nId\nAluno\nNota 1\nNota 2\nNota 3\n\n\n\n\n01\nJo√£o da Silva\n7,25\n8.74\n8,20\n\n\n02\nFabiano Dalison\n8,00\n9,25\n7,90\n\n\n03\nJos√© Walter\n10,00\n9,50\n9,90"
  },
  {
    "objectID": "index.html#dicion√°rios-1",
    "href": "index.html#dicion√°rios-1",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Dicion√°rios",
    "text": "Dicion√°rios\n\nSem uso de data frames, em Pandas que aprenderemos a utilizar adiante no curso, poder√≠amos salvar o registro da tabela acima usando uma estrutura de dados da classe dict, isto √©, em um dicion√°rio. Veja:\n\n\n\nimport statistics as st\n\nid = (1, 2, 3)\nnomes = [\"Jo√£o da Silva\", \"Fabiano Dalison\", \"Jos√© Walter\"]\nnotas = [[7.25, 8.74, 8.20], [8.00, 9.25, 7.90], [10.00, 9.50, 9.90]]\nturma = {'id': id, 'nomes': nomes, 'notas': notas}\n\nprint(f\"--> Aluno {turma['nomes'][0]}, matr√≠cula 0{turma['id'][0]}: m√©dia {round(st.mean(turma['notas'][0]), 2)}\\n\")\n\nprint(f\"--> Aluno {turma['nomes'][1]}, matr√≠cula 0{turma['id'][1]}: m√©dia {round(st.mean(turma['notas'][1]), 2)}\\n\")\n\nprint(f\"--> Aluno {turma['nomes'][2]}, matr√≠cula 0{turma['id'][2]}: m√©dia {round(st.mean(turma['notas'][2]), 2)}\")\n\n\n--> Aluno Jo√£o da Silva, matr√≠cula 01: m√©dia 8.06\n\n--> Aluno Fabiano Dalison, matr√≠cula 02: m√©dia 8.38\n\n--> Aluno Jos√© Walter, matr√≠cula 03: m√©dia 9.8"
  },
  {
    "objectID": "index.html#dicion√°rios-2",
    "href": "index.html#dicion√°rios-2",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Dicion√°rios",
    "text": "Dicion√°rios\n\nOs m√©todos associados √† um objeto do tipo dict, encontra-se ao lado. Desconsidere os m√©todos dunder (m√©todos double underscore):\n\n\n\n# Criando um dicion√°rio vazio\nd = {}\ndir(d) # ou diretamente d({})\n\n\n['__class__', '__class_getitem__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__ior__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__or__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__ror__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']"
  },
  {
    "objectID": "index.html#dicion√°rio",
    "href": "index.html#dicion√°rio",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Dicion√°rio",
    "text": "Dicion√°rio\n\nListando apenas os m√©todos comuns, isto √©, todos os m√©todos que n√£o come√ßam com underscore:\n\n\n# Agora, voc√™ n√£o precisa entender por completo o\n# c√≥digo que segue. Mas, basicamente o que ele est√°\n# fazendo √© retornar os m√©todos de {} (um dicion√°rio)\n# que n√£o come√ßam com underscore '_':\n[i for i in dir({}) if not i.startswith('_')]\n\n['clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']"
  },
  {
    "objectID": "index.html#dicion√°rios-3",
    "href": "index.html#dicion√°rios-3",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Dicion√°rios",
    "text": "Dicion√°rios\n\nConsidere o dicion√°rios d = {'a': 1, 'b': 2, 'c': 3}. Ent√£o,\n\n\n\n\n\n\n\n\n\nM√©todo\nExemplo\nDescri√ß√£o\n\n\n\n\nclear\nd.clear()\nLimpa o dicion√°rio, tendo assim um dicion√°rio vazio.\n\n\ncopy\nx = d.copy()\nx √© uma c√≥pia do dicion√°rio d (x is d √© False).\n\n\nfromkeys\nx = d.fromkeys(['a', 'c'], 0)\nx √© um novo dicion√°rio com chaves 'a' e b com 0 sendo fizado como valor padr√£o.\n\n\nitems\nl = list(d.items())\nd.items() retorna um objeto da classe dict_items que poder√° ser convertida para uma lista usando a fun√ß√£o list().\n\n\npop\nd.pop('e', -1)\nRemove e devolve o valor da chave removida. Caso a chave n√£o seja encontrada no dicion√°rio, -1 ser√° devolvido.\n\n\nsetdefault\nd.setdefault('e', 4)\nColoca a chave e e o valor 4 ao dicion√°rio d. Caso a chave j√° exista em d, o valor da chave ser√° substitu√≠do por 4.\n\n\nvalues\nx = list(d.values())\nd.values() retorna um objeto da classe dict_values que poder√° ser convertido √† uma lista de valores usando a fun√ß√£o list().\n\n\nget\nx = d.get('c')\nRetorna o valor 3 (item da chave c) do dicion√°rio d. Caso a chave n√£o exista, None ser√° retornado.\n\n\nkeys\nx = list(d.keys())\nRetorna um objeto da classe dict_keys que poder√° ser convertido para uma lista com a fun√ß√£o list.\n\n\npopitem\nd.popitem()\nRemove o √∫ltimo item (chave e valor) do dicion√°rio d e retorna a tupla ('c', 3).\n\n\nupdate\nd.update({'a': 1.2, 'e': 5.03})\nAtualiza o dicion√°rio d, modificando o valor da chave a para 1.2 e introduzindo uma nova informa√ß√£o de chave e e valor 5.03."
  },
  {
    "objectID": "index.html#dicion√°rios-5",
    "href": "index.html#dicion√°rios-5",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Dicion√°rios",
    "text": "Dicion√°rios\n \nExerc√≠cio: Considerando o dicion√°rio aninhado d no c√≥digo do slide anterior, construia uma express√£o que retorne um valor da classe bool (True ou False), em que a regra √©:\n\n\nTestar se dentro do dicion√°rio 'pessoas', primeiro √≠tem do dicion√°rio d, existe em nomes as strings Jo√£o ou Jos√© e que a m√©dia dos valores da chave idades esteja no intervalo [20, 35) e que al√©m disso exista no √≠tem escolas alguma com o nome A ou E.\n\n\nO operador in poder√° ser utilizado com listas e tuplas, estruturas que j√° conversamos, como tamb√©m com conjuntos, estrutura de dados que ser√° apresentada em breve. Por exemplo, not(2 in [1,2,3]) or 1 in (-1,1) ir√° retornar True."
  },
  {
    "objectID": "index.html#dicion√°rios-6",
    "href": "index.html#dicion√°rios-6",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Dicion√°rios",
    "text": "Dicion√°rios\n\nA partir da vers√£o 3.9 de Python, √© poss√≠vel utilizar o operador infix | para concatenar dois dicion√°rios. An√°logo ao m√©todo update(), por√©m com uma nota√ß√£o mais simples.\n\n\nd1 = {'a': 1, 'b': 2, 'c': 3}\nd2 = {'e': 4, 'f': 5, 'g': 6}\nd3 = {'h': 7, 'c': 4}\n\nprint(f\"d1 | d2 = {d1 | d2}\")\n# Note que aqui, a chave 'c' de d3 ir√° sobrepor a\n# chave 'c' de d1:\n\nd1 | d2 = {'a': 1, 'b': 2, 'c': 3, 'e': 4, 'f': 5, 'g': 6}\n\nprint(f\"d1 | d2 = {d1 | d3}\")\n\nd1 | d2 = {'a': 1, 'b': 2, 'c': 4, 'h': 7}"
  },
  {
    "objectID": "index.html#conjuntos-1",
    "href": "index.html#conjuntos-1",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Conjuntos",
    "text": "Conjuntos\n\nNo que se refere a ordem dos elementos, a estrutura de dados de dicion√°rio tamb√©m n√£o √© indicada. Admite-se chaves distintas com elementos iguais, mas n√£o poderemos ter chaves repetivas e nem considerar a ordem dos elementos. Voc√™ at√© poder√° fazer {'a': 1, 'a': 2}, ao construir um dicion√°rio, por√©m, apenas o √∫ltimo par de chave e valor ser√° considerado.\n\n\n\n# Criando um conjunto vazio.\na = set() # poderia ter feito simplesmente a = {}\n\n# Itroduzindo elementos em um conjunto:\na.add(1)\na.add(2)\na.add(3)\nprint(f\"Meu conjunto √© {a}!\")\n\nMeu conjunto √© {1, 2, 3}!"
  },
  {
    "objectID": "index.html#conjuntos-2",
    "href": "index.html#conjuntos-2",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Conjuntos",
    "text": "Conjuntos\n\nExemplo: Atualizando um conjunto com elementos de outro conjunto. Note que esse m√©todo, assim como o m√©todo add, realiza modifica√ß√µes no objeto sem termos que reatribuir o resultado, isto √©, realiza a opera√ß√£o sem necessidade de c√≥piar o objeto. Ali√°s, isso √© uma pr√°tica comum em muitos m√©todos de Python.\n\na = {1, 2, 3, 4}\nb = {5, 6, 7}\n\n# Imprimindo os endere√ßos dos objetos na mem√≥ria\n\nprint(f\"Endere√ßo de 'a': {hex(id(a))}\")\nprint(f\"Endere√ßo de 'b': {hex(id(b))}\")\n\n# Iremos modificar 'a', onde introduziremos\n# os elementos de 'b' em a:\na.update(b)\n\n# Observando novamente o endere√ßo de 'a':\nprint(f\"Endere√ßo de 'a': {hex(id(a))}\")\n\nüìå Note que o endere√ßo de mem√≥ria do objeto a permanece igual ao endere√ßo de mem√≥ria de a antes de atualizarmos a com o m√©todo update."
  },
  {
    "objectID": "index.html#conjuntos-3",
    "href": "index.html#conjuntos-3",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Conjuntos",
    "text": "Conjuntos\n\nVoc√™ poder√° testar se um determinado valor pertence √† um conjunto em Python √† um conjunto utilizando a fun√ß√£o in, assim como tamb√©m poder√° fazer uso em estruturas como listas, tuplas e dicion√°rios.\n\nExemplo: Estude o c√≥digo abaixo. Note que podemos converter uma lista em um set, podendo ser √∫til, por exemplo, quando desejarmos conhecer as categorias poss√≠veis em uma lista.\n\n\n\n# Aqui o retorno ser√° True, uma vez que\n# 7 √© elemento do conjunto:\n7 in {1, 2, 3, 7, 5}\n\n# Aqui o retorno √© False, uma vez que o conjunto\n# {1, 2} n√£o √© subconjunto do conjunto {1, 2, -1}:\n\n{1, 2} in {1, 2, -1}\n\n# Convertendo uma lista com elementos repetidos\n# em um conjunto:\nl = [1, 2, 3, -1, -1, 2, 3, 1]\nconjunto_l = set(l)\nprint(f\"Conjunto l = {conjunto_l}!\")\n\n\nTrue\nFalse\nConjunto l = {1, 2, 3, -1}!"
  },
  {
    "objectID": "index.html#conjuntos-4",
    "href": "index.html#conjuntos-4",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Conjuntos",
    "text": "Conjuntos\n\n\n\nAlgumas opera√ß√µes importantes de conjuntos que poder√£o ser √∫teis ao manipular conjuntos Python:"
  },
  {
    "objectID": "index.html#conjuntos-5",
    "href": "index.html#conjuntos-5",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Conjuntos",
    "text": "Conjuntos\n\nAbaixo segue a Tabela com as principais opera√ß√µes entre conjuntos que voc√™ poder√° realizar usando a estrutura de dados set. Outras opera√ß√µes de conjuntos poder√£o ser obtidas com base nas opera√ß√µes de uni√£o, intersec√ß√£o, diferen√ßa e diferen√ßa sim√©trica.\n\n\n\n\n\n\n\n\n\n\nOpera√ß√£o\nSintaxe\nExemplo\nResultado\n\n\n\n\nUni√£o: \\(A \\cup B\\)\n|\n{1, 2} | {3, 4}\n{1, 2, 3, 4}\n\n\nIntersec√ß√£o: \\(A \\cap B\\)\n&\n{1, 0} & {0, 4}\n{0}\n\n\nDiferen√ßa: \\(A - B\\)\n-\n{7, 6, 8} - {6, 8}\n{7}\n\n\nDiferen√ßa sim√©trica: \\(\\overline{A \\cap B}\\)\n^\n{1, 2, 3} ^ {8, 5, 3}\n{1, 2, 5, 8}"
  },
  {
    "objectID": "index.html#section-13",
    "href": "index.html#section-13",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "",
    "text": "Conjuntos\n\nAlguns outros m√©todos importantes para manipular conjuntos em Python s√£o:\n\n\npop(): no caso de conjuntos, o m√©todo pop() sempre ir√° remover o √∫ltimo elemento do conjunto. N√£o ser√° poss√≠vel passar uma posi√ß√£o, tendo em vista que em conjuntos, a posi√ß√£o n√£o importa.\nissubset(): checa se um conjunto √© subconjunto de outro.\nissuperset(): checa se um conjunto √© superconjunto de outro.\nisdisjoint(): checa se os conjuntos s√£o disjuntos.\nremove(): remove o valor passado como argumento. Note que aqui, diferentemente de lista, n√£o √© preciso destacar que o m√©todo removerar a primeira ocorr√™ncia, uma vez que n√£o h√° elementos repetidos em conjuntos.\ndiscard(): remove um elemento de um conjunto, caso esse elemento perten√ßa ao conjunto."
  },
  {
    "objectID": "index.html#conjuntos-7",
    "href": "index.html#conjuntos-7",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Conjuntos",
    "text": "Conjuntos\n\nExemplo: Exemplo do uso dos m√©todos enumerados no slide anterior:\n\n\n# Defini√ß√£o de um conjunto qualquer:\ncon1 = {-1, 0, 3, -2, 10}\ncon2 = {10, -2, 3}\n\n\n# Note que os conjuntos con1 e con2 n√£o s√£o conjuntos\n# disjuntos. H√° elementos que eles compartilham:\ncon1.isdisjoint(con2)\n\n# Note tamb√©m que con2 √© subconjunto de con1. Lembre-se\n# sempre que em conjunto a ordem n√£o importa.\n\nFalse\n\ncon2.issubset(con1)\n\n# Temos tamb√©m que con1 √© superconjunto de con2. Veja:\n\nTrue\n\ncon1.issuperset(con2)\n\n# Removendo o √∫ltimo elemento de con1. No caso, o valor\n\nTrue\n\ncon1.pop()\n\n# Removendo o valor 10 do conjunto con1:\n\n0\n\ncon1.remove(10)\n\n# Removendo, se existir, o valor 1.2 de con1:\ncon1.discard(1.2)"
  },
  {
    "objectID": "index.html#conjuntos-8",
    "href": "index.html#conjuntos-8",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Conjuntos",
    "text": "Conjuntos\n   \nExerc√≠cio: Como vimos, tanto o m√©todo remove() quanto o m√©todo discard() s√£o m√©todos objetos da classe set que s√£o √∫teis para remover elementos de um conjunto. Descreva a principal diferen√ßas dos dois m√©todos. Aprensente um exemplo."
  },
  {
    "objectID": "index.html#is-e",
    "href": "index.html#is-e",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "is e ==",
    "text": "is e ==\n\nEm geral, poderemos comparar dois ou mais objetos Python utilizando a fun√ß√£o is, al√©m de construir express√µes utilizando os operadores l√≥gicos (and, or e not) e/ou relacionais (<, >, <=, > e !=).\n\nAlgumas estruturas de dados, como dicion√°rios, n√£o permitem o uso de operadores relacionais <, >, <= e >=, por√©m, por exemplo, √© poss√≠vel fazer uso dos operadores == e !=. O que essas opera√ß√µes significam ao comparar cada objeto depender√° das caracter√≠sticas intr√≠nsecas a natureza l√≥gica da implementa√ß√£o das classes dos objetos comparados.\n\nAos poucos, na medida que os nossos programas ir√£o ficando maiores, e o n√∫mero de exemplos e exerc√≠cios forem aumentando, esses detalhes ir√£o sendo absorvidos."
  },
  {
    "objectID": "index.html#is-e-1",
    "href": "index.html#is-e-1",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "is e ==",
    "text": "is e ==\n\n\n\nGostaria apenas de destacar o uso do operador is e comparar com o do operador ==. O operador relacional de igual (==) √© √∫til, como j√° sabemos, para poder comparar dois objetos, no que refere-se √† igualdade dos seus conte√∫dos e estrutura. Por exemplo, [1, 2, 3] == {1, 2, 3} ir√° retornar False pois a pesar de terem o mesmo elemento, os objetos s√£o diferentes (classes diferentes). [1, 2, 3] √© uma lista, enquanto, {1, 2, 3} √© uma tupla.\n\nDo mesmo modo que {1, 2, 3} == {3, 4, 2} tamb√©m retornar√° False, uma vez que mesmo sendo objetos com mesma estrutura de dados, eles possuem elementos diferentes."
  },
  {
    "objectID": "index.html#is-e-2",
    "href": "index.html#is-e-2",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "is e ==",
    "text": "is e ==\n\nAlgumas estruturas de dados n√£o tem no√ß√£o de ordem. Por exemplo, em conjuntos, {1, 4, -1} == {-1, 1, 4} ir√° retornar True, uma vez que conjuntos s√£o iguais se ambos os objetos s√£o da mesma classe e possuem os mesmos elementos. Isso, por exemplo, n√£o ocorre com listas.\n\nVeja:\n\n\n# Comparando dois conjuntos:\n{1, 4, -1} == {-1, 1, 4}\n\n# Comparando duas listas. A ordem em\n# listas tem import√¢ncia\n[1, 4, -1] == [-1, 1, 4]\n\nTrue\nFalse"
  },
  {
    "objectID": "index.html#is-e-3",
    "href": "index.html#is-e-3",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "is e ==",
    "text": "is e ==\n\nO operador is, por sua vez, √© uma compara√ß√£o ainda mais forte sobre a igualdade de dois objetos. O operador is tamb√©m comparar se os objetos s√£o iguais na mem√≥ria do computador. Por exemplo,\n\n# Conjuntos:\ns1 = {1, 4, -1}\ns2 = {1, 4, -1}\ns3 = {-1, 4, 1}\n\nprint(f\"s1 is s2: {s1 is s2}\\n(id_s1: {hex(id(s1))}, id_s2: {hex(id(s2))}\\n\")\nprint(f\"s1 is s3: {s1 is s3}\\n(id_s1: {hex(id(s1))}, id_s3: {hex(id(s3))}\\n\")\nprint(f\"s2 is s3: {s2 is s3}\\n(id_s2: {hex(id(s2))}, id_s3: {hex(id(s3))}\")\n\nUsamos hex() para converter um n√∫mero inteiro para hexadecimal. Leia sobre as fun√ß√µes bin() e otc()."
  },
  {
    "objectID": "index.html#is-e-4",
    "href": "index.html#is-e-4",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "is e ==",
    "text": "is e ==\n\nExerc√≠cio: Inspecione o c√≥digo que segue. Exlique os porqu√™s das sa√≠das!\n\n\n\nx = [1, 2, 3]\ny = x\nz = y.copy()\n\nprint(f\"--> x is z: {x is z}\\n\")\nprint(f\"--> x == z: {x == z}\\n\")\nprint(f\"--> y is z: {y is z}\\n\")\nprint(f\"--> y == z: {y == z}\\n\")\n\n\n# Ordenando y:\ny.sort()\n\nprint(f\"--> x == y: {x == y}\\n\")\nprint(f\"--> x is y: {x is y}\\n\")\n\n\n--> x is z: False\n\n--> x == z: True\n\n--> y is z: False\n\n--> y == z: True\n\n--> x == y: True\n\n--> x is y: True"
  },
  {
    "objectID": "index.html#qual-estrutura-de-dados-usar",
    "href": "index.html#qual-estrutura-de-dados-usar",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Qual estrutura de dados usar?",
    "text": "Qual estrutura de dados usar?\n\nSe voc√™ n√£o sabe qual estrutura de dados utilizar, a Tabela que segue te dar√° uma luz üí°:\n\n\n\n\n\n\n\n\n\n\n\nListas\nTuplas\nDicion√°rios\nConjuntos\n\n\n\n\nOrdem dos elementos\nFixa\nFixa\nMantida a partir do Python 3.7\nIndeterminada\n\n\nTamanho\nVari√°vel\nFixo\nVari√°vel\nVari√°vel\n\n\nElementos Repetidos\nSim\nSim\nApenas os valores, mas com chaves √∫nicas\nN√£o\n\n\nPesquisa\nSequ√™ncial, √≠ndice num√©rico\nSequ√™ncial, √≠ndice num√©rico\nDireta por chave\nDireta por valor\n\n\nAltera√ß√µes\nSim\nN√£o\nSim\nSim\n\n\nUso prim√°rio\nSequ√™ncias de valores n√£o necessariamente ordenados\nSequ√™ncias de valores constantes n√£o necessariamente ordenados\nDados indexados por chave\nVerifica√ß√£o de unicidade, opera√ß√µes com conjuntos"
  },
  {
    "objectID": "index.html#input-de-dados",
    "href": "index.html#input-de-dados",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Input de dados",
    "text": "Input de dados\n\nAs vezes precisamos interagir com a execu√ß√£o de um c√≥digo, seja para obter dados ou fornecer algum tipo de informa√ß√£o. Na maioria dos casos, essas informa√ß√µes vem do teclado. Poder√≠amos ter informa√ß√µes de outra fonte, como, por exemplo, um sensor para captar humidade do ar, um leitor de impress√µes digitais, uma c√¢mera associada √† algum algoritmo que forne√ßa algum tipo de informa√ß√£o atrav√©s da leitura de imagens, etc.\n\nPara cada um desses casos, voc√™ quando dominar a linguagem Python, saber√° ir atr√°s de bibliotecas espec√≠ficas que permitam o uso de entradas mais espec√≠ficas."
  },
  {
    "objectID": "index.html#input-de-dados-1",
    "href": "index.html#input-de-dados-1",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Input de dados",
    "text": "Input de dados\n\nComo mencionado, na maioria dos casos, o input vem do teclado ‚å®Ô∏è. Para este prop√≥sito, Python fornece a fun√ß√£o input(), que possui um par√¢metro opcional, que √© a string que ser√° enviada para o usu√°rio.\n\n\nn = input(\"Insira um n√∫mero: \")\nprint(n)\n\nAo executarmos o c√≥digo acima, o prompt de comandos aguardar√° pela entrada de dados por parte de usu√°rio, uma vez informado o valor e enviado, ele ser√° impresso. Mas qual o tipo de dados que teremos em n?"
  },
  {
    "objectID": "index.html#input-de-dados-2",
    "href": "index.html#input-de-dados-2",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Input de dados",
    "text": "Input de dados\n\nVoc√™ j√° sabe obter a classe de um objeto em Python. Com o comando type(), n√£o √© isso?\n\nPortanto, voc√™ ir√° notar que a classe de n √© str, e assim ir√° concluir que o objeto n √© uma string.\n\nDica: Facilmente poderemos converter uma string para um valor num√©rico (int ou float), ou mesmo avaliar diretamente a string usando a fun√ß√£o eval(). Para converter, por exemplo, a string 1.7 para int fa√ßa int('1.7'). De forma an√°loga, para converter para float, fa√ßa float('1.7').\n\nExemplo: Inicialmente execute apenas a linha 3 e entre com os daddos no formato solicitado. Ap√≥s isso, execute o restante do c√≥digo.\n\n# Execute apenas a linha abaixo, entre com os dados e\n# s√≥ depois execute as demais linhas:\ndados = input(\"Informe seu nome, peso (em kg), altura (em m) no formato [nome, peso, altura]: \")\n\n# Execute as linhas de c√≥digo abaixo apenas depois de executar\n# a linha de c√≥digo com o input acima.\n# Avaliando a entrada de dados:\nlista = eval(dados)\n\n# Calculando o IMC (√çndice de Massa Corporal):\nimc = round(lista[1]/(lista[2]**lista[2]), 2)\n\n# Imprimindo o resultado:\nprint(f\"{lista[0]}, seu IMC √© {imc}\")"
  },
  {
    "objectID": "index.html#input-de-dados-3",
    "href": "index.html#input-de-dados-3",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Input de dados",
    "text": "Input de dados\n\nExemplo: Sei que voc√™ poder√° estar se perguntando o por qu√™ do c√≥digo anterior n√£o funcionar ao executarmos todo c√≥digo de uma √∫nica vez. Abaixo h√° uma solu√ß√£o. N√£o precisa entender todo ele. No momento ainda n√£o falei sobre estruturas de controle nem de repeti√ß√µes.\n\n# Para responder sua curiosidade, a fun√ß√£o input()\n# ir√° aguardar a entrada quando esta est√° associada\n# √† uma estrutura de repeti√ß√£o.\nwhile True:\n    dados = input(\"Informe seu nome, peso (em kg), altura (em m) no formato [nome, peso, altura]: \")\n    if dados.lower() == 'q':\n        print(\"Tchau!\")\n        break\n    # Execute as linhas de c√≥digo abaixo apenas depois de executar\n    # a linha de c√≥digo com o input acima.\n    # Avaliando a entrada de dados:\n    lista = eval(dados)\n\n    # Calculando o IMC (√çndice de Massa Corporal):\n    imc = round(lista[1]/(lista[2]**lista[2]), 2)\n\n    # Imprimindo o resultado:\n    print(f\"{lista[0]}, seu IMC √© {imc}\")]"
  },
  {
    "objectID": "index.html#if",
    "href": "index.html#if",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "if",
    "text": "if\n\nNem sempre todas as linhas dos programas ser√£o executadas. Muitas vezes, se≈ïa mais interessante decidir que partes do programa devem ser executadas com base no resultado de uma condi√ß√£o. A base dessas decis√µes consistir√° em express√µes l√≥gicas que permitam representar escolhas em programas.\n\nA condi√ß√£o if √© uma estrutura de controle de fluxo em Python que permite a execu√ß√£o de um bloco de c√≥digo somente se a condi√ß√£o especificada for verdadeira.\n\nif <condicao>:\n  c√≥digo executado\n  se a condicao for\n  verdadeira\n\nA nota√ß√£o < > n√£o faz parte da instru√ß√£o e s√≥ est√° a√≠ para destacar a necessidade de uma condi√ß√£o l√≥gica. Se essa condi√ß√£o for verdadeira, o bloco de instru√ß√µes ser√° executado."
  },
  {
    "objectID": "index.html#if-1",
    "href": "index.html#if-1",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "if",
    "text": "if\n\nExemplo: Instru√ß√£o if avaliando a condi√ß√£o num > 5. Perceba que o resultado de avalia√ß√£o de uma condi√ß√£o ser√° sempre um objeto do tipo bool, isto √©, ser√° um valor booleano, podendo ser True (bloco de instru√ß√µes do if ser√° executado) ou False (bloco de instru√ß√µes do if ser√° ignorado).\n\n\n# Objeto num antes do if:\nnum = 7\n\nprint(f\"--> Objeto num antes do if: {num}\")\n\nif num > 5:\n    num += 1\n\n# Objeto num depois do if:\nprint(f\"--> Objeto num depois do if: {num}\")\n\n--> Objeto num antes do if: 7\n--> Objeto num depois do if: 8"
  },
  {
    "objectID": "index.html#if-2",
    "href": "index.html#if-2",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "if",
    "text": "if\n\nExemplo: Corra um input de cada vez para depois poder correr o restante do c√≥digo. No exemplo do IMC implementei uma estrat√©gia simples para contornar o ‚Äúproblema‚Äù de rodar v√°rios inputs de uma √∫nica vez. Nesse exemplo, voc√™ entrar√° com os valores de a e b, respectivamente, e o programa ir√° decidir qual valor informado √© o vaior.\n\n# Execute os inputs, um de cada vez!\na = float(input(\"Primeiro valor: \"))\nb = float(input(\"Segundo valor: \"))\n\nif a > b:\n  print(\"O primeiro valor √© maior!\")\n\nif not a > b:\n  print(\"O segundo valor √© o maior!\")\n\nNote que no segundo if foi utilizado a nega√ß√£o not. Voc√™ poderia ter utilizado a condi√ß√£o b < a. Lemtre-se tamb√©m que as entradas do input() s√£o strings e devem ser covertidas para n√∫meros."
  },
  {
    "objectID": "index.html#if-3",
    "href": "index.html#if-3",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "if",
    "text": "if\n\nüì¢ ATEN√á√ÉO: Python √© uma linguagem que exige que o programador idente corretamente o seu c√≥digo. A identa√ß√£o √© um aspecto importante da sintaxe em Python, pois √© usada para definir blocos de c√≥digo. Em Python, os blocos de c√≥digo s√£o definidos pela indenta√ß√£o, que √© o espa√ßamento √† esquerda de uma linha de c√≥digo. O interpretador de Python ir√° indicar o erro como IndentationError.\n\n\nC√≥digo bem identadoC√≥digo mal identado\n\n\n# Execute os inputs, um de cada vez!\na = float(input(\"Primeiro valor: \"))\nb = float(input(\"Segundo valor: \"))\n\nif a > b:\n  print(\"O primeiro valor √© maior!\")\n\nif not a > b:\n  print(\"O segundo valor √© o maior!\")\n\n\n# Execute os inputs, um de cada vez!\na = float(input(\"Primeiro valor: \"))\nb = float(input(\"Segundo valor: \"))\n\nif a > b:\nprint(\"O primeiro valor √© maior!\")\n\nif not a > b:\nprint(\"O segundo valor √© o maior!\")"
  },
  {
    "objectID": "index.html#if-4",
    "href": "index.html#if-4",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "if",
    "text": "if\n\nEm outras linguagens de programa√ß√£o, como R e C, n√£o h√° a obriga√ß√£o do programador alinhar os blocos de instru√ß√µes de c√≥digo, muito embora √© uma pr√°tica recomentada pelas boas pr√°ticas de programa√ß√£o. Nessas linguagens usa-se a nota√ß√£o de chaves ({}) para delimitar os blocos de instru√ß√µes. Em Python, essa delimita√ß√£o se d√° por identa√ß√£o coerente. Usa-se 4 espa√ßos (n√£o tabula√ß√£o) para definir blocos de instrui√ß√µes em Python. Identar c√≥digo ajudar√° a entendermos melhor as hierarquias de c√≥digos, ajudando na manuten√ß√£o."
  },
  {
    "objectID": "index.html#exerc√≠cios",
    "href": "index.html#exerc√≠cios",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Exerc√≠cios üìö",
    "text": "Exerc√≠cios üìö\n \nExerc√≠cio: Escreva um programa que pergunte a velocidade do carro de um motorista. Caso ultrapasse 80 km/h, exiba uma mensagem dizendo que o usu√°rio foi multado. Nesse caso, exiba o valor da multa, cobranco R$ 5,00 por km/h acima de 80 km/h.\n\nExerc√≠cio: Escreva um progama que leia tr√™s n√∫meros. O programa dever√° retornar uma lista com os valores em ordem.\n\nExerc√≠cio: Escreva um programa que pergunte o sal√°rio do funcion√°rio e calcule o valor do aumento. Para sal√°rios superiores a \\(R\\$\\,1.250,00\\), calcule um aumento de \\(10\\%\\). Para sal√°rios inferiores ou iguais, o aumento ser√° de \\(15\\%\\)."
  },
  {
    "objectID": "index.html#else",
    "href": "index.html#else",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "else",
    "text": "else\n\nNo c√≥digo que segue, o que ocorre se x e y forem iguais?\n\n\n# Inicializando x e y com os mesmos valores:\nx = 7.6\ny = 7.6\n\nif x < y:\n  print(f\"{x} < {y}\")\nif x > y:\n  print(f\"{x} > {y}\")\n\n\nO c√≥digo ser√° executado, mas nenhum bloco de ambos os if‚Äôs ir√£o ser executados. Poder√≠amos querer tratar a condi√ß√£o que n√£o contempla as duas condi√ß√µes das instru√ß√µes if‚Äôs. Para isso, poder√≠amos utilizar a instur√ß√£o else."
  },
  {
    "objectID": "index.html#else-1",
    "href": "index.html#else-1",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "else",
    "text": "else\n\nPoder√≠amos ter resolvido a situa√ß√£o acima, para incluir todas as demais situa√ß√µes poss√≠veis que n√£o encontram-se contempladas nas duas condi√ß√µes das instru√ß√µes if‚Äôs, assim:\n\n\n# Inicializando x e y com os mesmos valores:\nx = 7.6\ny = 7.6\n\nif x < y:\n  print(f\"{x} < {y}\")\nif x > y:\n  print(f\"{x} > {y}\")\nelse:\n  print(f\"{x} == {y}\")\n\n7.6 == 7.6"
  },
  {
    "objectID": "index.html#else-2",
    "href": "index.html#else-2",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "else",
    "text": "else\n\nA instru√ß√£o else com o seu bloco de instru√ß√µes Python estar√° associada ao if mais pr√≥ximo. O bloco de instrui√ß√µes de comandos Python associados √† instru√ß√£o else ser√° executado em qualquer situa√ß√£o que n√£o for atendida a condi√ß√£o da instru√ß√£o if mais pr√≥xima. Portanto, se a condi√ß√£o do if mais pr√≥ximo for False, o bloco de instrui√ß√µes do else hierarquicamente mais pr√≥ximo ao if em quest√£o ser√° executado.\n\nAl√©m disso, voc√™ poder√° ter if‚Äôs e else‚Äôs aninhados, a depender de sua necessidade. Veja no exemplo que segue.\n\nExemplo: O programa abaixo calcula a conta de telefone com tr√™s faixas de pre√ßos:\n\n\n\n# Valor dos minutos utilizados:\nminutos = 201\n\n# Programa: conta de telefone por tr√™s faixas de pre√ßos\nif minutos < 200:\n  preco = 0.20\nelse:\n  if minutos < 400:\n    preco = 0.18\n  else:\n    preco = 0.15\nprint(f\"Sua conta: R$ {minutos * preco:.<6.2f}\")\n\n\nSua conta: R$ 36.18."
  },
  {
    "objectID": "index.html#elif",
    "href": "index.html#elif",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "elif",
    "text": "elif\n\nExerc√≠cio: Considere o c√≥digo que segue. Explique o que ele faz!\n\n\nx = 25\ny = 15\n\nif x < y:\n    print(\"x √© menor que y\")\nelse:\n    if x > y and x % 2 == 0:\n        print(\"x √© maior que y e √© um n√∫mero par\")\n    else:\n        if x > y or x % 2 != 0:\n            print(\"x √© maior que y ou √© um n√∫mero √≠mpar\")\n        else:\n            print(\"x √© igual a y\")\n\nx √© maior que y ou √© um n√∫mero √≠mpar\n\n\n\nUma forma mais conveniente para escrever instru√ß√µes else-if √© utilizar a instru√ß√£o elif."
  },
  {
    "objectID": "index.html#elif-1",
    "href": "index.html#elif-1",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "elif",
    "text": "elif\n\nExemplo: Compare o c√≥digo anterior, que utiliza as instru√ß√µes else-if com o c√≥digo que utiliza a instru√ß√£o elif.\n\n\nUsando else-ifUsando elif\n\n\n\nx = 25\ny = 15\n\nif x < y:\n    print(\"x √© menor que y\")\nelse:\n    if x > y and x % 2 == 0:\n        print(\"x √© maior que y e √© um n√∫mero par\")\n    else:\n        if x > y or x % 2 != 0:\n            print(\"x √© maior que y e √© um n√∫mero √≠mpar\")\n        else:\n            print(\"x √© igual a y\")\n\nx √© maior que y e √© um n√∫mero √≠mpar\n\n\n\n\n\nx = 25\ny = 15\n\nif x < y:\n    print(\"x √© menor que y\")\nelif x > y and x % 2 == 0:\n    print(\"x √© maior que y e √© um n√∫mero par\")\nelif x > y or x % 2 != 0:\n    print(\"x √© maior que y e √© um n√∫mero √≠mpar\")\nelse:\n    print(\"x √© igual a y\")\n\nx √© maior que y e √© um n√∫mero √≠mpar"
  },
  {
    "objectID": "index.html#elif-2",
    "href": "index.html#elif-2",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "elif",
    "text": "elif\n \nA vantagem de usar elif em vez de if e else √© que ele permite testar v√°rias condi√ß√µes de uma s√≥ vez, sem a necessidade de aninhar v√°rios if e else uns dentro dos outros. Isso faz com que o c√≥digo fique mais limpo, f√°cil de ler e manter.\n\nAl√©m disso, o uso de elif tamb√©m economiza tempo de processamento, pois assim que uma condi√ß√£o √© verdadeira, o programa para de verificar as outras condi√ß√µes e executa o c√≥digo correspondente. Se fosse usado somente ‚Äúif‚Äù e ‚Äúelse‚Äù, todas as condi√ß√µes precisariam ser verificadas, mesmo que uma j√° tenha sido verdadeira."
  },
  {
    "objectID": "index.html#exerc√≠cios-1",
    "href": "index.html#exerc√≠cios-1",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Exerc√≠cios üìö",
    "text": "Exerc√≠cios üìö\n\nExerc√≠cio: Escreva um programa que leia dois n√∫meros e que pergunte qual opera√ß√£o voc√™ deseja realizar. Voc√™ deve poder calcular soma (+), subtra√ß√£o (-), multiplica√ß√£o (*) e divis√£o (/). Informe qual a opera√ß√£o foi escolhida e exiba o resultado da opera√ß√£o solicitada.\n\nExerc√≠cio: Crie um programa em Python que pergunte ao usu√°rio qual √© a sua idade e, com base nisso, informe se o usu√°rio √© considerado crian√ßa, adolescente ou adulto. Utilize as seguintes faixas et√°rias:\n\n\nCrian√ßa: at√© 12 anos\nAdolescente: de 13 a 17 anos\nAdulto: 18 anos ou mais\n\n\nExerc√≠cio: Crie um programa em Python que, dada uma string, informe se ela √© um pal√≠ndromo ou n√£o. Um pal√≠ndromo √© uma palavra ou frase que √© lida da mesma forma da esquerda para a direita e da direita para a esquerda. Dica: Se s √© uma string, lista ou tupla, ent√£o voc√™ poder√° reverter utilizando passando o valor -1 como o terceiro √≠ndixe de indexa√ß√£o, ou seja, s[::-1] ir√° fornecer a a mesma estrutura, com os elementos em ordem reversa."
  },
  {
    "objectID": "index.html#exerc√≠cios-2",
    "href": "index.html#exerc√≠cios-2",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Exerc√≠cios üìö",
    "text": "Exerc√≠cios üìö\n\nExerc√≠cio: Escreva um progama para aprovar o empr√©stimo banc√°rio para compra de uma casa. O programa deve perguntar o valor da casa a comprar, o sal√°rio e a quantidade de anos a pagar. O valor da presta√ß√£o mensal n√£o pode ser superior a \\(30\\%\\) do sal√°rio. Calcule o valor da presta√ß√£o como sendo o valor da casa a comprar dividido pelo n√∫mero de meses a pagar.\n\n\n\nExerc√≠cio: Escreva um programa que calcule o pre√ßo a pagar pelo fornecimento de energia el√©trica. Pergunte a quantidade de kWh consumida e o tipo de instala√ß√£o: R (residencias), I (ind√∫strias) e C (com√©rcios). Calcule o pre√ßo a pagar de acordo a Tabela ao lado.\n\n\n\n\nTipo\nFaixa (kWh)\nPre√ßo\n\n\n\n\nResidencial\nAt√© 500\n\\(R\\$\\, 0,40\\)\n\n\n\nAcima de 500\n\\(R\\$\\, 0,65\\)\n\n\nComercial\nAt√© 1000\n\\(R\\$\\, 0,55\\)\n\n\n\nAcima de 1000\n\\(R\\$\\, 0,60\\)\n\n\nIndustrial\nAt√© 5000\n\\(R\\$\\, 0,55\\)\n\n\n\nAcima de 5000\n\\(R\\$\\, 0,60\\)"
  },
  {
    "objectID": "index.html#exerc√≠cios-3",
    "href": "index.html#exerc√≠cios-3",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Exerc√≠cios üìö",
    "text": "Exerc√≠cios üìö\n \n\n\nExerc√≠cio:Leia os Cap√≠tulo 1 e 2 do livro Pense em Python."
  },
  {
    "objectID": "index.html#exerc√≠cios-4",
    "href": "index.html#exerc√≠cios-4",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Exerc√≠cios üìö",
    "text": "Exerc√≠cios üìö\n \nExerc√≠cio: Crie um programa que pergunte a sigla de um pa√≠s ao usu√°rio e de acordo com a sigla, seja informada a capital do pa√≠s. Considere o dicion√°rio abaixo. Permita que o programa trate situa√ß√µes em que o usu√°rio possa informar as siglas em ma√∫scula ou min√∫scula. Dica: use a fun√ß√£o in para buscar se um elemento encontra-se dentro da estrutura de dados.\n\npaises = {\n  'br': 'Bras√≠lia',\n  'fr': 'Paris',\n  'cl': 'Santiago',\n  'us': 'Washington'\n}"
  },
  {
    "objectID": "index.html#loops",
    "href": "index.html#loops",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Loops",
    "text": "Loops\n\nAs estruturas de repeti√ß√£o s√£o fundamentais em qualquer linguagem de programa√ß√£o, e Python n√£o √© exce√ß√£o. Elas permitem que um trecho de c√≥digo seja executado v√°rias vezes, dependendo de uma condi√ß√£o espec√≠fica. Isso √© √∫til em muitas situa√ß√µes, como percorrer uma lista de elementos, processar dados em um arquivo ou realizar c√°lculos matem√°ticos.\n\nRepeti√ß√µes representam a base de v√°rios programas. S√£o utilizadas para executar a mesma parte de um programa v√°rias vezes, normalmente dependendo de uma condi√ß√£o ou de um crit√©rio de parada.\n\nUma das instru√ß√µes de repeti√ß√£o amplamente utilizada √© a instru√ß√£o while. Ela √© composta de seguinte forma:\n\nwhile <condi√ß√£o>:\n  bloco com\n  instru√ß√µes Python"
  },
  {
    "objectID": "index.html#loops-1",
    "href": "index.html#loops-1",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Loops",
    "text": "Loops\n\nA coindi√ß√£o do la√ßo while n√£o utiliza a nota√ß√£o ‚Äú< >‚Äù. O uso de ‚Äú< >‚Äù √© apenas para destacar a necessidade de haver uma condi√ß√£o. Enquanto a condi√ß√£o for cerdadeira, as instru√ß√µes do la√ßo/loop while ser√£o executadas.\n\nExemplo: A condi√ß√£o ao ser avaliada devolver√° um valor da classe bool, isto √©, um True (condi√ß√£o verdadeira) ou False (condi√ß√£o falsa). Portanto, poder√≠amos criar um loop infinito colocando a condi√ß√£o como True.\n\n# A instru√ß√£o print dentro do la√ßo while\n# ser√° sempre executada, uma vez que a\n# condi√ß√£o √© sempre verdadeira.\nwhile True:\n  print(\"Eu serei executado sempre!\")\n\nCuidado com os loops infinitos! Eles s√£o √∫teis nas simula√ß√µes estat√≠sticas, mas deve haver em seu interior algum teste de condi√ß√£o que force a parada do la√ßo. Veremos isso em breve."
  },
  {
    "objectID": "index.html#loops-2",
    "href": "index.html#loops-2",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Loops",
    "text": "Loops\n\nNo loop while, normalmente a condi√ß√£o envolve uma vari√°vel de controle, em que devemos nos preocupar atualiz√°-la no interior do la√ßo para que em alguma itera√ß√£o a condi√ß√£o do loop se torne falsa. Note, no c√≥digo abaixo, que x √© incrimentada, e isso garante que em algum momento a condi√ß√£o x <= 3 se tornar√° falsa.\n\n\nx = 1\nwhile x <= 3:\n  print(x)\n  x += 1\n\n1\n2\n3"
  },
  {
    "objectID": "index.html#loops-3",
    "href": "index.html#loops-3",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Loops",
    "text": "Loops\n\nNo c√≥digo abaixo, s√£o gerados valores pseudo-aleat√≥rios no intervalo fechado \\([0, 10]\\), em que os valores pares s√£o armazenados no objeto lista_pares e todos os valores (par ou n√£o) s√£o acumulados no objeto acumulado. O la√ßo para, quando a condi√ß√£o acumulado <= 100 n√£o for mais atendia.\n\n\n# Biblioteca com m√©todos para gera√ß√£o de n√∫meros\n# pseudo-aleat√≥rios.\nimport random\n\n# Fixando uma semente que garante que os\n# n√∫meros gerados aleatoriamente ser√£o\n# sempre os mesmos ao executarmos todo\n# o c√≥digo que segue.\nrandom.seed(0)\nlista_pares = []\nacumulado = 0\n\nwhile acumulado <= 100:\n    valor = random.randint(0, 10)\n    if(valor % 2 == 0):\n        lista_pares.append(valor)\n    acumulado +=  valor\n\nprint(f\"Valor acumulado: {acumulado}\")\nprint(f\"Lista com os pares: {lista_pares}\")\n\nValor acumulado: 103\nLista com os pares: [6, 6, 0, 4, 8, 6, 4, 8, 2, 4, 2, 4, 8]"
  },
  {
    "objectID": "index.html#loops-4",
    "href": "index.html#loops-4",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Loops",
    "text": "Loops\n\nEm muitas vezes √© √∫til utilizar o la√ßo while quando n√£o sabemos o n√∫mero de itera√ß√µes que ser√° realizado. Pense em um problema em que a vari√°vel de controle na condi√ß√£o do while √© aleat√≥ria. Veja o caso abaixo:\n\n\nimport random\n\nrandom.seed(0)\n\ni = 0\nlista = list()\nwhile i <= 5:\n  i = random.randint(0, 10)\n  lista.append(i)\n\nprint(f\"lista = {lista}\")\n\nlista = [6]\n\n\nSimplesmente olando para o c√≥digo acima, n√£o seria poss√≠vel dizer quais os valores em a quantidade de elementos em lista. Isso porqu√™ a vari√°vel de controle i √© obtida de forma pseudo-aleat√≥ria."
  },
  {
    "objectID": "index.html#loops-5",
    "href": "index.html#loops-5",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Loops",
    "text": "Loops\n\nA instr√ß√£o de loop for √© √∫til quando o conjunto que iremos iterar est√° bem definido, isto √©, conhecemos o conjunto e a quantidade de elementos.\n\nNesse sentido, a estrutura de repeti√ß√£o for torna-se adequada para iterarmos em uma estrutura de dados, como uma lista, tupla, conjunto ou dicion√°rio.\n\nfor i in <conjunto>:\n  instru√ß√µes associadas\n  ao bloco de instru√ß√µes\n  for\n\nNa forma geral acima, <conjunto> √© alguma estrutura de dados de Python e n√£o necessariamente objetos da classe set. √â tudo aquilo que voc√™ deseja percorrer, normalmente uma lista, tupla, dicion√°rio, conjunto, arrays de Numpy, Data Frame de Pandas, ou toda e qualquer outra estrutura de dados."
  },
  {
    "objectID": "index.html#loops-6",
    "href": "index.html#loops-6",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Loops",
    "text": "Loops\n\nOnde voc√™ consegue utilizar a instru√ß√£o for voc√™ tamb√©m conseguir√° utilizar a instur√ß√£o while, uma vez que tudo que voc√™ poder√° fazer utilizando um for tamb√©m poder√° ser feito com um while. Por√©m, o uso do for √© mais adequado quando conhecemos a estrutura de queremos iterar, uma vez que n√£o precisamos nos preocupara o comprimento dela.\n\nExemplo: No exemplo que segue, o c√≥digo toma a raiz quadrada dos elementos da lista x e acumula o seu valor. Compare o uso das instru√ß√µes for e do whilhe resolvendo o mesmo problema.\n\n\nUtilizando forUtilizando while\n\n\n\nimport random\nimport math\n\nx = [1.2, 4.3, 0.22, 4.3, 5.52, 3.63, 1.01, 2.2]\n\nacumulado = 0\nfor i in x:\n   acumulado += math.sqrt(i)\n\nprint(f\"Sqrt(acumulado) = {round(acumulado, 2)}\")\n\nSqrt(acumulado) = 12.45\n\n\n\n\n\nimport random\nimport math\n\nx = [1.2, 4.3, 0.22, 4.3, 5.52, 3.63, 1.01, 2.2]\nn = len(x) # Comprimento da estrutura de dados x\nacumulado = 0\ni = 0 # Vari√°vel de controle do la√ßo while\nwhile i < n:\n   acumulado += math.sqrt(x[i])\n   i += 1\n\nprint(f\"Sqrt(acumulado) = {round(acumulado, 2)}\")\n\nSqrt(acumulado) = 12.45"
  },
  {
    "objectID": "index.html#loops-7",
    "href": "index.html#loops-7",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Loops",
    "text": "Loops\n\nPodemos utiliza a fun√ß√£o range para gerar listas simples. A fun√ß√£o range n√£o retorna um objeto da classe list proprieamente dito. A fun√ß√£o range ir√° retornar um gerador.\n\nIremos falar mais a frente como construir nossos geradores, que s√£o objetos que permitem percorrer os itens de uma cole√ß√£o (como uma lista ou string) de forma sequencial, por√©m, sem armazenar toda a sequ√™ncia na mem√≥ria.\n\n\nfor i in range(5):\n  print(f\"i = {i}\")\n\ni = 0\ni = 1\ni = 2\ni = 3\ni = 4"
  },
  {
    "objectID": "index.html#loops-8",
    "href": "index.html#loops-8",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Loops",
    "text": "Loops\n\nExemplo: Voc√™ tamb√©m poder√° utilizar mais vari√°veis para poder iterar, a depender da dimens√£o de cada elemento do objeto que deseja percorrer. Note que no exemplo abaixo, cada elemento de obj_1 √© uma tupla com tr√™s elementos e cada elemento de obj_2 √© uma lista com cada elemento sendo uma outra lista com tr√™s elementos. Voc√™ poderia criar obj_3 de forma an√°loga sendo uma tupla de tuplas com tr√™s elementos.\n\n\n# Uma lista de tuplas:\nobj_1 = [(\"S√£o Paulo\", \"S√£o Paulo\", \"Sudeste\"), (\"Rio de Janeiro\", \"Rio de Janeiro\", \"Sudeste\"), (\"Belo Horizonte\", \"Minas Gerais\", \"Sudeste\")]\n\n# Uma lista de listas:\nobj_2 = [[\"S√£o Paulo\", \"S√£o Paulo\", \"Sudeste\"], [\"Rio de Janeiro\", \"Rio de Janeiro\", \"Sudeste\"], [\"Belo Horizonte\", \"Minas Gerais\", \"Sudeste\"]]\n\nfor x, y, z in obj_1:\n    print(\"Cidade:\", x, \"| Estado:\", y, \"| Regi√£o:\", z)\n\nCidade: S√£o Paulo | Estado: S√£o Paulo | Regi√£o: Sudeste\nCidade: Rio de Janeiro | Estado: Rio de Janeiro | Regi√£o: Sudeste\nCidade: Belo Horizonte | Estado: Minas Gerais | Regi√£o: Sudeste\n\nfor x, y, z in obj_2:\n    print(\"Cidade:\", x, \"| Estado:\", y, \"| Regi√£o:\", z)\n\nCidade: S√£o Paulo | Estado: S√£o Paulo | Regi√£o: Sudeste\nCidade: Rio de Janeiro | Estado: Rio de Janeiro | Regi√£o: Sudeste\nCidade: Belo Horizonte | Estado: Minas Gerais | Regi√£o: Sudeste"
  },
  {
    "objectID": "index.html#range-e-enumerate",
    "href": "index.html#range-e-enumerate",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "range e enumerate",
    "text": "range e enumerate\n\nVoc√™ poder√° transformar um range em uma lista ou tupla, envolvendo range por list ou tuple, respectivamente. Se n√£o for especificado um valor m√≠nimo, o gerador come√ßar√° em 0.\n\n\n\nr1 = range(5)\nr2 = range(2, 5)\n\nfor i in r1:\n  print(f\"{i}\")\n\nprint(\"\\n\")\n\nfor i in r2:\n  print(f\"{i}\")\n\n\n0\n1\n2\n3\n4\n\n\n2\n3\n4\n\n\n\n\nNote que a o √∫ltimo elemento n√£o √© incluindo, do mesmo modo quando utilizamos fatiamento de listas e tuplas, e queremos acessar um subconjunto."
  },
  {
    "objectID": "index.html#range-e-enumerate-1",
    "href": "index.html#range-e-enumerate-1",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "range e enumerate",
    "text": "range e enumerate\n\nA fun√ß√£o range() adimite tr√™s argumentos, o primeiro e o segundo dizem respeito ao in√≠cio e fim da sequ√™ncia (fim n√£o incluso) e o terceiro refere-se ao passo da sequ√™ncia. Estude o c√≥digo que segue. A fun√ß√£o itre() constroi um iterador que √© uma sequ√™ncia de valores, acessadas uma de cada vez, com a fun√ß√£o next() ou com o m√©todo __next__()\n\n\n# Criando uma gerador de sequ√™ncia de valores convertendo-o\n# para um iterador com a instru√ß√£o iter():\nx = iter(range(0, 20, 2))\n\n# Verificando o comprimento do iterador x:\nn = x.__length_hint__()\n\n# Obtendo o primeiro elemento do iterador x:\np1 = x.__next__() # ou next(x)\n\n# Obtendo o segundo elemento do iterador x:\np2 = x.__next__() # ou next(x)\n\nprint(f\"p1 = {p1}\")\nprint(f\"p2 = {p2}\")\n\np1 = 0\np2 = 2\n\n\n\nNote que a cada chamada de __next()__, damos um passo no iterador, isto √©, acessamos o pr√≥ximo elemento."
  },
  {
    "objectID": "index.html#range-e-enumerate-2",
    "href": "index.html#range-e-enumerate-2",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "range e enumerate",
    "text": "range e enumerate\n\nCom a fun√ß√£o enumarate, poderemos ampliar as funcionalidades do loop for de forma f√°cil. Muitas vezes desejamos acessar o elemento de uma sequ√™ncia e sua posi√ß√£o.\n\nNormalmente √© utilizada para iterar sobre uma lista e adicionar um √≠ndice num√©rico a cada item. Ela √© muito √∫til quando precisamos acessar tanto o item da lista quanto o seu √≠ndice, pois evita que seja necess√°rio criar uma contagem manual.\n\n\nfrutas = [\"uva\", \"ma√ß√£\", \"lim√£o\", \"uva\", \"banana\", \"morango\"]\n\nfor i, v in enumerate(frutas):\n  print(f\"{i} = {v}\")\n\n0 = uva\n1 = ma√ß√£\n2 = lim√£o\n3 = uva\n4 = banana\n5 = morango"
  },
  {
    "objectID": "index.html#range-e-enumerate-3",
    "href": "index.html#range-e-enumerate-3",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "range e enumerate",
    "text": "range e enumerate\n \nA fun√ß√£o range() cria uma sequ√™ncia de valores inteiros. A partir de m√©todos da biblioteca Numpy, que ser√£o apresentados mais adiante no curso, saberemos criar uma sequ√™ncia de valores reais. Os m√©todos da biblioteca Numpy s√£o computacionalmente eficientes, mas nada impede que voc√™ crie um c√≥digo para retornar uma lista de valores do tipo float. Bastaria utilizar uma estrutura de repeti√ß√£o.\n\nAlgumas observa√ß√µes a respeito do c√≥digo anterior. A fun√ß√£o enumerate() retorna um objeto enumerado a partir do valor 0 (zero). Caso tenha interesse em come√ßar a enumera√ß√£o por outro valor, passe o valor iniciar como segundo argumento da fun√ß√£o, isto √©, passe o valor de inc√≠cio ao argumento start da fun√ß√£o enumerate().\n\nCom o m√©todo enumerate() conseguiremos enumear listas, tuplas, dicion√°rios e conjuntos."
  },
  {
    "objectID": "index.html#range-e-enumerate-4",
    "href": "index.html#range-e-enumerate-4",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "range e enumerate",
    "text": "range e enumerate\n\nExemplo: Percorrendo uma lista, tupla, dicion√°rio e conjuntos em Python. Note que no loop for duas vari√°veis, a e b foram utilizadas, assim como no exemplo anterior. Isso se deve ao fato de que a fun√ß√£o enumerate retorna um objeto enumer√°vel com duas informa√ß√µes. Veja, por exemplo, que o retorno de list(enumerate(x)) √© uma lista de tuplas com dois elementos.\n\nx = [[1, 2, 3], [4, 5, 6]]\ny = ((1, 2, 3), (4, 5, 6))\nz = {1, 2, 3, 4, 5, 6}\nw = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}\n\n# Enumerando x:\nfor a, b in enumerate(x):\n   print(f\"{a}: {b}\")\n\n# Enumerando y:\nfor a, b in enumerate(y):\n   print(f\"{a}: {b}\")\n\n# Enumerando z:\nfor a, b in enumerate(z):\n   print(f\"{a}: {b}\")\n\n# Enumerando w:\nfor a, b in enumerate(w):\n   print(f\"{a}: {b}\")\n\n# Convertendo um enumerate para uma lista:\nprint(list(enumerate(x)))"
  },
  {
    "objectID": "index.html#zip",
    "href": "index.html#zip",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "zip",
    "text": "zip\n\nA fun√ß√£o zip em Python √© utilizada para juntar elementos de diferentes sequ√™ncias (como listas, tuplas ou strings) em pares. Ela retorna um objeto iter√°vel, chamado de ‚Äúzip object‚Äù, que pode ser convertido em uma lista, tupla ou dicion√°rio.\n\n\nlista1 = [1, 2, 3]\nlista2 = [4, 5, 6, 7]\nzip_obj = zip(lista1, lista2)\nresultado = list(zip_obj)\nprint(resultado)\n\n[(1, 4), (2, 5), (3, 6)]"
  },
  {
    "objectID": "index.html#zip-1",
    "href": "index.html#zip-1",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "zip",
    "text": "zip\n\nNo exemplo anterior, note que as tuplas foram formadas at√© a quantidade de elementos da lista menor. Se voc√™ desejar completar os elementos faltantes das listas de dimens√µes menores com um valor padr√£o, a fun√ß√£o zip_longest pode ser uma solu√ß√£o, bastando informar o valor faltante ao argumento fillvalue. Ela funciona de forma semelhante a fun√ß√£o zip padr√£o, por√©m, permite acrescentar um valor padr√£o para completar as sequ√™ncias incompletas.\n\n\nfrom itertools  import zip_longest\n\nlista1 = [1, 2, 3]\nlista2 = [4, 5, 6, 7]\n# Preenchendo com 0 os elementos de lista1:\nzip_obj = zip_longest(lista1, lista2, fillvalue = 0)\nresultado = list(zip_obj)\nprint(resultado)\n\n[(1, 4), (2, 5), (3, 6), (0, 7)]"
  },
  {
    "objectID": "index.html#desempacotamento",
    "href": "index.html#desempacotamento",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Desempacotamento",
    "text": "Desempacotamento\n\nO desempacotamento, tamb√©m conhecido como unpacking em ingl√™s, √© uma t√©cnica utilizada em Python para atribuir os elementos de uma cole√ß√£o, como listas, tuplas, conjuntos e dicion√°rios, a vari√°veis individuais. Isso pode ser muito √∫til quando precisamos trabalhar com dados estruturados e queremos acessar os elementos de forma mais f√°cil e organizada. Estude o c√≥digo abaixo. Note que * √© utilizado para indicar que a vari√°vel ao lado ir√° receber os elementos extras.\n\n\nnomes = [\"Emanuelle\", \"Waleska\", \"Almeida\", \"Farias\"]\n\n# Desempacotando os elementos de \"nomes\" e atribuindo\n# √†s vari√°veis nome1 √† nome4:\nnome1, nome2, nome3, nome4 = nomes\n\n# Poder√≠amos estar interessados em fazer\n# uma atribui√ß√£o parcial. Os objetos\n# \"a\" e \"b\" ir√£o receber o primeiro\n# e os demais elementos, respectivamente:\na, *b = nomes\n\nprint(f\"a = {a} e b = {b}\")\n\na = Emanuelle e b = ['Waleska', 'Almeida', 'Farias']"
  },
  {
    "objectID": "index.html#desempacotamento-1",
    "href": "index.html#desempacotamento-1",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Desempacotamento",
    "text": "Desempacotamento\n\nA t√©cnica de desempacotamento tamb√©m poder√° ser utilizada em dicion√°rios para desempacotar chaves e valores. Por exemplo:\n\n\n# Dicion√°rio com nomes de pessoas\n# e suas respectivas idades:\npessoas = {'Maria': 20, 'Jo√£o': 10, 'Laura': 25}\n\nnome, *demais_nomes = pessoas.keys()\nidade, *demais_idades = pessoas.values()\n\nprint(f'Meu nome √© {nome} e tenho {idade} anos!')\n\nMeu nome √© Maria e tenho 20 anos!"
  },
  {
    "objectID": "index.html#loops-aninhados",
    "href": "index.html#loops-aninhados",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Loops aninhados",
    "text": "Loops aninhados\n\nSe a l√≥gica do problema que voc√™ precisa resolver exigir, voc√™ poder√° aninhar loops, assim como poder√° aninhar estruturas de condi√ß√µes como if e else abordadas anteriormente.\n\nExemplo: Tabuada de 1 a 10 utilizando duas estrutudas de repeti√ß√£o for aninhadas. Voc√™ poderia resolver o mesmo problema utilizando while. Por√©m, escolher o loop for √© conveninente, uma vez que sabemos exatamente sobre quais conjuntos deveremos iterar. Com o for n√£o preicisamos, nesse caso, nos preocuparmos com incremento de vari√°veis.\n\n\nUtilizando forUtilizando while\n\n\nfor i in range(1, 11):\n\n   print(f\"{15*'-'}\")\n\n   for j in range(1, 11):\n        result = i * j\n        print(f\"{i} x {j} = {result}\")\n\n\ni = 1\nwhile i < 11:\n    print(f\"{15*'-'}\")\n    j = 1\n    while j < 11:\n        result = i * j\n        print(f\"{i} x {j} = {result}\")\n        j += 1\n    i += 1"
  },
  {
    "objectID": "index.html#break-e-continue",
    "href": "index.html#break-e-continue",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "break e continue",
    "text": "break e continue\n\nAs instru√ß√µes break e continue s√£o utilizadas para controlar o fluxo de execu√ß√£o de loops, for e while, em Python. A primeira (break), √© √∫til quando desejamos interromper toda a execu√ß√£o do loop, antes mesmo do final da condi√ß√£o do loop while ser atendida ou antes do loop for iterar sobre um objeto iter√°vel. J√° a segunda (continue) √© √∫til quando desejamos saltar uma determinada itera√ß√£o, tamb√©m podendo ser aplicada tanto na instru√ß√£o for quando while.\n\nSeja break ou continue, ambas necessitam estar associadas a uma instru√ß√£o condicional, isto √©, associados √† um if ou else no interior do la√ßo que ser√° interrompido pelo uso do break ou cuja a itera√ß√£o ser√° saltada para pr√≥xima itera√ß√£o com o uso do continue."
  },
  {
    "objectID": "index.html#break-e-continue-1",
    "href": "index.html#break-e-continue-1",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "break e continue",
    "text": "break e continue\n\nExemplo: O c√≥digo a seguir gera um n√∫mero aleat√≥rio entre 1 e 10 e armazena-o na vari√°vel magic_number. O jogador ent√£o tenta adivinhar o n√∫mero m√°gico usando o comando input. Se o jogador acertar o n√∫mero m√°gico, o loop √© interrompido usando o comando break e o jogo termina. Caso contr√°rio, o jogador √© instru√≠do a tentar novamente.\n\n# M√≥dulo Python para gera√ß√£o de n√∫meros\n# pseudo-aleat√≥rios:\nimport random\n\n# Fixando uma semente:\nrandom.seed(0)\n\n# Gerando uma observa√ß√£o inteira no\n# intervalo fechado [1, 10]:\nmagic_number = random.randint(1, 10)\n\nwhile True:\n    guess = int(input(\"Adivinhe o n√∫mero m√°gico entre 1 e 10: \"))\n    if guess == magic_number:\n        print(\"Acertou!\")\n        break\n    else:\n        print(\"Tente novamente.\")"
  },
  {
    "objectID": "index.html#break-e-continue-2",
    "href": "index.html#break-e-continue-2",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "break e continue",
    "text": "break e continue\n\nExemplo: O c√≥digo identifica se um n√∫mero inteiro maior que 2 √© um n√∫mero primo. Ser√° considerado primo, todo n√∫mero inteiro maior que 1 que √© divis√≠vel apenas por 1 ou por ele mesmo. O la√ßo while apenas ir√° terminar, caso o n√∫mero informado n√£o seja primo. Note que no segundo loop (la√ßo for), j ir√° variar de 2 √† num - 1.\n\nwhile True:\n\n    num = int(input(\"Insira um n√∫mero inteiro: \"))\n\n    if type(num) != int or num < 2:\n        print(\"Por favor, insira um n√∫mero inteiro maior que 2\")\n        continue\n\n    for j in range(2, num):\n        if num % j == 0:\n            print(\"N√£o √© primo. La√ßo interrompido.\")\n            break\n    else:\n        print(\"√â primo. Continuando o la√ßo...\")\n        continue\n    break"
  },
  {
    "objectID": "index.html#biblioteca-turtle",
    "href": "index.html#biblioteca-turtle",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Biblioteca turtle üê¢",
    "text": "Biblioteca turtle üê¢\n\nO Turtle (‚ÄúTartaruga‚Äù em ingl√™s) √© um m√≥dulo do Python para desenhar utilizando a l√≥gica de programa√ß√£o. √â uma extens√£o da linguagem de programa√ß√£o chamada Logo, a qual foi criada em 1967.\n\nA ideia principal do Turtle √© que temos uma Tartaruga em um canvas (tela para desenho), onde utilizamos comandos estruturados em uma determinada l√≥gica para criarmos o nosso desenho.\n\nA ideia principal √© praticar l√≥gica de programa√ß√£o desenhando."
  },
  {
    "objectID": "index.html#biblioteca-turtle-1",
    "href": "index.html#biblioteca-turtle-1",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Biblioteca turtle üê¢",
    "text": "Biblioteca turtle üê¢\n\nAbrindo uma janela para desenhar usando instru√ß√µes de turtle:\n\n\nC√≥digoV√≠deo\n\n\n# Importando o m√≥dulo:\nimport turtle\n\n# Utilizando a fun√ß√£o Turtle() do m√≥dulo turtle:\ntartaruga = turtle.Turtle()\n\n# Escolhendo o formato do cursor. Poderia ser:\n# \"turtle\", \"arrow\", \"blank\", \"circle\", \"square\" e\n# \"triangle\":\ntartaruga.shape(\"turtle\")\n\ntartaruga.color(\"blue\") # Colocando uma cor na tartaruga.\n\nturtle.exitonclick() # Permite fechar a janela clicando.\nturtle.bye() # Finaliza a inst√¢ncia do objeto tartaruga.\n\n\nVideo"
  },
  {
    "objectID": "index.html#biblioteca-turtle-2",
    "href": "index.html#biblioteca-turtle-2",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Biblioteca turtle üê¢",
    "text": "Biblioteca turtle üê¢\n\nVoc√™ poder√° alterar a cor e movimentar a tartaruga para frente ou para tr√°s, com base para onde a tartaruga est√° ‚Äúolhando‚Äù utilizando os m√©todos color(), forward() e back(), respectivamente. Comandos como right() e left() movimenta o cursor uma quantidade de graus para direta e esquerda, respectivamente. Alguns outros detalhes no c√≥digo que segue. Leia sempre os coment√°rios! Voc√™ poder√° obter cores em diversas ferramentas na internet. Por exemplo, clique AQUI.\n\n\nC√≥digoV√≠deo\n\n\nimport turtle\n\ntartaruga = turtle.Turtle()\ntartaruga.shape(\"turtle\")\n\n# Aumentando a largura da caneta:\ntartaruga.pensize(6)\n\n# Desenhando um c√≠ruclo de raio 150 pixels:\ntartaruga.circle(150)\n\n# Alterando a cor da caneta\n# Informando a cor em nota√ß√£o hexadecial\n# Sistema RGB:\ntartaruga.color(\"#ec407a\")\n\n# Desenhando um quadrado de lados medindo\n# 150 pixels:\ntartaruga.forward(155)\ntartaruga.left(90)\ntartaruga.forward(300)\ntartaruga.left(90)\ntartaruga.forward(300)\ntartaruga.left(90)\ntartaruga.forward(300)\ntartaruga.left(90)\ntartaruga.home() # Retorna √† origem do sistema de coordenadas\n\n# Permite fechar a janela clicando nela:\nturtle.exitonclick()\n# Finaliza o objeto caneta:\nturtle.bye()\n\n\nVideo"
  },
  {
    "objectID": "index.html#biblioteca-turtle-3",
    "href": "index.html#biblioteca-turtle-3",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Biblioteca turtle üê¢",
    "text": "Biblioteca turtle üê¢\n\nUm m√©todo √∫til √© o de levantar a caneta (m√©todo penup()). Por exemplo, voc√™ poderia estar interessado em tracejar. Estude o c√≥digo que segue:\n\n\nC√≥digoV√≠deo\n\n\nimport turtle\n\ntartaruga = turtle.Turtle() # Abrindo janela.\ntartaruga.pensize(4) # Espessura do tra√ßo.\ntartaruga.shape(\"turtle\") # Formato do cursor.\n\n# Desenhando uma linha, a partir da origem\nfor i in range(11):\n    tartaruga.pendown() # Colocando a caneta no \"papel\"\n    tartaruga.fd(10) # mesmo que t.forward(10)\n    tartaruga.penup() # Levantando a caneta\n    tartaruga.fd(10) # mesmo que t.forward(10)\n\nfor i in range(11):\n    tartaruga.pendown() # Colocando a caneta no \"papel\"\n    tartaruga.circle(10*i + 100) # Desenhando c√≠ruclos\n\n# Permite fechar a janela clicando nela:\nturtle.exitonclick()\n# Finaliza o objeto caneta:\nturtle.bye()\n\n\nVideo"
  },
  {
    "objectID": "index.html#biblioteca-turtle-4",
    "href": "index.html#biblioteca-turtle-4",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Biblioteca turtle üê¢",
    "text": "Biblioteca turtle üê¢\n\nPodemos estar interessados em tracejar at√© um ponto espec√≠fico, al√©m de preencher com alguma cor, uma regi√£o. No c√≥digo abaixo, os m√©todos fillcolor(), begin_fill(), end_fill(), entre outros s√£o apresentados. Estude o c√≥digo e entenda o que cada m√©todo faz. Experimentar √© a melhor forma de aprender! Demais coment√°rios encontram-se no c√≥digo abaixo.\n\n\nC√≥digoV√≠deo\n\n\nimport turtle\n\n# A classe Screen() √© √∫til para gerenciar a\n# janela em que iremos desenhar:\ntela = turtle.Screen()\ntela.bgcolor(\"#ec407a\") # Atribuindo uma cor ao background.\n\n# A classe Turtle cont√©m m√©todos para desenhar\n# na tela:\ntartaruga = turtle.Turtle()\n\n# Espessura da caneta:\ntartaruga.pensize(4)\n\n# Desenhando um tri√¢ngulo:\ntartaruga.shape(\"turtle\")\n\ntartaruga.fillcolor(\"blue\") # Cor do preenchimento do tri√¢ngulo.\ntartaruga.begin_fill() # Informando onde ir√° come√ßar o preenchimento.\ntartaruga.pendown() # Colocando a caneta no papel.\ntartaruga.sety(250) # Sobe 250 p√≠xel para cima.\ntartaruga.setpos(250,0) # Desenhando dolocal anterior da caneta at√© o ponto (250, 0).\ntartaruga.home() # Riscando uma reta do local onde a caneta est√° at√© a origem.\ntartaruga.end_fill() # Diz onde termina o preenchimento.\n\n# Permite fechar a janela clicando nela:\nturtle.exitonclick()\n# Finaliza o objeto caneta:\nturtle.bye()\n\n\nVideo"
  },
  {
    "objectID": "index.html#exerc√≠cios-5",
    "href": "index.html#exerc√≠cios-5",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Exerc√≠cios üìö",
    "text": "Exerc√≠cios üìö\n\nExerc√≠cio: Crie um programa em Python que itere sobre um dicion√°rio de produtos de supermercado e imprima o nome do produto e seu pre√ßo correspondente. O dicion√°rio deve conter pelo menos 5 itens. Use um la√ßo for para iterar sobre o dicion√°rio.\n\nExerc√≠cio: Encontre a primeira raiz quadrada perfeita de um n√∫mero maior ou igual a 100. Utilize if, else e break.\n\nExerc√≠cio: Escreva um programa em Python que imprima todos os n√∫meros primos entre 1 e 100. Utilize o la√ßo while para iterar de 1 a 100 e dentro do la√ßo, verifique se o n√∫mero atual √© primo ou n√£o usando um outro la√ßo for. Se o n√∫mero for primo, imprima-o. Caso contr√°rio, use a instru√ß√£o continue para pular para a pr√≥xima itera√ß√£o."
  },
  {
    "objectID": "index.html#exerc√≠cios-6",
    "href": "index.html#exerc√≠cios-6",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Exerc√≠cios üìö",
    "text": "Exerc√≠cios üìö\n\nExerc√≠cio: Implemente um c√≥digo Python, utilizando la√ßos, de forma que forne√ßa a seguinte sa√≠da:\n\n\n\n1 1\n1 2\n1 3\n2 1\n2 2\n2 3\n3 1\n3 2\n3 3\n\n\n\nExerc√≠cio: Crie um programa que calcule a soma dos n√∫meros √≠mpares entre 1 e 100, usando um loop. Al√©m disso, o programa deve contar quantos n√∫meros √≠mpares existem entre 1 e 100 e imprimir o resultado."
  },
  {
    "objectID": "index.html#exerc√≠cios-7",
    "href": "index.html#exerc√≠cios-7",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Exerc√≠cios üìö",
    "text": "Exerc√≠cios üìö\n \nExerc√≠cio: Salve em uma lista todos os n√∫meros perfeitos entre 1 e 1000 Um n√∫mero √© dito perfeito quando a soma dos seus divisores (exceto ele mesmo) √© igual a ele mesmo. Por exemplo, o n√∫mero 6 √© perfeito, pois 1 + 2 + 3 = 6.\n\nExerc√≠cio: Crie um programa, em Python, que calcule o fatorial de um n√∫mero n. Denfini√ß√£o: definimos como fatorial de \\(n\\), matematicamente escrevemos \\(n!\\), como sendo:\n\\[n! = n \\times (n-1) \\times (n-2) \\times \\cdots \\times 1,\\] com \\(0! = 0\\)."
  },
  {
    "objectID": "index.html#exerc√≠cios-8",
    "href": "index.html#exerc√≠cios-8",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Exerc√≠cios üìö",
    "text": "Exerc√≠cios üìö\n\nExerc√≠cio: Escreva um programa, em Python, em que dever√° aproximar o valor de \\(\\pi = 3.141592653589793\\cdots\\), at√© uma precis√£o e = 1e-3, ou seja, o resultado da aproxima√ß√£o result deve ser tal que \\(|result - math.pi| \\leq \\mathrm{e}\\). O programa dever√° utilizar para aproxima√ß√£o com base na serie abaixo. Note que aproximar \\(\\pi/4\\) equivale a aproximar \\(\\pi\\), bastando multiplicarmos por 4 a aproxima√ß√£o de \\(\\pi/4\\).\n\n\\[\\pi/4 = \\sum_{n = 0}^{\\infty} = \\frac{2}{(4n + 1)(4n + 3)}.\\] \nExerc√≠cio: Crie um programa, em Python, que aproxime o valor de \\(\\mathrm{e}^x\\), utilizando a s√©rie de pot√™ncia abaixo:\n\\[\\mathrm{e}^x = \\sum_{n=0}^\\infty \\frac{x^n}{n!} = 1 + x + \\frac{x^2}{2!} + \\frac{x^3}{3!} + \\cdots.\\] Dica: N√£o poderemos fazer uma soma infinita. Sendo assim, seu c√≥digo dever√° especificar o n√∫mero de termos que ser√£o somados. Al√©m disso, voc√™ poder√° utilizar os m√©todos matem√°ticos da biblioteca math."
  },
  {
    "objectID": "index.html#exerc√≠cios-9",
    "href": "index.html#exerc√≠cios-9",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Exerc√≠cios üìö",
    "text": "Exerc√≠cios üìö\n\nExerc√≠cio: Crie um programa, em Python, que aproxime o valor de \\(\\sin(x)\\) com base na s√©rie de pot√™ncia abaixo at√© uma precis√£o menor ou igual √† e = 1e-3, ou seja, o resultado da aproxima√ß√£o result deve ser tal que \\(|result - math.sin(x)| \\leq \\mathrm{e}\\).\n\n\\[\\sin(x) = \\sum_{n = 0}^{\\infty}\\frac{(-1)^n x^{2n + 1}}{(2n + 1)!} = x - \\frac{x^3}{3!} + \\frac{x^5}{5!} - \\frac{x^7}{7!} + \\cdots.\\] \nExerc√≠cio: Sua empresa possui v√°rias filiais espalhadas pelo pa√≠s e deseja calcular a m√©dia de vendas de cada produto em cada uma das filiais. Os dados encontram-se no dicion√°rio fornecido logo abaixo. Note que cada elemento do dicion√°rio vendas √© um dicion√°rio de uma filial.\n\n\nvendas = {\n    'filial1': {\n        'produto1': [10, 20, 30, 40],\n        'produto2': [15, 25, 35],\n        'produto3': [5, 15]\n    },\n    'filial2': {\n        'produto1': [15, 25, 35],\n        'produto2': [20, 30, 40],\n        'produto3': [10, 20, 30]\n    },\n    'filial3': {\n        'produto1': [20, 30, 40, 50],\n        'produto2': [25, 35, 45],\n        'produto3': [15, 25]\n    }\n}\n\nEscreva um c√≥digo Python que itere sobre o dicion√°rio acima e calcule a m√©dia de vendas de cada produto em cada filial. Dica: √© conveniente que o programa retorne um dicion√°rio an√°logo ao fornecido, por√©m, com uma m√©dia de cada produto."
  },
  {
    "objectID": "index.html#exerc√≠cios-10",
    "href": "index.html#exerc√≠cios-10",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Exerc√≠cios üìö",
    "text": "Exerc√≠cios üìö\n\nExerc√≠cio: Utilizando a biblioteca turtle, crie um c√≥digo em Python para desenhar 36 quadrados em uma janela. Cada quadrado dever√° ter um lado de comprimento 100 pixels e dever√° ser desenhado com um √¢ngulo de rota√ß√£o de 10 graus em rela√ß√£o ao quadrado anterior. Utilize a a espessura da caneta igual √† 4. Se tudo for implementado corretamente, a imagem a ser gerada ser√° id√™ntica a de baixo:"
  },
  {
    "objectID": "index.html#exerc√≠cios-11",
    "href": "index.html#exerc√≠cios-11",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Exerc√≠cios üìö",
    "text": "Exerc√≠cios üìö\n\nExerc√≠cio: Crie um c√≥digo em Python, para desenhar a imagem abaixo, utilizando a biblioteca turtle. O c√≥digo dever√° desenhar quadrados, com o tamanho dos lados variando em 5 pixels em cada quadrado. Voc√™ dever√° desenhar 50 quadrados:"
  },
  {
    "objectID": "index.html#exerc√≠cios-12",
    "href": "index.html#exerc√≠cios-12",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Exerc√≠cios üìö",
    "text": "Exerc√≠cios üìö\n\nExerc√≠cio: Crie um c√≥digo em Python que retorne em forma de ‚Äú√°rvore‚Äù numerada abaixo:\n\n\n\n1 \n1 2 \n1 2 3 \n1 2 3 4 \n1 2 3 4 5 \n1 2 3 4 5 6 \n1 2 3 4 5 6 7 \n1 2 3 4 5 6 7 8 \n1 2 3 4 5 6 7 8 9 \n1 2 3 4 5 6 7 8 9 10 \n\n\n\nDica: A fun√ß√£o print() possui o argumento end que permite controlarmos as separa√ß√µes em cada print. Por padr√£o, a separa√ß√£o √© \\n, isto √©, nova linha."
  },
  {
    "objectID": "index.html#exerc√≠cios-13",
    "href": "index.html#exerc√≠cios-13",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Exerc√≠cios üìö",
    "text": "Exerc√≠cios üìö\n\nExerc√≠cio: Implemente, utilizando instru√ß√µes de loop, um c√≥digo Python e construa a ‚Äú√°rvore‚Äù abaixo:\n\n\n\n+\n\n+-\n\n+-+\n\n+-+-\n\n+-+-+\n\n+-+-+-\n\n+-+-+-+"
  },
  {
    "objectID": "index.html#list-comprehensions",
    "href": "index.html#list-comprehensions",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "List Comprehensions",
    "text": "List Comprehensions\n\nA ideia por tr√°s de list comprehensions em Python √© fornecer uma forma concisa de criar listas baseadas em um iter√°vel.\n\nElas s√£o importantes porque permitem que voc√™ execute opera√ß√µes em cada elemento de um iter√°vel e produza uma nova lista como resultado, tudo em uma √∫nica linha de c√≥digo, tornando o seu c√≥digo mais enxuto e leg√≠vel.\n\nAl√©m disso, list comprehensions s√£o geralmente mais r√°pidas do que loops comuns devido a sua otimiza√ß√£o interna.\n\nO conceito de list comprehensions foi herdado do Haskell, uma linguagem de programa√ß√£o funcional. Desde ent√£o, ele se tornou um recurso comum em muitas linguagens de programa√ß√£o, incluindo Python.\n\n\nLogo da linguagem de programa√ß√£o Haskell. Haskell √© uma linguagem de programa√ß√£o com paradigma de programa√ß√£o funcional. Python herdou alguns conceitos do paradigma de programa√ß√£o funcional. O conceito de list comprehensions √© um deles."
  },
  {
    "objectID": "index.html#list-comprehensions-1",
    "href": "index.html#list-comprehensions-1",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "List Comprehensions",
    "text": "List Comprehensions\n\nA forma geral de escrita de uma list comprehensions √©:\n\n[expression for item in iterable if condition]\n\nem que:\n\n\n\nexpression √© uma express√£o de retorno. S√£o os elementos que ir√£o compor sua lista;\nitem √© o elemento que ir√° variar no iter√°vel. A depender do iter√°vel, pode ser mais de um elemento;\niterable √© um objeto iter√°vel. Pode ser uma lista, tupla, conjunto, entre outros;\ncondition √© uma cl√°usula opcional que especifica uma condi√ß√£o para filtrar os elementos do iter√°vel."
  },
  {
    "objectID": "index.html#list-comprehensions-2",
    "href": "index.html#list-comprehensions-2",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "List Comprehensions",
    "text": "List Comprehensions\n\nExemplo: introduzindo os valores de 2 * x em uma lista L utilizando a instru√ß√£o for e o conceito de list comprehensions.\n\n\nUsando list comprehensionsUsando for\n\n\n\n\nL = [2 * x for x in range(10)]\nprint(L)\n\n[0, 2, 4, 6, 8, 10, 12, 14, 16, 18]\n\n\n\n\n\n\nL = []\nfor x in range(10):\n  L.append(2 * x)\nprint(L)\n\n[0, 2, 4, 6, 8, 10, 12, 14, 16, 18]"
  },
  {
    "objectID": "index.html#list-comprehensions-3",
    "href": "index.html#list-comprehensions-3",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "List Comprehensions",
    "text": "List Comprehensions\n\nTambe·∏ø poderemos utilizar list comprehensions para criar listas mais complexas, como por exemplo:\n\n\ny = [(x , 2 * x) for x in [1, 2, 3]]\nprint(y)\n\n[(1, 2), (2, 4), (3, 6)]\n\n\n\nNo exemplo acima, criamos uma lista de tuplas, em que o primeiro elemento de cada tupla s√£o os respectivos valores de x e o segundo √© 2 * x. Um outro exemplo:\n\n\ny = [(x, y) for *x, y in [(4, 2, 3), (10, 1, 2), (8, 7, 9)]]\nprint(y)\n\n[([4, 2], 3), ([10, 1], 2), ([8, 7], 9)]\n\n\n\nNote que *x √© uma simples desempacotamento de tuplas que ser√£o divididas em duas partes, *x e y, respectivamente."
  },
  {
    "objectID": "index.html#list-comprehensions-4",
    "href": "index.html#list-comprehensions-4",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "List Comprehensions",
    "text": "List Comprehensions\n\nExemplo: A express√£o poder√° conter fun√ß√µes matem√°ticas dos itens. Em breve, quando voc√™ aprender a criar suas fun√ß√µes em Python, poder√° utiliz√°-las em compreens√µes de listas para construir listas de valores que desejar. O c√≥digo que segue resultar√° em uma lista que √© o resultado da soma da ra√≠z quadrada do primeiro elemento da tupla com o seno do segundo elemento, se a soma dos elementos for par.\n\n\nimport math\nL = [(1, 5), (2, 4), (3, 4), (6, 2), (2, 1)]\n\noperacao = [round(math.sqrt(x) + math.sin(y), 4) for x, y in L if (x + y) % 2 == 0]\n\nprint(operacao)\n\n[0.0411, 0.6574, 3.3588]"
  },
  {
    "objectID": "index.html#list-comprehensions-5",
    "href": "index.html#list-comprehensions-5",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "List Comprehensions",
    "text": "List Comprehensions\n\nCompreens√£o de listas tamb√©m podem ser aninhadas. Por exemplo, considere a lista de listas abaixo:\n\n\nm = [\n  [1, 2, 3, 4],\n  [5, 6, 7, 8],\n  [9, 10, 11, 12]\n]\n\n\nUm pequeno par√™ntese:\n\nvoc√™ poder√° pensar em listas de listas como arrays, uma vez que com a biblioteca Numpy, √∫til para computa√ß√£o num√©rica em Python, arrays s√£o escritos como lista de listas. Arrays 2d s√£o comumente chamdos de matrizes e 1d pode ser entendido como um vetor. No caso mais gen√©rico (arrays N-dimensionais), chamamos simplesmente de arrays.\n\nA linguagem Python n√£o suporta arrays nativamente. Por√©m, isso n√£o √© um problema, pois arrays s√£o bem implementados na biblioteca Numpy. Em breve falaremos da biblioteca Numpy.\n\nAlguns materiais citam m, como uma matriz, assumindo que voc√™ estar√° usando a biblioteca Numpy. Por√©m, lembre-se: n√£o h√° suporte nativo √† arrays em Python, e m √© apenas uma lista de listas."
  },
  {
    "objectID": "index.html#list-comprehensions-6",
    "href": "index.html#list-comprehensions-6",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "List Comprehensions",
    "text": "List Comprehensions\n\nVoltando ao que fal√°vamos: aninhamento de compreens√µes de listas, e seja m na forma anterior (um lista de listas). Por√©m, para melhorar a explica√ß√£o, imagine sendo uma matriz com 3 linhas e 4 colunas (\\(3 \\times 4\\)).\n\nVamos tentar reescrever essa matriz fazendo as colunas virarem as linhas, isto √©, vamos transpor o objeto m. Isso poder√° ser realizado utilizando aninhamento de compreens√µes de listas. Veja:\n\n\nm = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]\n[[linha[i] for linha in m] for i in range(4)]\n\n[[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]\n\n\n\nExerc√≠c√≠o: Refa√ßa o exemplo acima utilizando o la√ßo for."
  },
  {
    "objectID": "index.html#exerc√≠cios-14",
    "href": "index.html#exerc√≠cios-14",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Exerc√≠cios üìö",
    "text": "Exerc√≠cios üìö\n\nExerc√≠cio: Dado uma lista de n√∫meros inteiros, crie uma nova lista com cada n√∫mero elevado ao quadrado. Resolva o exerc√≠cio de duas formas: use loop e o conceito de list comprehension.\n\nExerc√≠cio: Dado a lista de strings abaixo, crie uma nova lista com as strings filtradas que t√™m mais de 5 caracteres e, em seguida, converta as letras em mai√∫sculas. Resolva o exerc√≠cio de duas formas: utilizando instru√ß√£o de loop e usando o conceito de list comprehension.\n\nstrings = ['ol√°', 'mundo', 'python', 'linguagem', 'programa√ß√£o']\n\nExerc√≠cio: Considere uma lista l = range(10). Construa dois programas em Python, que resulte uma uma lista acumulada de l, ou seja, que devolva a sequ√™ncia de valores acumulados [0, 1, 3, 5, 7, 9, 11, 13, 15, 17]. O primeiro dever√° utilizar apenas alguma instru√ß√£o de repeti√ß√£o e o segundo dever√° utilizar list comprehensions."
  },
  {
    "objectID": "index.html#exerc√≠cios-15",
    "href": "index.html#exerc√≠cios-15",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Exerc√≠cios üìö",
    "text": "Exerc√≠cios üìö\n\nExerc√≠cio: Na sequ√™ncia de 2 √† 100, encontre os n√∫meros primos. Lembre-se que n√∫meros primos s√£o todos os n√∫meros maiores que 1 que s√£o divis√≠veis apenas por ele mesmo. Resolva de duas formas. A primeira utiliza√ß√£o apenas instru√ß√µes de repeti√ß√£o e a segunda utilizando list comprehensions. Dica: a fun√ß√£o all() ir√° retornar True se todos os elementos de uma cole√ß√£o (list, conjunto, tuplas) s√£o verdadeiros. Por exemplo, all(i % 2 == 0 for i in [1, 2, 3, 4]) retorna False, pois h√° elementos em [1, 2, 3, 4] que n√£o s√£o pares.\n\n\n\n\nExerc√≠cio: Utilize uma list comprehension para gerar uma lista de palavras de lista. Utilize o m√©todo split() de um objeto da classe str. Por exemplo, experimente o uso do m√©todo split() testando \"Pedro Rafael\".split(' ').\n#| eval: false\n#| echo: false\ns1 = \"Bem vindo ao curso de Python\"\ns2 = \"Python √© uma linguagem de programa√ß√£o legal\"\ns3 = \"Python √© importante para abrir oportunidades\"\n\nlista = [s1, s2, s3]"
  },
  {
    "objectID": "index.html#fun√ß√µes",
    "href": "index.html#fun√ß√µes",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Fun√ß√µes",
    "text": "Fun√ß√µes\n\n\n\nPara que possamos criar c√≥digos consistentes, √© essencial que possamos contruir nossas pr√≥prias fun√ß√µes. Envolver o c√≥digo em uma fun√ß√£o que ser√° chamada isoladamente ou far√° composi√ß√µes com outras fun√ß√µes √© de grande import√¢ncia para que venhamos programar de forma eficiente.\n\nAlgumas vantagens em criar fun√ß√µes üì¶\n\nReutiliza√ß√£o de c√≥digo: Ao criar suas pr√≥prias fun√ß√µes, voc√™ pode reutiliz√°-las em v√°rios projetos, economizando tempo e esfor√ßo.\nOrganiza√ß√£o: Fun√ß√µes personalizadas ajudam a organizar o c√≥digo, tornando-o mais leg√≠vel e f√°cil de entender.\nManuten√ß√£o: Ao ter uma estrutura de fun√ß√µes claramente definida, √© mais f√°cil manter e atualizar o c√≥digo, sem afetar outras partes do projeto.\nFlexibilidade: Ao criar suas pr√≥prias fun√ß√µes, voc√™ tem mais liberdade para adapt√°-las √†s suas necessidades espec√≠ficas."
  },
  {
    "objectID": "index.html#fun√ß√µes-1",
    "href": "index.html#fun√ß√µes-1",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Fun√ß√µes",
    "text": "Fun√ß√µes\n\n\n\nAs fun√ß√µes possui algumas caracter√≠sticas:\n\n\n\nPossuem um nome: nome que identificar√° a fun√ß√£o e √∫til, para invocar a fun√ß√£o;\nPodem conter par√¢metros (0 ou mais): d√£o flexibilidade a fun√ß√£o, permitindo, por exemplo, mudar o comportamento da fun√ß√£o ou passar dados que ser√£o processados no interior da fun√ß√£o;\nPodem conter docstrings (opcional, mas recomendado): uma string de documenta√ß√£o, √∫til para descrever resumidamente as a√ß√µes da fun√ß√£o;\nPossuem um corpo: c√≥digos que realizar√£o as a√ß√µes que a fun√ß√£o destina-se a fazer;\nPodem retornar algo (retorno opcional): objeto ou conjunto de objetos retornados pela fun√ß√£o. Algumas fun√ß√µes podem n√£o retornar nada, por exemplo, fun√ß√µes que alteram nome de arquivos em um diret√≥rio √© um exemplo de um procedimento (fun√ß√£o sem retorno)."
  },
  {
    "objectID": "index.html#fun√ß√µes-2",
    "href": "index.html#fun√ß√µes-2",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Fun√ß√µes",
    "text": "Fun√ß√µes\n\nForma geral da defini√ß√£o de uma fun√ß√£o em :\n\ndef nome_da_funcao(par√¢metros):\n  \"\"\"Docstring:\n  Uma informa√ß√£o geral sobre o que a fun√ß√£o faz\n  \"\"\"\n  <comandos>\n  retorno (opcional)\n\nExemplo: A fun√ß√£o pares(x, par = True) possui dois argumentos, em que x √© uma lista ou tupla e ir√° retornar uma lista apenas com valores pares, se par = True. Caso contr√°rio, ir√° retornar os valores √≠mpares.\n\n\nvalores = [1, 6, 2, 12, -2, 7, 3, 9, 8]\n\ndef pares(x, par = True):\n\n    \"\"\"Essa fun√ß√£o ir√° retornar os valores pares da lista x\n    se par = True. Caso contr√°rio, ir√° retornar os valores\n    √≠mpares de x.\n    \"\"\"\n\n    # Lista vazia:\n    v = []\n\n    for i in valores:\n        if par and i % 2 == 0:\n            v.append(i)\n        else:\n            if i % 2 != 0:\n              v.append(i)\n\n    # Retornando a lista v:\n    return v\n\nprint(f\"A lista com os valores pares: {pares(valores)}\")\n\nA lista com os valores pares: [1, 6, 2, 12, -2, 7, 3, 9, 8]\n\nprint(f\"A lista com os valores √≠mpares: {pares(valores, False)}\")\n\nA lista com os valores √≠mpares: [1, 7, 3, 9]"
  },
  {
    "objectID": "index.html#fun√ß√µes-3",
    "href": "index.html#fun√ß√µes-3",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Fun√ß√µes",
    "text": "Fun√ß√µes\n\nNo c√≥digo da fun√ß√£o pares(x, par = True), perceba que √© poss√≠vel introduzir valores padr√µes, isto √©, pode-se ter argumentos com valores padr√µes previamente definidos. Nesse exemplo, note que par = True. Perceba que no primeiro print, ao fazer pares(valores) √© equivalente a fazer pares(valores, par = True) ou, simplesmente pares(valores, True).\n\nNote tamb√©m que se tiv√©ssemos feito pares(x = valores, True) ocorreria um erro. Isso, porque, ao passarmos argumentos especificando o nome do argumento, todos os demais argumentos teriam que ser passados de forma nomeada. Daria certo ter feito pares(valores, par = True), mas n√£o dar√° se fizermos pares(x = valores, True).\n\nArgumentos passados de forma n√£o nomeadas s√£o chamados de argumentos posicionais, j√° os que s√£o passados de forma nomeada s√£o chamados de argumentos nomeados."
  },
  {
    "objectID": "index.html#fun√ß√µes-4",
    "href": "index.html#fun√ß√µes-4",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Fun√ß√µes",
    "text": "Fun√ß√µes\n\nComo regra, lembre-se:\n\n\nEm uma chamada de fun√ß√£o, argumentos nomeados devem vir depois dos argumentos posicionais, ok?"
  },
  {
    "objectID": "index.html#fun√ß√µes-5",
    "href": "index.html#fun√ß√µes-5",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Fun√ß√µes",
    "text": "Fun√ß√µes\n\nPoderemos obrigar que alguns argumentos sejam passados de forma posicional ou de forma nomeada, utilizando par√¢metros especiais.\n\ndef f(pos1, pos2, /, pos_or_kwd, *, kwd1, kwd2):\n      ----------    -----------     ----------\n        |             |                  |\n        |        Positional ou nomeado   |\n        |                                - Apenas nomeado\n        -- Apenas posicional"
  },
  {
    "objectID": "index.html#fun√ß√µes-6",
    "href": "index.html#fun√ß√µes-6",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Fun√ß√µes",
    "text": "Fun√ß√µes\n\nExemplo: Nesse exemplo, os par√¢metros x e y s√£o obrigatoriamente n√£o nomeados, isto √©, s√£o posicionais, j√° o par√¢metro z dever√° obrigatoriamente ser nomeado.\n\ndef retorna_tupla(x, y, /, *, z):\n    \"\"\"A fun√ß√£o recebe os argumentos x, y, e z\n    e ir√° retornar uma tupla com as informa√ß√µes\n    passadas.\n    \"\"\"\n    return x, y, z\n\nretorna_tupla(1, 2, z = 3)\n# Dar√° erro, pois z deve ser nomeado:\nretorna_tupla(1, 2, 3)\n# Dar√° erro, pois x e y s√£o posicionais:\nretorna_tupla(x = 1, y = 2, z = 3)"
  },
  {
    "objectID": "index.html#fun√ß√µes-7",
    "href": "index.html#fun√ß√µes-7",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Fun√ß√µes",
    "text": "Fun√ß√µes\n\nVoc√™ poder√° definir fun√ß√µes no interior de outras fun√ß√µes. Normalmente definimos uma fun√ß√£o dentro de outra, quando as fun√ß√µes internas √† uma outra fun√ß√£o n√£o de interesse fora dela. Fun√ß√µes definidas no interior de outra fun√ß√£o s√≥ s√£o reconhecidas dentro da fun√ß√£o que cont√©m.\n\n\ndef media3(x, y, z):\n    \"\"\"Fun√ß√£o que receber tr√™s n√∫meros e retorna a m√©dia\"\"\"\n    def soma(x, y, z):\n        return x + y + z\n\n    return soma(x, y, z)/3\n\nprint(f\"M√©dia: {media3(7.8, 8.87, 9.43)}\")\n\nM√©dia: 8.7\n\n\nVoc√™ poder√° consultar a docstring de uma fun√ß√£o, utilizando o m√©todo m√°gico __doc__. Por exemplo, media3.__doc__. Toda fun√ß√£o que possui uma docstring, ter√° o m√©todo __doc__ para permitir o acesso."
  },
  {
    "objectID": "index.html#fun√ß√µes-8",
    "href": "index.html#fun√ß√µes-8",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Fun√ß√µes",
    "text": "Fun√ß√µes\n\nUm conceito importante para se atentar, em Python, √© o conceito de passagem por refer√™ncia e passagem por valor.\n\n\nNesse exemplo, temos que cup √© um objeto que ser√° passado para a fun√ß√£o fillCup(). Perceba que ana passagem por refer√™ncia, o objeto original √© passado e na passagem por valor uma c√≥pia do objeto √© passado para a fun√ß√£o."
  },
  {
    "objectID": "index.html#fun√ß√µes-9",
    "href": "index.html#fun√ß√µes-9",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Fun√ß√µes",
    "text": "Fun√ß√µes\n\nMuitas fun√ß√µes em Python n√£o realizam c√≥pias do objeto passado como argumento. Essas fun√ß√µes agem sobre o endere√ßo de mem√≥ria original do objeto e as modifica√ß√µes alteram o objeto original.\n\nV√°rios m√©todos em Python agem sobre o objeto original. Por exemplo, o m√©todo sort() de objetos da classe list ordena uma lista por refer√™ncia:\n\n\n# Lista original:\nx = [9, 5, -1, 0, 2, 6, 8, 7]\ny = x.copy()\n\n# Veja que mesmo sem reatribuir o resultado novamente\n# para x utilizando o operador \"=\", o objeto x foi\n# alterado:\nx.sort() # O m√©todo sort() agiu sobre o objeto original.\n\n# Para n√£o alterar x, ao inv√©s de ter executado a linha logo\n# acima (x.sort()), poder√≠amos ter realizado uma c√≥pia de x:\ny.sort() # Apenas y (c√≥pia de x) seria ordenada."
  },
  {
    "objectID": "index.html#fun√ß√µes-10",
    "href": "index.html#fun√ß√µes-10",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Fun√ß√µes",
    "text": "Fun√ß√µes\n\nNas nossas fun√ß√µes em Python, todos os objetos mut√°veis como listas, dicion√°rios e conjuntos, s√£o passados para a fun√ß√£o por refer√™ncia. N√£o √© √† toa, que esses objetos mut√°veis possuem o m√©todo copy, √∫til quando n√£o desejarmos fazer refer√™cia ao objeto original.\n\nExemplo: A lista passada como argumento para a fun√ß√£o nome() ser√° alterada, pois a passagem de um objeto mut√°vel, nesse caso uma lista, ser√° passada por refer√™ncia.\n\ndef nome(x):\n    for i in range(len(x)):\n        if x[i] > 0:\n            x[i] = \"+\"\n        else:\n            if x[i] == 0:\n                x[i] = 0\n            else:\n                x[i] = \"-\"\n# Objeto x antes do uso da fun√ß√£o nome():\nx = [1, 2, -1, 0, -4, 10]\nnome(x)\nprint(f\"x: {x}\")\n\nx: ['+', '+', '-', 0, '-', '+']"
  },
  {
    "objectID": "index.html#fun√ß√µes-11",
    "href": "index.html#fun√ß√µes-11",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Fun√ß√µes",
    "text": "Fun√ß√µes\n\n\nAlterando xProtegendo o x\n\n\nAqui, perceba que x √© um objeto (no caso uma lista) declarada fora da fun√ß√£o, ao passar x como argumento, n√£o ser√° realizado uma c√≥pia. Portanto, a fun√ß√£o ir√° modificar a lista x = [1, 2, -1, 0, -4, 10]:\n\ndef nome(x):\n    for i in range(len(x)):\n        if x[i] > 0:\n            x[i] = \"+\"\n        else:\n            if x[i] == 0:\n                x[i] = 0\n            else:\n                x[i] = \"-\"\n# Objeto x antes do uso da fun√ß√£o nome():\nx = [1, 2, -1, 0, -4, 10]\nnome(x)\nprint(f\"x: {x}\")\n\nx: ['+', '+', '-', 0, '-', '+']\n\n\n\n\n\nSe n√£o √© sua inten√ß√£o alterar os valores verdadeiros de um objeto mut√°vel que ir√° passar como argumento de uma fun√ß√£o, lembre-se de fazer uma c√≥pia no interior da fun√ß√£o:\n\n\ndef nome(x):\n    x_cop = x.copy() # Criando uma c√≥pia de x.\n    for i in range(len(x_cop)):\n        if x_cop[i] > 0:\n            x_cop[i] = \"+\"\n        else:\n            if x_cop[i] == 0:\n                x_cop[i] = 0\n            else:\n                x_cop[i] = \"-\"\n    return x_cop\n# Objeto x antes do uso da fun√ß√£o nome():\nx = [1, 2, -1, 0, -4, 10]\nr = nome(x)\nprint(f\"x: {x}\")\nprint(f\"r: {r}\")\n\nx: [1, 2, -1, 0, -4, 10]\nr: ['+', '+', '-', 0, '-', '+']"
  },
  {
    "objectID": "index.html#escopo-de-vari√°veis",
    "href": "index.html#escopo-de-vari√°veis",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Escopo de vari√°veis",
    "text": "Escopo de vari√°veis\n\nQuando usamos fun√ß√µes, come√ßamos a trabalhar com vari√°veis internas (vari√°veis locais) e com vari√°veis externas (vari√°veis globais).\n\nUma vari√°vel local a uma fun√ß√£o existe apenas dentro dela, sendo inicializada a cada chamada √† fun√ß√£o.\n\nUma vari√°vel global √© definda fora de uma fun√ß√£o, podendo ser vista por todas as fun√ß√µes do m√≥dulo (programa) e por todos os m√≥dulos que importam o m√≥dulo que a definiu. Entenda o c√≥digo que segue e sua sa√≠da. Por que o valor de a n√£o mudou?\n\n\n\na = 17\n\ndef muda_e_imprime():\n    a = 8\n    print(f\"'a' dentro da fun√ß√£o: {a}\")\n\nprint(f\"'a' antes de mudar: {a}\")\nmuda_e_imprime()\nprint(f\"'a' depois de mudar: {a}\")\n\n\n'a' antes de mudar: 17\n'a' dentro da fun√ß√£o: 8\n'a' depois de mudar: 17"
  },
  {
    "objectID": "index.html#escopo-de-vari√°veis-1",
    "href": "index.html#escopo-de-vari√°veis-1",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Escopo de vari√°veis",
    "text": "Escopo de vari√°veis\n\nE se houvesse apenas a vari√°vel a definida no escopo fora da fun√ß√£o muda_e_imprime()? √â poss√≠vel? Como ficaria a sa√≠da? Estude o c√≥digo:\n\n\n\na = 17\n\ndef muda_e_imprime():\n    print(f\"'a' dentro da fun√ß√£o: {a}\")\n\nprint(f\"'a' antes de mudar: {a}\")\nmuda_e_imprime()\nprint(f\"'a' depois de mudar: {a}\")\n\n\n'a' antes de mudar: 17\n'a' dentro da fun√ß√£o: 17\n'a' depois de mudar: 17\n\n\n\n\nVari√°veis globais s√£o reconhecidas no escopo local, caso nesse escopo n√£o haja nenhum outro objeto com o mesmo nome."
  },
  {
    "objectID": "index.html#escopo-de-vari√°veis-2",
    "href": "index.html#escopo-de-vari√°veis-2",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Escopo de vari√°veis",
    "text": "Escopo de vari√°veis\n\nUma outra situa√ß√£o √© quando temos uma vari√°vel local no escopo de uma fun√ß√£o e desejamos modificar uma vari√°vel no escopo global com o mesmo nome. Isso √© poss√≠vel utilizando a instru√ß√£o global. Perceba que a vari√°vel a declarada fora do escopo da fun√ß√£o ir√° ter o seu valor alterado, uma vez que especificamos que a fun√ß√£o dever√° enxergar a defini√ß√£o de a no escopo mais geral.\n\n\n\na = 17\n\ndef muda_e_imprime():\n    global a\n    a = 8\n    print(f\"'a' dentro da fun√ß√£o: {a}\")\n\nprint(f\"'a' antes de mudar: {a}\")\nmuda_e_imprime()\nprint(f\"'a' depois de mudar: {a}\")\n\n\n'a' antes de mudar: 17\n'a' dentro da fun√ß√£o: 8\n'a' depois de mudar: 8"
  },
  {
    "objectID": "index.html#escopo-de-vari√°veis-3",
    "href": "index.html#escopo-de-vari√°veis-3",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Escopo de vari√°veis",
    "text": "Escopo de vari√°veis\n\n√â importante deixar claro que a utiliza√ß√£o da instru√ß√£o global em excesso em seu c√≥digo poder√° gerar problemas. √â perigoso alterar, por meio de fun√ß√µes, o escopo de vari√°veis globais. Isso poder√° gerar bugs que s√£o dif√≠ceis de serem identificados. Isso n√£o impede de voc√™ utilizar, mas fa√ßa com modera√ß√£o e em caso de extrema necessidade, ok?"
  },
  {
    "objectID": "index.html#desempacotando-par√¢metros",
    "href": "index.html#desempacotando-par√¢metros",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Desempacotando par√¢metros",
    "text": "Desempacotando par√¢metros\n\nOutra flexibilidade da linguagem Python √© a possibilidade de passar par√¢metros empacotados em uma lista. Considere o exemplo que segue:\n\n\n# Uma fun√ß√£o simples com dois argumentos:\ndef soma(x, y):\n  \"\"\"Recebe dois valores num√©ricos e retorna a soma.\"\"\"\n  return x + y\n\nl = [1.5, 0.2]\nsoma(*l)\n\n1.7\n\n\n\nPara desempacotar os valores de uma lista, utilizamos a nota√ß√£o * antes do nome da lista (no caso l) que √© passado como argumento para a fun√ß√£o (no caso soma())."
  },
  {
    "objectID": "index.html#fun√ß√µes-varargs",
    "href": "index.html#fun√ß√µes-varargs",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Fun√ß√µes varargs",
    "text": "Fun√ß√µes varargs\n\nUm recurso de grande import√¢ncia na defini√ß√µes de fun√ß√µes √© a poss√≠bilidade de criarmos fun√ß√µes varargs, isto √©, fun√ß√µes com uma quantidade indeterminada (vari√°dica) de argumentos.\n\nExemplo: A fun√ß√£o abaixo poder√° receber uma quantidade indeterminada (vari√°vel) de argumentos. A sintaxe √© muito pr√≥xima a sintaxe de desempacotamento de argumentos. Por√©m, no exemplo anterior, note que a quantidade de argumentos √© determin√≠stica (no caso 2). Aqui, temos que a nota√ß√£o * foi utilizada no argumento args durante a defini√ß√£o da fun√ß√£o.\n\n\ndef funcao_varargs(*args):\n    for arg in args:\n        print(arg)\n\nfuncao_varargs(1, 2, 3)\n\n1\n2\n3"
  },
  {
    "objectID": "index.html#fun√ß√µes-varargs-1",
    "href": "index.html#fun√ß√µes-varargs-1",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Fun√ß√µes varargs",
    "text": "Fun√ß√µes varargs\n\nPoderemos criar fun√ß√µes que combinem par√¢metros obrigat√≥rios e uma lista vari√°vel de par√¢metros. N√£o h√° nenhuma restri√ß√£o quanto √† isso.\n\n\ndef imprime_maior(mensagem = \"Maior: \", *args):\n  maior = None\n  for e in args:\n    if maior is None or maior < e:\n      maior = e\n  print(mensagem, maior)\n\nimprime_maior(1, 10, -1, 0)\nimprime_maior(\"M√°ximo: \", 1, 10, -1, 0)\nimprime_maior(\"Valor maior: \", 1, 10, -1, 0)\n\n1 10\nM√°ximo:  10\nValor maior:  10"
  },
  {
    "objectID": "index.html#fun√ß√µes-varargs-2",
    "href": "index.html#fun√ß√µes-varargs-2",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Fun√ß√µes varargs",
    "text": "Fun√ß√µes varargs\n\nTamb√©m poderemos passar um n√∫mero vari√°vel de argumentos nomeados (chave-valor) para uma fun√ß√£o. Normalmente denotamos esse argumento por **kwargs. O nome kwargs √© opcional (voc√™ poderia dar qualquer outro nome), mas que √© normalmente utilizado, assim como args quando usamos *args para introduzir um n√∫mero vari√°vel de argumentos n√£o nomeados em uma fun√ß√£o. Por exemplo, voc√™ poderia chamar de *a e **b respectivamente.\n\n\ndef funcao_kwargs(**kwargs):\n    for key, value in kwargs.items():\n        print(f\"> {key}: {value}\")\n\nfuncao_kwargs(primeiro_nome = \"Pedro\", segundo_nome = \"Rafael\")\n\n> primeiro_nome: Pedro\n> segundo_nome: Rafael\n\n\n\nkwargs.items() retorna um objeto da classe dict_items, cujos elementos s√£o tuplas de pares (chave, valor)."
  },
  {
    "objectID": "index.html#fun√ß√µes-lambda",
    "href": "index.html#fun√ß√µes-lambda",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Fun√ß√µes lambda",
    "text": "Fun√ß√µes lambda\n \nMuitas vezes √© √∫til decompormos nossos problemas em fun√ß√µes, e em muitas situa√ß√µes as fun√ß√µes lambda, tamb√©m conhecida como fun√ß√µes an√¥nimas, s√£o √∫teis nesse papel.\n\nUm uso muito comun de fun√ß√µes lambda √© quando desejamos modificar os argumentos de uma fun√ß√£o e quando precisamos iterar sobre essa fun√ß√£o utilizando um funcional.\n\nEntenda como funcional a fun√ß√£o que recebe como argumento uma outra fun√ß√£o e retorna uma lista/array. O uso de funcionais √© muito comum na comunidade R. Veja o pacote purrr.\n\nTamb√©m poderemos utilizar esse conceito em Python, muito embora poucas pessoas o exploram."
  },
  {
    "objectID": "index.html#fun√ß√µes-lambda-1",
    "href": "index.html#fun√ß√µes-lambda-1",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Fun√ß√µes lambda",
    "text": "Fun√ß√µes lambda\n\nConsidere o exemplo, em que temos uma simples fun√ß√£o de nome soma2 que √© respons√°vel por somar dois valores. Considere que queremos iterar apenas em y e somar a cada termo o valor de \\(\\pi\\). N√£o precisaremos reimplementar uma nova fun√ß√£o soma2 que possui apenas y como argumento com x constante. Usar o conceito de fun√ß√µes lambda resolver√° o nosso problema e √© muito √∫til na computa√ß√£o cient√≠fica. Veja:\n\n\nimport math\n\n# Sequ√™ncia de valores a serem somados:\nsequencia_y = range(0, 5)\n\n# Fun√ß√£o de 2 argumentos que soma x e y:\ndef soma2(x, y):\n    return x + y\n\ndef funcional(f, seq):\n    r = []\n\n    for v in seq:\n        r.append(f(v))\n\n    return r\n\n# Iterando sobre sequencia_y usando o funcional.\n# O objetivo √© somar y a constante math.pi. Note\n# Que n√£o precisamos criar uma nova fun√ß√£o com\n# x sendo constante.\nfuncional(lambda y: soma2(math.pi, y), sequencia_y)\n\n[3.141592653589793, 4.141592653589793, 5.141592653589793, 6.141592653589793, 7.141592653589793]"
  },
  {
    "objectID": "index.html#funcional-map",
    "href": "index.html#funcional-map",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Funcional map",
    "text": "Funcional map\n\nO que fizemos, no exemplo anterior, tamb√©m poderia ter sido feito utilizando o funcional map(). Na verdade, por ele √© a forma mais conveniente, por ser computacionalmente mais eficiente, al√©m de utilizar o conceito de iterador. Veja:\n\n\nimport math\n\n# Sequ√™ncia de valores a serem somados:\nsequencia_y = range(0, 5)\n\nlist(map(lambda y: soma2(math.pi, y), sequencia_y))\n\n[3.141592653589793, 4.141592653589793, 5.141592653589793, 6.141592653589793, 7.141592653589793]\n\n\n\nO funcional map() retorna um iterador. Sendo assim, para que seja poss√≠vel ter a lista com todos os valores, voc√™ poder√° usar a fun√ß√£o list(). A vantagem do iterador √© que os elementos n√£o s√£o carregados todos de uma √∫nica vez na mem√≥ria. Caso voc√™ n√£o converta o iterador para uma lista, use fun√ß√£o next() ou ou m√©todo __next__ do iterador para acessar seus elementos. üëç"
  },
  {
    "objectID": "index.html#funcional-reduce",
    "href": "index.html#funcional-reduce",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Funcional reduce",
    "text": "Funcional reduce\n\nUm outro funcional √∫til, dipon√≠vel no m√≥dulo functools de Python √© o reduce(). Note que ele √© um funcional, pois recebe como argumento uma fun√ß√£o e retorna um valor.\n\nAplicar uma fun√ß√£o de dois argumentos cumulativamente aos itens de uma sequ√™ncia ou iter√°vel, da esquerda para a direita, de modo a reduzir o iter√°vel a um √∫nico valor. Estude o c√≥digo que segue:\n\n\nimport functools as fct\nimport math\n\nl = [1, 6, 7, 10, 2, 8, 4]\n\n# Fun√ß√£o com dois argumentos.\ndef acumular(x, y):\n    return math.cos(x) + math.sin(y)\n\n# Somando math.cos(x) + math.sin(y),\n# iterando em l.\nfct.reduce(acumular, l)\n\n-0.07767677914843951"
  },
  {
    "objectID": "index.html#funcional-reduce-1",
    "href": "index.html#funcional-reduce-1",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Funcional reduce",
    "text": "Funcional reduce\n\nNo exemplo anterior, m√©todo reduce() substitui em acumular() os dois primeiro elementos de l na primeira itera√ß√£o, e nas demais substitui o resultado de acumular() e o pr√≥ximo termo da lista l."
  },
  {
    "objectID": "index.html#funcional-reduce-2",
    "href": "index.html#funcional-reduce-2",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Funcional reduce",
    "text": "Funcional reduce\n\nAbaixo segue como implementar a l√≥gica do funcional reduce. A fun√ß√£o meu_reduce() utiliza instru√ß√µes de loop para implementar o funcionamento l√≥gico do funcional reduce. Estude o c√≥digo:\n\n\nimport functools as fct\nimport math\n\n\nl = [1, 6, 7, 10, 2, 8, 4]\n\ndef acumular(x, y):\n    return math.cos(x) + math.sin(y)\n\ndef meu_reduce(f, x):\n\n    acumulando = f(x[0], x[1])\n\n    for i in x[2:]:\n        acumulando = f(acumulando, i)\n\n    return acumulando\n\nmeu_reduce(acumular, l)\n\n# O m√©todo reduce() √© computacionalmente\n# mais eficiente:\nfct.reduce(acumular, l)\n\n-0.07767677914843951\n-0.07767677914843951"
  },
  {
    "objectID": "index.html#fun√ß√µes-recursivas",
    "href": "index.html#fun√ß√µes-recursivas",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Fun√ß√µes recursivas",
    "text": "Fun√ß√µes recursivas"
  },
  {
    "objectID": "index.html#closures",
    "href": "index.html#closures",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Closures",
    "text": "Closures"
  },
  {
    "objectID": "index.html#fun√ß√µes-geradoras",
    "href": "index.html#fun√ß√µes-geradoras",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Fun√ß√µes geradoras",
    "text": "Fun√ß√µes geradoras"
  },
  {
    "objectID": "index.html#tratamento-de-erro",
    "href": "index.html#tratamento-de-erro",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Tratamento de erro",
    "text": "Tratamento de erro"
  },
  {
    "objectID": "index.html#decoradores",
    "href": "index.html#decoradores",
    "title": "Programa√ß√£o Estat√≠stica I (Python)",
    "section": "Decoradores",
    "text": "Decoradores\n\n\n\nDepartamento de Estat√≠stica da UFPB"
  }
]