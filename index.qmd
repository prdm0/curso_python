---
title: "Programa√ß√£o Estat√≠stica I (Python)"
author: "Prof. Dr. Pedro Rafael D. Marinho<br>Departamento de Estat√≠stica - UFPB<br>"
date: '`r Sys.Date()`'
format: 
  revealjs:
    theme: [default, style.scss]
    width: 1920
    height: 1080
    logo: "https://www.ufpb.br/de/contents/imagens/logode.png"
    footer: '<a href="https://www.ufpb.br/de">Departamento de Estat√≠stica da UFPB</a>'
    transition: slide
    background-transition: fade
    preview-links: auto
    slide-number: true
    chalkboard: true
    scrollable: true
    controls: true
    incremental: true  
    code-tools: true
    auto-stretch: true
    code-link: true
revealjs-plugins:
  - pointer
  - attribution
  - roughnotation
filters:
   - roughnotation
execute:
  refresh: true
  warning: false
  error: false
  eval: true
  echo: true
editor: 
  markdown: 
    wrap: 72
lang: pt
---

```{r}
#| echo: false
#| warning: false
#| eval: true

if(fs::dir_exists("index_files/"))
  fs::dir_delete("index_files/")
```

::: r-fit-text
Programa√ß√£o

Estat√≠stica I

Linguagem de Programa√ß√£o

[Python]{.flow}
:::

#  {.title}

::: r-fit-text
[Apresenta√ß√£o]{.flow}
:::

##  {background-image="https://raw.githubusercontent.com/prdm0/imagens/main/eu.jpg" background-size="contain" background-position="left"}

::: columns
::: {.column width="40%"}
:::

::: {.column width="60%"}
## Sobre mim {.r-fit-text}

<br> <br>

-   Me chamo [Prof. Dr. Pedro Rafael D.
    Marinho](https://prdm.netlify.app/about_pt_br.html){preview-link="true"}.
    Meu curr√≠culo Lattes poder√° ser acessado clicando
    [aqui](http://lattes.cnpq.br/7185368598935272){preview-link="true"}.

-   Sou docente do Departamento de Estat√≠stica da UFPB. üë®‚Äçüè´

-   Toda minha forma√ß√£o acad√™mica √© na √°rea de estat√≠stica (bacharelado
    ao doutorado).

-   Tenho entusiasmo por programa√ß√£o, ci√™ncia de dados e aprendizagem de
    m√°quina üíªüìà.

-   `r fontawesome::fa("github", "black")` Me acompanhe no GitHub:
    <https://github.com/prdm0>.

-   `r fontawesome::fa("linkedin", "black")` Me acompanhe no Linkedin:
    <https://www.linkedin.com/in/prdm0/>.
:::
:::

# O Departamento {.title}

## Meu segundo lar {.r-fit-text background-color="black" background-image="https://raw.githubusercontent.com/prdm0/imagens/main/foto_aerea_ufpb.jpeg" background-size="1600px" background-repeat="repeat" background-opacity="0.35"}

```{r eval=require('leaflet'), width = 100, height = 100, echo = FALSE, fig.cap="Departamento de Estat√≠stica da UFPB."}
library(leaflet)
leaflet() |>
  addMarkers(-34.846199, -7.140400) |>
  leaflet::addTiles() |>
  setView(
  -34.846199, -7.140400, zoom = 37,
  options = popupOptions(
    minWidth = 1600,
    maxWidth = 1500
  ))
```

#  {.title}

::: r-fit-text
[Por que Python?]{.flow}
:::

## `r fontawesome::fa("python", "black")` Python

<br>

Alguns motivos de se considerar python:

<br>

1.  Python √© [Open
    Source](https://pt.wikipedia.org/wiki/Software_de_c%C3%B3digo_aberto);
2.  Python √© uma linguagem de programa√ß√£o de prop√≥sito geral;
3.  Python √© amplamente utilizada nas √°reas de ci√™ncia de dados a
    aprendizagem de m√°quina;
4.  Python √© uma linguagem muito f√°cil de se aprender, possuindo apenas
    **35 palavras reservadas**. Por√©m, √© claro que muitas outas coisas
    dever√£o ser aprendidas. Para se fazer ci√™ncia de dados, por exemplo,
    voc√™ precisar√° estudar algumas bibliotecas;
5.  Python te obrigra organizar minimamente o c√≥digo, por meio de um
    sistema de indenta√ß√£o;
6.  [Por ser uma linguagem muito utilizada, Python far√° com que voc√™
    converse sobre ci√™ncia de dados com muitas pessoas. Aprender Python
    ser√° algo importante para o seu curr√≠culo e abrir√° oportunidades de
    emprego]{.red}.

## `r fontawesome::fa("python", "black")` Python

<br>

Python possui um n√∫mero de palavras reservadas muito pequeno, o que
facilita o aprendizado. Voc√™ poder√° obter a lista das palavras
reservadas fazendo:

<br>

```{python}
import keyword

# Lista com palavras reservadas
palavras_reservadas = keyword.kwlist

# Palavras reservadas em Python
print(palavras_reservadas)
len(palavras_reservadas)
```

## Origem {background-image="https://gvanrossum.github.io/images/guido-headshot-2019.jpg" background-size="contain" background-position="right"}

::: columns
::: {.column width="37%"}
-   A linguagem Python foi desenvolvida em 1991 pelo matem√°tico e
    progamador holand√™s [Guido van
    Rossum](https://pt.wikipedia.org/wiki/Guido_van_Rossum).

-   Guido van Rossum estudou matem√°tica na Universidade de Amsterd√£.

-   Na comunidade ele √© conhecido como "**Benevolent Dictator for
    Life**" - "**Ditador Benevolente Vital√≠cio**" e sempre ditou a
    palavra final dos rumos da linguagem. Por√©m, em 2018 ele anunciou
    que estaria se afastando desta fun√ß√£o.

-   Python atualmente √© desenvolvida de forma comunit√°ria pela funda√ß√£o
    sem fins lucrativos denominada de [Python Software
    Foundation](https://www.python.org/psf-landing/).
:::

::: {.column width="63%"}
:::
:::

## Origem do nome {background-image="imgs/monty_python_outra.jpg" background-position="left" background-size="contain" background-opacity="0.10"}

<br>

::: columns
::: {.column width="50%"}
Guido come√ßou a tarbalhar no projeto da linguagem em Dezembro 1989 ainda
quando estudava na Universidade de Amsterd√£. J√°, o primeiro lan√ßamento
p√∫blico da linguagem ocorreu em Fevereiro de 1991, quando a vers√£o 0.9.0
foi lan√ßada na [Usenet](https://pt.wikipedia.org/wiki/Usenet).

<br>

O nome **Python** foi escolhido por Guido van Rossum, criador da
linguagem, como uma homenagem ao grupo de com√©dia brit√¢nico [Monty
Python](https://pt.wikipedia.org/wiki/Monty_Python). Ele estava
procurando um nome que fosse curto, simples e f√°cil de digitar, e que
n√£o estivesse sendo usado por outra linguagem de programa√ß√£o. Ele tamb√©m
queria que o nome fosse algo relacionado √† com√©dia, pois ele achava que
a programa√ß√£o deveria ser divertida e n√£o apenas uma tarefa chata.
:::

::: {.column width="50%"}
![Monty Python - grupo de com√©dia brit√¢nico criador do Monty Python's
Flying Circus, que foi ao ar pela primeira vez em Outubro de
1969.](imgs/monty_python.jpg){width="70%"}
:::
:::

#  {.title}

::: r-fit-text
[A disciplina]{.flow}
:::

## `r fontawesome::fa("youtube", "black")` Mais detalhes {background-image="https://raw.githubusercontent.com/prdm0/imagens/main/coffe.jpg" background-position="right" background-size="contain"}

<br>

::: columns
::: {.column width="70%"}
A entrevista [#334](https://www.youtube.com/@lexfridman) ao canal do
[Lex Fridman](https://pt.wikipedia.org/wiki/Lex_Fridman) foi com o Guido
van Russon, onde eles conversam sobre Python e o futuro da programa√ß√£o.
:::

::: {.column width="30%"}
:::
:::

<br>

{{< video https://www.youtube.com/watch?v=-DVyjdw4t9I&t=7169s width="50%" height="50%" >}}

##  {background-image="https://raw.githubusercontent.com/prdm0/imagens/main/yello_coffee_computer.jpg" background-size="contain" background-position="left"}

<br><br>

::: columns
::: {.column width="40%"}
:::

::: {.column width="60%"}
[Para quem √© destinado o curso?]{.red}:

<br>

> O curso √© destinado para pessoas que nunca tiveram contato com
> programa√ß√£o, como tamb√©m para pessoas que j√° programam em outras
> linguagens.

<br>

O andamento que ser√° listado corresponde t√£o somente √† uma vis√£o geral
da disciplina. Trata-se de apenas um **resumo** para que voc√™ possa
entender qual ser√° a din√¢mica do curso. A inclus√£o de novos assuntos
poder√£o ocorrer de acordo com o avan√ßo da turma (com base no perfil
m√©dio que empiricamente irei observando).
:::
:::

## `r fontawesome::fa("person-walking", "black")` Andamento do curso

<br> O curso come√ßar√° do b√°sico, por√©m, seguir√° para conceitos mais
avan√ßados da linguagem.

<br>

-   [Primeira parte]{.red}: o enfoque ser√° a linguagem **Python**, sem
    discuss√µes sobre bibliotecas externas. Abordaremos temas como
    cria√ß√£o de [ambiente virtuais]{.orange}, [tipo de dados]{.orange},
    [estruturas de dados]{.orange}, [opera√ß√µes matem√°ticas]{.orange}
    b√°sicas, manipula√ß√£o de [strings]{.orange}, estruturas de [controle
    de fluxo]{.orange}, [la√ßos]{.orange}, [listas
    compreensivas]{.orange}, defini√ß√£o de [fun√ß√µes]{.orange}, [fun√ß√£o
    lambda]{.orange}, [fun√ß√µes varargs]{.orange}, [closures]{.orange} e
    [m√≥dulos]{.orange}.

<br>

-   [Segunda parte]{.red}: exploraremos outros conceitos mais avan√ßados
    da linguagem. Ser√° abordado [orienta√ß√£o √† objeto]{.orange} (classes,
    heran√ßas, heran√ßas m√∫ltiplas e polimorfismo), alguns aspectos de
    [programa√ß√£o funcional]{.orange}, [fun√ß√µes geradoras]{.orange} e
    [tratamento de erros]{.orange}. Tamb√©m abordaremos as bibliotecas
    [numpy](https://numpy.org), [scipy](https://scipy.org) e
    [pandas](https://pandas.pydata.org), muito √∫teis para ci√™ncia de
    dados.

##  {background-image="https://raw.githubusercontent.com/prdm0/imagens/main/yello_coffee_computer.jpg" background-size="contain" background-position="right"}

::: columns
::: {.column width="70%"}
### Andamento do curso `r fontawesome::fa("person-walking", "black")`

<br>

Como foi dito, o curso come√ßar√° do b√°sico, por√©m, seguir√° para conceitos
mais avan√ßados da linguagem.

<br>

-   [Terceira]{.red}: na √∫ltima parte do curso, nosso enfoque recair√°
    sobre Sistemas de Gerenciamento de Banco de Dados - [SGBD]{.orange},
    em especial o [DuckDB](https://duckdb.org), na constru√ß√£o de
    [gr√°ficos]{.orange} usando a biblioteca
    [seaborn](https://seaborn.pydata.org) e na [constru√ß√£o de
    bibliotecas]{.orange} em Python.
:::

::: {.column width="30%"}
:::
:::

## Bibliotecas Computacionais

::: r-stack
![](imgs/python_logo.svg){.fragment width="900" height="900"}

![](imgs/numpy_logo.svg){.fragment width="900" height="800"}

![](imgs/pandas_logo.svg){.fragment width="900" height="900"}
![](imgs/seaborn_logo.svg){.fragment width="400" height="400"}
![](imgs/duckdb_logo.png){.fragment width="420" height="150"}

![](imgs/scipy_logo.svg){.fragment width="350" height="350"}

![](imgs/regex_logo.png){.fragment width="600" height="300"}
:::

#  {.title}

::: r-fit-text
[Como estudar?]{.flow}
:::

## Devo apenas seguir os slides?

<br>

### [Tenho duas respostas que se complementam]{.red}:

<br>

-   `r fontawesome::fa("thumbs-up", "black")` Para estudar os exemplos e
    fazer os exerc√≠cios que ir√£o aparecer com o andamento do curso. No
    decorrer da disciplina, [**exemplos**]{.orange} e
    [**exerc√≠cios**]{.orange} ir√£o aparecer de forma intensa e ser√° por
    meio desses slides que voc√™ dever√° consultar os exerc√≠cios para
    praticar.

<br>

-   `r fontawesome::fa("triangle-exclamation", "black")` Nos slides ir√£o
    tamb√©m aparecer como exerc√≠cios, a leitura de cap√≠tulos de
    [**livros**]{.orange}, [**materiais**]{.orange} e
    [**documenta√ß√µes**]{.orange}. Esses tamb√©m ser√£o considerados nas
    avalia√ß√µes, portanto, por favor, n√£o os negligencies.

<br>

Em resumo, voc√™ dever√° seguir os slides, mas deve atentar-se aos
exerc√≠cios com indica√ß√£o de leituras. Nessas leituras voc√™s ir√£o
encontrar explica√ß√µes mais "conversadas" que te dar√° mais conhecimento
te√≥rico sobre os temas abordados.

## Refer√™ncias bibliogr√°ficas {background-image="https://raw.githubusercontent.com/prdm0/imagens/main/livros.jpg" background-size="contain" background-position="right"}

<br>

::: columns
::: {.column width="60%"}
No nosso curso, al√©m desses slides, iremos utilizar as seguintes
refer√™ncias. Como dito anteriormente, atente-se aos exerc√≠cios que far√£o
indica√ß√£o de leitura.

-   `r fontawesome::fa("python", "black")` A documenta√ß√£o oficial da
    linguagem √© um dos melhores materiais que voc√™ ir√° encontar para
    aprender Python <https://docs.python.org/pt-br/3/> e est√° dispon√≠vel
    em diversos idiomas. Poucas linguagens possue uma documenta√ß√£o
    robusta e did√°tica quanto Python!

<br>

-   `r fontawesome::fa("book", "black")` O livro [**Pense em
    Python**](https://pense-python.caravela.club/introducao.html) √© um
    √≥timo material que √© disponibilizado graduitamente. Tamb√©m √©
    poss√≠vel comprar o livro f√≠sico. Pense em Python √© uma tradu√ß√£o do
    livro **Think Python** (2¬™ edi√ß√£o), de Allen B. Downey, traduzido e
    publicado no Brasil pela Editora Novatec sob licen√ßa da O'Reilly
    Media.
:::

::: {.column width="40%"}
:::
:::

## Refer√™ncias bibliogr√°ficas {.title}

<br> <br>

::: r-stack
![](imgs/referencia_03.png){.fragment width="600" height="600"}
![](imgs/referencia_02.png){.fragment width="400" height="600"}
![](imgs/referencia_01.png){.fragment width="850" height="600"}
:::

#  {.title}

::: r-fit-text
[Outras Informa√ß√µes]{.flow}
:::

## Outras informa√ß√µes {background-image="imgs/rawpixel/image-from-rawpixel-id-429735.jpg" background-size="contain" background-position="right"}

::: columns
::: {.column width="50%"}
<br>

1.  Prezado discente, **esteja sempre atento ao**
    [SIGAA](https://sigaa.ufpb.br/sigaa/logon.jsf). Isso √© sua
    obriga√ß√£o. Eventualmente poderei cadastrar not√≠cias que s√£o de vital
    import√¢ncia para voc√™s. Por exemplo, poderei alterar as datas das
    avalia√ß√µes. Se a informa√ß√£o estiver nos sistemas oficiais da
    institui√ß√£o, voc√™ ser√° o respons√°vel por conhec√™-la;

2.  No SIGAA voc√™ ter√° acesso ao plano de curso;

3.  No SIGAA encontra-se registradas as datas da respectivas avalia√ß√µes:
    primeira, segunda e terceira avalia√ß√£o, al√©m da reposi√ß√£o e prova
    final.

4.  Segundo a **Resolu√ß√£o** [N¬∫
    29/2020](https://www.ufpb.br/aci/contents/documentos/resolucoes/REGULAMENTOGERALDAGRADUAO292020.pdf/@@download/file/REGULAMENTOGERALDAGRADUAO292020.pdf)
    do CONSEPE UFPB voc√™ ter√° direito em repor, independentemente do
    motivo, uma das tr√™s avalia√ß√µes. **Mas ser√° apenas uma**!
:::

::: {.column width="50%"}
:::
:::

#  {.title background-image="imgs/rawpixel/freight.jpg"}

::: r-fit-text
[Bem vindo a jornada de Python]{.flow}
:::

## Git e GitHub

-   Em dias atuais, em que vivemos programando e constantemente
    produzindo c√≥digos de programa√ß√£o para analisar dados e/ou
    automatizar tarefas do nosso dia a dia, ter uma forma de versionar
    c√≥digo √© fundamental. O `r fontawesome::fa("git", fill = "black")` -
    **git** e `r fontawesome::fa("github", fill = "black")` - **GitHub**
    ser√£o um dos seus maiores parceiros na programa√ß√£o.

<br>

::: r-stack
![](imgs/logo_git.png){.fragment width="700" height="330"}
![](imgs/logo_github.png){.fragment width="600" height="350"}
:::

## Git e GitHub {background-image="imgs/Clouds.jpg"}

<br>

::: fragment
N√£o negligencie o aprendizado dessas ferramentas. Por exemplo, √© por
meio do GitHub que muitos programadores interagem, funcionando inclusive
como uma rede social de programadores.
:::

<br>

::: fragment
[**Por onde aprender utilizar o Git e GitHub?**]{.red}
:::

<br>

::: fragment
`r fontawesome::fa("note-sticky", "black")` Bem, h√° diversos materiais
na internet, mas coloco aqui tr√™s v√≠deo aulas que criei para discente de
uma outra disciplina que lecionei no departamento. Com esses tr√™s v√≠deos
voc√™ conseguir√° dar seus passos e colocar o Git e GitHub em sua rotina
di√°ria de programa√ß√£o.

<br>

Por exemplo, essa apresenta√ß√£o econtar-se no meu GitHub
<https://github.com/prdm0>. Inclusive foi no GitHub que hospedei o HTML
e demais arquivos dessa apresenta√ß√£o para que voc√™s pudessem acessar o
conte√∫do por um simples link. Legal, n√£o?
`r fontawesome::fa("lightbulb", "black")`
:::

## Aulas de Git e GitHub {background-image="imgs/rawpixel/bunch-balloons.jpg" background-size="contain" background-position="right"}

<br>

::: columns
::: {.column width="50%"}
[**Exerc√≠cio**]{.red}: voc√™ dever√° assistir as tr√™s v√≠deo aulas abaixo.
Com elas voc√™ poder√° dar os primeiros passos no uso do **Git** e
**GitHub**:
:::

::: {.column width="50%"}
:::
:::

<br>

{{< video https://youtu.be/O9rHwmh_kv0 width="20%" height="20%" >}} {{< video https://youtu.be/Lgc2DdoZgsk width="20%" height="20%" >}}  {{< video https://youtu.be/hMWGZ8fAbg4 width="20%" height="20%" >}}

## `r fontawesome::fa("linux", "black")` Use Linux

Voc√™ n√£o √© obrigado, para cursar essa disciplina, utilizar utilizar
alguma distribui√ß√£o GNU/Linux. Todavia existem diversas vantagens em
utilizar. Enumero algumas logo abaixo:

<br>

1.  Utilizar um novo sistema operacional ser√° importante para o seu
    portfolio. Em alguma empresa que eventualmente voc√™ venha trabalhar,
    pode ser que o uso do Linux seja o padr√£o.
    `r fontawesome::fa("lightbulb", "black")`

2.  O Linux √© [Open
    Source](https://pt.wikipedia.org/wiki/Software_de_c%C3%B3digo_aberto).
    Isso quer dizer que al√©m de ser de gra√ßa, o seu c√≥digo fonte √©
    aberto. D√™ prefer√™ncia ao uso de ferramentas open source. **D√™
    prefer√™ncia √† liberdade** e quebre as algemas! üéâ

3.  √â f√°cil manter todo o sistema e seus programas atualizados. Ao inv√™s
    de atualizar cada programa voc√™ poder√° atualizar tudo de uma √∫nica
    vez.

4.  Ao contr√°rio do que muitas pessoas dizem, usar Linux √© muito f√°cil.
    Atualmente h√° diversos ambientes gr√°ficos com v√°rias op√ß√µes para
    voc√™ clicar e configurar o seu sistema. Alguma dessas interfaces
    poder√° cair no seu gosto.

5.  Quando voc√™ virar um programador, em algum momento voc√™ ir√° utilizar
    sistemas que s√£o hospedados na nuvem. Muito provavelmente voc√™ ir√°
    hospedar uma aplica√ß√£o ou ir√° simplesmente utilizar o poder
    computacional de uma m√°quina em algum servidor. Muito provavelmente
    o que voc√™ encontrar√° √© um sistema operacional com kernel Linux
    `r fontawesome::fa("linux", "black")`.

#  {.title}

::: r-fit-text
Quer conhecer mais

sobre [Linux]{.flow}?
:::

## `r fontawesome::fa("linux", "black")` Use Linux {background-image="imgs/logo_livro.png" background-position="right" background-size="contain"}

<br>

::: columns
::: {.column width="50%"}
[**Exerc√≠cio**]{.red}: Leia o [**Cap√≠tulo
2**](https://prdm0.github.io/aulas_computacional/sistemas-gnulinux.html)
do meu material da disciplina de **Estat√≠stica Computacional**.

<br>

Assim termino a minha tentativa de evangeliza√ß√£o sobre o Linux.

<br>

![Esse √© o Tux, o marcote do Linux. Meigo, feliz e
saciado!](imgs/python-tux.png){width="300"}
:::

::: {.column width="50%"}
:::
:::

## IDE para programar {background-image="imgs/Clouds2.jpg"}

<br>

Existem diversas op√ß√µes para de **Integrated Development Environment** -
IDE para se programar em Python. Enumero algumas que acho que voc√™
poder√° explorar e depois escolher. √â quest√£o de gosto e voc√™ precisa
experimentar para poder escolher.

<br>

1.  [Visual Studio Code - VSCode](https://code.visualstudio.com): IDE
    Open Source desenvolvida pela Microsoft e que est√° dispon√≠vel para
    m√∫ltiplas plataformas.
2.  [PyCharm](https://www.jetbrains.com/pt-br/pycharm/download/#section=linux):
    IDE paga, mas que possui uma vers√£o gratuita. Acho muito pesada.
    Particularmente n√£o gosto muito.
3.  [Spyder](https://www.spyder-ide.org): IDE Open Source que √© legal,
    mas prefiro o VSCode.
4.  [RStudio](https://posit.co/products/open-source/rstudio/): Sim, √©
    poss√≠vel programar em Python no RStudio. Interessante se voc√™ deseja
    integrar c√≥digos R com c√≥digos em Python, por meio da biblioteca
    [reticulate](https://rstudio.github.io/reticulate/).
5.  [JupyterLab](https://jupyter.org): √© o mais recente ambiente de
    desenvolvimento interativo baseado na Web para notebooks, c√≥digo e
    dados. √â legal se voc√™ deseja mesclar textos e c√≥digo. √ötil para
    documentar um fluxo de an√°lise de dados, por exemplo.

## RStudio = Python e R juntos = `r fontawesome::fa("python", fill = "black")` + `r fontawesome::fa("r-project", fill = "black")` = ‚ù§Ô∏è

<br>

![](videos/usando_reticulate.webm){width="80%"}

## JupyterLab

<br>

::: fragment
Para instalar o Jupyter notebook ou o JupyterLab, uma vers√£o mais
recente do Jupyter, voc√™ antes precisa ter instalado no seu sistema
operacional o [Python Package Index - PyPi](https://pypi.org).

<br>

O [PyPi](https://pypi.org) √© um reposit√≥rio oficial de bibliotecas para
Python. √â an√°logo ao **Comprehensive R Archive Network - CRAN** do R. Ao
contr√°rio do R, onde voc√™ instala as bibliotecas dentro da se√ß√£o R, o
PyPi voc√™ executa no terminal de linha de comando do seu sistema
operacional, isto √©, fora da se√ß√£o Python.
:::

<br>

::: fragment
No seu termial Bash (terminal do Linux), voc√™ dever√° fazer:

<br>

``` bash
# Verificando a vers√£o do pip instalada.
pip --version

# Instalando um sofware/biblioteca dispon√≠vel
# nos reposit√≥rios do PyPi. Esse exemplo,
# instanado o jupyter-lab
pip install -U jupyter-lab
```
:::

## JupyterLab

Para executar uma inst√¢ncia do JupyterLab, execute o comando abaixo no
terminal do seu sistema GNU/Linux:

<br>

``` bash
jupyter-lab &!
```

<br>

A par√¢metro `&!` executa o programa, no caso o [JupyterLab]{.red}, em
segundo plano, ou seja, a se√ß√£o do terminal do Linux ficar√° desocupada
para rodar outros comandos [Shell
Script](https://pt.wikipedia.org/wiki/Shell_script). Mas, voc√™ poderia
rodar o comando assim sem especificar o `&!`.

<br>

::: fragment
![](videos/usando_jupyterlab.webm){width="60%"}
:::

## JupyterLab {background-image="imgs/rawpixel/lesson-time_02.jpg" background-size="contain" background-position="right"}

<br>

::: columns
::: {.column width="50%"}
::: fragment
A extens√£o dos notebooks √© `.ipynb`, em que, `ipy` faz alus√£o ao
interpretador de python padr√£o que √© utilizado no Jupyter que √© o
[IPython](https://pt.wikipedia.org/wiki/IPython) e o `nb` refere-se √†
notebook. Notebooks s√£o arquivos em que voc√™ ir√° misturar texto com
c√≥digo. O legal √© que se voc√™ conhece os comandos de marca√ß√£o do
Markdown, voc√™ poder√° utiliz√°-los para a constru√ß√£o de um texto
consistente.
:::

<br>

::: fragment
Al√©m disso, √© poss√≠vel utilizar a sintaxe do $\LaTeX$ para inclus√£o de
f√≥rmulas e nota√ß√µes matem√°ticas.

<br>

N√£o sabe $\LaTeX$?
[Aqui](https://www.if.ufrj.br/~sandra/MetComp/doc/latex.pdf) est√° um
√≥timo material para voc√™ se debru√ßar. √â f√°cil. Aprenda!
:::
:::

::: {.column width="50%"}
:::
:::

## JupyterLab e Markdown `r fontawesome::fa("markdown", "black")`

<br>

::: fragment
Alguns comandos √∫teis do Markdown
`r fontawesome::fa("markdown", "black")` voc√™ poder√° encontrar clicando
[aqui](https://paperhive.org/help/markdown).

<br>

Dependendo do tutorial de Markdown que voc√™ possa estar utilizando, pode
ser que algum c√≥digo funcione de forma um pouco diferente. Por exemplo,
a sintaxe de Markdown para usar na biblioteca
[Quarto](https://quarto.org) poder√° n√£o ir√° funcionar, em seus aspectos
mais rebuscados, no JupyterLab.
:::

<br>

::: fragment
Em falando em **Quarto** \<<https://quarto.org>\>, aproveito para deixar
a dica para que voc√™s venham estudar e dominar. Ele permitir√° que voc√™
possa construir relat√≥rios autom√°ticos din√¢micos em Python, R, Julia e
Observable. Por exemplo, essa apresenta√ß√£o foi constru√≠da em Quarto. H√°
no site do Quarto um tutorial b√°sico de Markdown
\<<https://quarto.org/docs/authoring/markdown-basics.html>\>.
[Lembre-se]{.orange}: Alguns comandos de Makdown que funciona no Quarto
pode n√£o funcionar no JupyterLab.

<br>

**Aten√ß√£o**: JupyterLab e Quarto s√£o duas coisas bem distintas. A √∫nica
semelhan√ßa √© que ambos permitem que voc√™ utilizem c√≥digos Markdown para
a produ√ß√£o de textos formatados. Por favor, n√£o confunda!
:::

## JupyterLab e Markdown `r fontawesome::fa("markdown", "black")`

<br>

**Exerc√≠cio**: Salve o [c√≥digo](codigos/exemplo_jupyter_markdown.ipynb)
no arquivo `exemplo_juptylab.ipynb` e importe-o no JupyterLab. Voc√™ j√°
sabe como chamar o JupyterLab! Procure entender e memorizar os comandos
que foram utilizados para a forma√ß√£o do texto, ou seja, os comandos de
Markdown utilizados.

<br>

::: fragment
Caso voc√™ abra o c√≥digo em um editor de texto, voc√™ ver√° um c√≥digo que a
primeira vista pode ser estranho para voc√™. Relaxe, esse √© o c√≥digo que
por tr√°s, sem voc√™ ver, √© salvo no arquivo `.ipynb`. O que voc√™ ver√° ao
utilizar o JupyterLab s√£o as informa√ß√µes importadas l√° no ambiente. √â
uma visualiza√ß√£o muito mais palat√°vel.
:::

<br>

::: fragment
Na verdade, o c√≥digo que √© salvo na extens√£o `.ipynb` √© um c√≥digo que
tamb√©m √© f√°cil de se entender. Trata-se de um c√≥digo [JavaScript Object
Notation - JSON](https://pt.wikipedia.org/wiki/JSON). Esse formato √©
muito comum em APIs, sendo esta uma forma de comunica√ß√£o entre sistemas.

<br>

Muitos dados n√£o s√£o dispon√≠veis em arquivos **CSV**, **XLS**, **XLSX**
e est√£o dispon√≠veis em uma API, onde a informa√ß√£o s√£o lidas de arquivos
no formado **JSON**. Na verdade essa √© a forma mais consistente e
elegante de ler dados. Se os dados que precisa ler est√° dispon√≠vel em
uma API, voc√™ est√° em uma situa√ß√£o confort√°vel.
:::

## JupyterLab e Markdown `r fontawesome::fa("markdown", "black")`

<br>

![Imagem do JupyterLab ao importar o arquivo `exemplo_juptylab.ipynb`.
Esse bem formatado que mistura c√≥digos Python √© a forma que voc√™ ver√° o
conte√∫do JSON do arquivo `.ipynb`](imgs/jupyterlab_markdown.png)

## Visual Studio Code - VSCode

<br>

No VSCode tamb√©m √© poss√≠vel trabalhar com arquivos com extens√£o
`.ipynb`. Do mesmo modo que no JupyterLab, no VSCode baste criar um
arquivo com a extens√£o `.ipynb` e come√ßar a trabalhar com c√≥digo
Markdown e seu c√≥digo Python.

<br>

::: fragment
![Imagem do VSCode executando o arquivo `exemplo_juptylab.ipynb` do
exerc√≠cio anterior. Experimente voc√™ tamb√©m editar arquivos `.ipynb` no
VSCode.](imgs/vscode_markdown.png)
:::

## Opini√£o pessoal {background-image="imgs/rawpixel/blue-balloon-side_01.jpg" background-size="contain" background-position="right"}

<br>

::: columns
::: {.column width="60%"}
Voc√™ n√£o perguntou, mas como a aula √© minha, vou responder. üòÖ

<br>

> O que eu prefiro para programar em Python? Ouvi essa pergunta?! Bem,
> entre todos os ambientes de desenvolvimento que mencionei, prefiro o
> VSCode.

<br>

[Meus motivos s√£o]{.red}:

<br>

1.  √â Open Source e h√° uma comunidade muito ativa que mant√™m plugins
    interessantes para ele;
2.  Como dito no item acima, h√° diversos plugins/extens√µes que s√£o
    dispon√≠veis para ele e que ajuda o progamador em sua produtividade;
3.  Acho ele bem construido e me lembra editores antigos como Atom que
    gostava muito;
4.  Empresas como a Posit Ltda desenvolve produtos, a exemplo do [Posit
    Workbench](https://posit.co/products/enterprise/workbench/) em que √©
    poss√≠vel vincular o VSCode e trabalhar com R e Python no VSCode;
5.  Muitas vezes prefiro trabalhar diretamente com arquivios `.py`, ou
    seja, com o script python para que eu possa executar no
    interpretador iterativo ou chamar fun√ß√µes por linha de comando no
    [shell bash](https://pt.wikipedia.org/wiki/Bash).

<br>

::: fragment
√â uma quest√£o de gosto, e est√° tudo bem se voc√™ preferir um outro editor
de c√≥digo e/ou IDE de programa√ß√£o. Apenas saiba que na hora de construir
algo maior, como um pacote ou um programa sofisticado, voc√™ precisar√° de
arquivos `.py` e n√£o arquivos `.ipynb`.

<br>

E repito. Arquivos `.ipynb` s√£o legais, por exemplo, para documentar um
fluxo de trabalho de analise de dados. Como tamb√©m consigo trabalhar com
notebooks em VSCode, me sinto bem servido.
:::
:::

::: {.column width="40%"}
:::
:::

##  {background="imgs/rawpixel/raw_pixel_01.jpg" background-position="left" background-size="contain"}

::: columns
::: {.column width="\"50%"}
:::

::: {.column width="50%"}
### Python √© uma linguagem interpretada

<br>

![A imagem acima descreve o processo de interpreta√ß√£o do c√≥digo Python.
A implementa√ß√£o padr√£o do interpretador de Python √©
CPython](imgs/compilacao_codigo_python.png){width="100%"}

[CPython](https://pt.wikipedia.org/wiki/CPython) o interpretador de
Python mais comumente usado e √© o interpretador padr√£o para a linguagem
Python. Ele pode ser usado para executar c√≥digo Python em muitos
sistemas operacionais diferentes, incluindo Windows, macOS e Linux. Al√©m
disso, ele √© open source, o que significa que o c√≥digo fonte est√°
dispon√≠vel para qualquer pessoa ver ou modificar.

<br>

O nome √© **C**Python pelo fato do interpretador ter sido escrito
utilizando a linguagem
[C](https://pt.wikipedia.org/wiki/C_(linguagem_de_programa%C3%A7%C3%A3o)).
:::
:::

## Interpretador {background="imgs/rawpixel/raw_pixel_01.jpg" background-position="right" background-size="contain"}

<br>

::: columns
::: {.column width="60%"}
<br>

Perceba que no processo de interpreta√ß√£o de Python, um bytecode (c√≥digo
de m√°quina) √© gerado e que posteriormente √© interpretado pela **Python
Virtual Machine - PVM**. √â algo semelhante que ocorre em Java, por√©m l√°
o processo √© considerado uma compila√ß√£o, pois todo o c√≥digo √© compilado
de uma √∫nica vez, al√©m de haver diversas otimiza√ß√µes internas no
processo de convers√£o.

<br>

Em Python, a compila√ß√£o ocorre linha por linha e logo ap√≥s a
interpreta√ß√£o do peda√ßo do c√≥digo compilado ocorre. Em outras palavras,
todo esse processo ocorre de forma din√¢mica durante a execu√ß√£o do
programa.

<br>

[Seu processador n√£o entende c√≥digo Python ou de qualquer outra
linguagem. Seu processador s√≥ entende c√≥digo de m√°quina!]{.red}
:::

::: {.column width="\"40%"}
:::
:::

## Implementa√ß√µes Alternativas

<br>

**Existem diversas implementa√ß√µes alternativas de Python**

<br>

1.  [CPython]{.red}: Implementa√ß√£o original da linguagem escrita em C. √â
    nessa implementa√ß√£o que novas funcionalidade ir√£o aparecer primeiro;

2.  [PyPy]{.red}: este √© um interpretador de Python alternativo que usa
    uma implementa√ß√£o diferente da linguagem e pode ser mais r√°pido que
    o CPython em alguns casos;

3.  [IronPython]{.red}: este √© um interpretador de Python para .NET, que
    permite que voc√™ use Python em aplicativos .NET e no ambiente de
    desenvolvimento Visual Studio;

4.  [Jython]{.red}: este √© um interpretador de Python escrito em Java,
    que permite que voc√™ use Python em aplicativos Java e integre Python
    e Java em seus projetos;

5.  [MicroPython]{.red}: este √© um interpretador de Python para
    dispositivos embarcados, o que significa que ele pode ser usado em
    microcontroladores e outros dispositivos de baixo poder de
    processamento.

**Aten√ß√£o**: iremos sempre utilizar o [CPython]{.red}, que √© a
implementa√ß√£o padr√£o da linguagem. Encare as demais implementa√ß√µes como
informa√ß√£o adicional para o seu disco que armazena conhecimentos üß†.

## C√≥digo compilado de Python `r fontawesome::fa("python", "black")`

<br>

Antes de tudo, deixa eu te dizer que voc√™ pode executar o c√≥digo Python
usando o interpretador de Python que vem dispon√≠vel em algumas IDE's que
foram apresentadas, ou seja, na IDE de sua escolha, voc√™ ir√° criar o
arquivo Python e com algum atalho ir√° executar o c√≥digo escrito no
arquivo `.py` no console/interpretador utilizado pela IDE.

<br>

A outra forma √© executando o script em algum terminal, fora de alguma
IDE. Por exemplo, suponha que em algum diret√≥rio voc√™ teinha um c√≥digo
Python que deseja executar fora de uma IDE. Por exemplo, suponha que
tenho o arquivo `soma.py` no diret√≥rio `/home/prdm0/Downloads`. N√£o
precisa agora entender o c√≥digo. Apenas saiba que a fun√ß√£o soma ir√°
somar uma lista de valores passados.

``` python
import py_compile
import sys

def soma(*args):
  lista = map(lambda x: float(args[x]), range(len(args)))
  print(f"A soma √© {sum(lista)}")

soma(*sys.argv[1:])

py_compile.compile(
  file="/home/prdm0/Downloads/soma.py",
  cfile="/home/prdm0/Downloads/soma.pyc"
)
```

<br>

Ao executar o arquivo, o diret√≥rio `/home/prdm0/Downloads/` ser√° criado
o arquivo `soma.pyc` um c√≥digo bin√°rio.

## C√≥digo compilado de Python `r fontawesome::fa("python", "black")`

<br>

Agora no terminal do seu sistema, basta executarmos o arquivo
`soma.pyc`:

<br>

``` bash
# Rode no terminal shell, onde √© poss√≠vel invocar o Python:
python /home/prdm0/soma.pyc 1.7 2.3 3.0
```

<br>

Voc√™ ter√° como retorno, o valor `7`.

<br>

::: fragment
Note que no c√≥digo, os valores **1.7**, **2.3** e **3.0** foram passados
para a fun√ß√£o pela lista `sys.argv` e esses valores s√£o passados como
string, isto √©, s√£o do tipo `str`. Por isso que o c√≥digo teve a
preocupa√ß√£o em converter as informa√ß√µes para o tipo `float` (veja a
linha 5 do c√≥digo).

<br>

Se o c√≥digo te parece estranho, n√£o se preocupe. Com o avan√ßo do curso
os conceitos ir√£o clereando. Apenas entenda que √© poss√≠vel passar
argumentos para fun√ß√µes em script `.py` via terminal usando a lista
`argv` do m√≥dulo `sys`.
:::

## Utilizando shebang `#!` `r fontawesome::fa("python", "black")`

O shebang, denotado por `#!`, √© uma instru√ß√£o no in√≠cio de um arquivo de
script que informa ao sistema operacional qual interpretador deve ser
usado para executar o script.

<br>

Voc√™ pode usar o shebang para executar scripts Python na linha de
comando, desde que o interpretador Python esteja instalado no seu
sistema, claro!

<br>

::: fragment
[Exemplo]{.red}: Construa o arquivo `shebang_cumprimento.py`, de tal
modo que o conte√∫do do arquivo seja:

<br>

``` python
#!/usr/bin/env python

# Definindo uma fun√ß√£o qualquer em Python.
def cumprimento(cump = "Ol√° pessoa"):
  print(f"{cump}, bem vindo ao curso de Python!")

# Executando a fun√ß√£o cumprimento() definida logo acima:
cumprimento()
```

<br>

Podemos agora em um terminal shell (terminal do seu sistema) navegar at√©
o diret√≥rio do arquivo `shebang_cumprimento.py` e execut√°-lo fazendo
`./shebang_cumprimento.py`. Essa nota√ß√£o `./arquivo` √© a que utilizamos
em terminais do linux para exectuar arquivos bin√°rios.
:::

## Utilizando shebang `#!` `r fontawesome::fa("python", "black")`

<br>

Antes de exectuar o arquivo, √© preciso d√° permiss√£o de execu√ß√£o. Para
tanto, devemos navegar at√© o diret√≥rio do arquivo e executar o comando
`sudo chmod +x shebang_cumprimento.py`. Supondo que o arquivo
`shebang_cumprimento.py`, esteja no diret√≥rio `~/Downloads`, ent√£o
deverei fazer:

<br>

``` bash
# Usando o comando cd para navegar entre os diret√≥rios.
# A nota√ß√£o ~ significa diret√≥rio do usu√°rio. No meu caso
# √© o diret√≥rio /home/prdm0

# Poderia ter feito cd /home/prdm0/√êownloads. √â em Downloads
# que encontra-se o arquivo shebang_cumprimento.py, no meu caso:
cd ~/Dowloads

# Dando permiss√£o para executar o arquivo:
sudo chmod +x shebang_cumprimento.py

# Executando o arquivo:
./shebang_cumprimento.py
```

<br>

[Aten√ß√£o]{.red}: √© poss√≠vel executar scripts de qualquer linguagem
seguindo esses passos. Por exemplo, se voc√™ tem o R instalado no seu
sistema, usar√≠amos `#!/usr/bin/env R` como primeira linha do script
`.R`.

<br>

Se voc√™ n√£o sabe onde encontra-se o bin√°rio da linguagem que desej√°
utilizar, no terminal linux voc√™ poder√° fazer `where python` ou
`which python`. No meu caso, o retorno foi `/usr/bin/python`.

<br>

Acresventamos o `env` para especificar ao sistema operacional que ele
dever√° executar a primeira ocorr√™ncia de python em um dado sistema
operacional, uma vez que o script poderia n√£o ser executado caso em
algum outro sistema, a linguagem python n√£o estivesse em `/usr/bin`.

<br>

Colocar o `env` diz ao sistema operacional que procure python na
vari√°vel `PATH` do sistema.

## Utilizando shebang `#!` `r fontawesome::fa("python", "black")`

<br>

O v√≠deo logo abaixo mostra o procedimento para se criar um arquivo
execut√°vel de um script python para ser executado via terminal.

<br>

::: fragment
![](videos/usando_shebang.webm){width="60%"}
:::

## Criando ambientes virtuais em `r fontawesome::fa("python", "black")`

<br>

Os [ambientes
virtuais](https://docs.python.org/pt-br/3/tutorial/venv.html) em Python
s√£o ambientes isolados que permitem que voc√™ instale pacotes e m√≥dulos
em um espa√ßo de trabalho separado do sistema. Isso permite que voc√™
tenha diferentes vers√µes de pacotes e m√≥dulos instalados em diferentes
projetos sem afetar uns aos outros. Al√©m disso, os ambientes virtuais
permitem que voc√™ teste seu c√≥digo em diferentes vers√µes do Python sem
afetar a instala√ß√£o global do Python no seu sistema.

<br>

``` bash
# Navegando ao diret√≥rio onde criarei o ambiente:
cd ~/Downloads

# Criando o ambiente:
python -m venv meu_ambiente

# Ativando o ambiente ("meu_ambiente") criado:
source ~/Downloads/meu_ambiente/bin/activate
```

<br>

**Nota**: N√£o utilize o Download como diret√≥rio de trabalho. Coloquei no
c√≥digo apenas como exemplo. Eventualmente voc√™ ir√° deletar os arquivos
em Downloads e acabaria perdendo seus projetos associados ao ambiente
criado.

## Criando ambientes virtuais em `r fontawesome::fa("python", "black")`

<br>

![V√≠deo mostrando como criar ambientes virtuais em Python. Uma forma
conveniente de manter vers√µes diferentes diferentes e isoladas do
projeto, independentemente das vers√µes de bibliotecas Python instaladas
no sistema operacional.](videos/criando_ambiente.webm){width="60%"}

<br>

[Nota]{.red}: Utilize o comando `deactivate` para sair do shell do
ambiente virtual e voltar ao padr√£o.

## Criando ambientes virtuais em `r fontawesome::fa("python", "black")`

<br> <br> <br> <br> <br>

[Exerc√≠cio]{.red}: Crie um abiente virtual no diret√≥rio raiz do seu
usu√°rio. Atribua o nome `meu_primeiro_ambiente`, acesse o ambiente
usando o comando `source` e instale as bibliotecas **numpy** e
**pandas**, utilizando o comando `pip`. Depois saia do ambiente
utilizando a fun√ß√£o `deactivate`.

## Criando ambientes virtuais em `r fontawesome::fa("python", "black")`

<br>

Para obter todos os pacotes instalados em Python no seu ambiente virtual
ou mesmo na instala√ß√£o padr√£o de Python em seu sistema operacional voc√™
poder√° fazer uso do comando `freeze`:

<br>

```{bash}
# Listando as bibliotecas e suas respectivas vers√µes:
pip freeze
```

## Criando ambientes virtuais em `r fontawesome::fa("python", "black")`

<br>

[Exemplo]{.red}: Salvando a lista de bibliotecas Python e suas
respectivas vers√µes que encontram-se instaladas. Esse comando poder√° ser
utilizado dentro de uma se√ß√£o shell de um ambiente virtual ou no
ambiente ambiente global:

<br>

``` bash
# Se quiser salvar em um arquivo para depois poder
# utilizar para instalar as bibliotecas, fa√ßa.
# Ser√° salvo no diret√≥rio atual pwd. Voc√™ poder√°
# utilizar o comando cd para navegar para o diret√≥rio
# que deseja salvar o arquivo requiriments.txt:
pip freeze > requiriments.txt

# Caso queira instalar as bibliotecas listadas no arquivo
# requiriments.txt, fa√ßa, no diret√≥rio do arquivo:
pip install -r requiriments.txt
```

## Alguns comandos √∫teis do `pip`

<br>

[Listo abaixo alguns comandos √∫teis do `pip`]{.red}

<br>

1.  Instalando um pacote: `pip install nome_do_pacote`
2.  Removendo um pacote: `pip unistall nome_do_pacote`
3.  Atualizando o `pip`: `pip install --upgrade pip`
4.  Atualizando um pacote: `pip install --upgrade nome_do_pacote`
5.  Listando os pacotes instalados: `pip freeze`
6.  Gera uma lista dos pacotes instalados: `pip list`
7.  Mostra informa√ß√µes detalhadas sobre um pacote instalado:
    `pip show nome_do_pacote`

<br>

[Nota]{.red}: Ao contr√°rio do pip freeze em que podemos salvar a sa√≠da
em um arquivo texto para podermos utilizar em uma futura instala√ß√£o, o
`pip list` apenas lista uma tabela com o nome dos pacotes instalados.
Voc√™ poder√° substituir `--upgrade` por `-U`.

## Analogias `r fontawesome::fa("python", "black")` e `r fontawesome::fa("r-project", "black")`

<br>

Me permita fazer uma pequena analogia entre Python e R, caso voc√™ j√°
conheca alguma coisa de R.

<br>

::: columns
::: {.column width="50%"}
### Python `r fontawesome::fa("python", "black")`

<br>

-   `import biblioteca` importa uma `biblioteca`.
-   `pip install -U biblioteca` instala uma `biblioteca`. Esse comando
    deve ser executado fora do Python.
-   [numpy](https://numpy.org): fornece um m√©todos para trabalhar de
    forma vetorizada com arrays em Python, al√©m de fornecer m√©todos para
    trabalhar com √°lgebra linear.
-   [scipy](https://scipy.org): fornece rotinas para trabalhar com
    computa√ß√£o cient√≠fica em Python: m√©todos de otimiza√ß√£o, integar√ß√£o,
    entre outros.
-   [pandas](https://pandas.pydata.org): biblioteca inspirada nos data
    frames de R. Fornece estruturas de dados e opera√ß√µes para
    manipula√ß√£o e an√°lise de dados.
-   [functools](https://docs.python.org/3/library/functools.html):
    biblioteca que fornece fun√ß√µes de alta ordem que s√£o √∫teis para
    trabalhar com programa√ß√£o funcional. Possui rotinas que s√£o
    equivalentas a algumas dispon√≠veis no R base e do pacote
    [purrr](https://purrr.tidyverse.org) de R.
-   [seaborn](https://seaborn.pydata.org): biblioteca para visualiza√ß√£o
    de dados que fornece interface de alto n√≠vel para a constru√ß√£o de
    gr√°ficos estat√≠sticos. Essa biblioteca foi inspirada no biblioteca
    [ggplot2](https://ggplot2-book.org) de R.
-   [scikit-learn](https://scikit-learn.org): biblioteca mais popular de
    aprendizagem de m√°quina, constru√≠da sobre a biblioteca **numpy** e
    que fornece uma grande quantidade de ferramentas e algoritmos.
:::

::: {.column width="50%"}
### R `r fontawesome::fa("r-project", "black")`

<br>

-   `library(biblioteca)` importa uma `biblioteca`.
-   `install.packages("biblioteca")` instala uma biblioteca. Comando
    executado em uma se√ß√£o de R.
-   O **R base** j√° fornece rotinas para trabalharmos com arrays, al√©m
    de rotinas para poder realizar opera√ß√µes alg√©bricas sobre eles:
    invers√£o de matrizes, c√°lculo de determinante, multiplica√ß√£o de
    matrizes, entre diversas outras.
-   O **R base** tamb√©m fornece rotinas para trabalar com computa√ß√£o
    cient√≠fica. Portanto, √© poss√≠vel encontrar fun√ß√µes como `optim` e
    `integrete` que s√£o internas √† linguagem.
-   Do mesmo modo, o R tamb√©m apresenta como parte da linguagem, os
    **data frames**. Por√©m, tamb√©m √© poss√≠vel utilizar pacotes como
    [dplyr](https://dplyr.tidyverse.org) e
    [data.table](https://rdatatable.gitlab.io/data.table/) para realizar
    manipula√ß√£o de dados de forma mais consistente.
-   [purrr](https://purrr.tidyverse.org): al√©m da possibilidade de
    trabalhar com os funcionais padr√£o da linguagem R, como `apply`,
    `sapply`, `vapply`, `tapply`, `Map`, entre outros, o pacote purrr
    fornece diversos outros funcionais para se trabalhar com progama√ß√£o
    funcional em R. -[ggplot2](https://ggplot2-book.org): biblioteca
    muito utilizada na comunidade R para constru√ß√£o de gr√°ficos
    estat√≠sticos e que se baseia no [The Grammar of
    Graphics](https://www.amazon.com/Grammar-Graphics-Statistics-Computing/dp/0387245448/ref=as_li_ss_tl).
    -[tidymodels](https://www.tidymodels.org): √© uma cole√ß√£o de pacotes
    que visam tornar o processo de cria√ß√£o de modelos de aprendizagem de
    m√°quina mais f√°cil e consistente.
:::
:::

## Eu j√° sei R `r fontawesome::fa("r-project", "black")`, preciso aprender Python `r fontawesome::fa("python", "black")`? {background-image="imgs/rawpixel/image-from-rawpixel-id-4037436-jpeg.jpg" background-size="1920" background-opacity="0.35"}

<br>

Bem, aconselho que voc√™ aprenda Python! Muito embora, em an√°lise de
dados, tudo que podemos fazer com Python tamb√©m podemos fazer com R,
afinal ambas as linguagens s√£o [Turing
Completeness](https://en.wikipedia.org/wiki/Turing_completeness), √©
importante que voc√™ domine a linguagem Python
`r fontawesome::fa("python", "black")`.

<br>

[Listo alguns motivos]{.red}

<br>

1.  Python √© uma linguagem muito f√°cil de se aprender;
2.  Python √© uma linguagem de prop√≥sito geral;
3.  Python √© uma das linguagens de programa√ß√£o mais utilizada em todo
    mundo;
4.  [Programar em Python far√° com que voc√™ possa dialogar com muitas
    pessoas da ci√™ncia da computa√ß√£o]{.red};
5.  [Programar em Python ampliar√° suas oportunidades de emprego]{.red}.
    Conhecer ambas as linguagens far√° com que voc√™ se enquadre em um
    grande n√∫mero de vagas üéâ;
6.  Eventualmente, voc√™ poder√° vir a trabalhar em projetos fora da √°rea
    de ci√™ncia de dados. Python tamb√©m √© √∫til fora do escopo de ci√™ncia
    de dados.

#  {.title background-image="imgs/rawpixel/image-from-rawpixel-id-4037436-jpeg.jpg"}

::: r-fit-text
[Estruturas de dados de Python]{.flow}
:::

## Estruturas de dados de Python `r fontawesome::fa("python", "black")` {background-image="imgs/rawpixel/image-from-rawpixel-id-4037436-jpeg.jpg" background-size="1920" background-opacity="0.25"}

<br>

Ao aprender qualquer linguagem de programa√ß√£o, voc√™ dever√° dominar as
estruturas de dados da linguagem. Sem esse dom√≠nio, jamais voc√™ ser√°
capaz de produzir c√≥digos pofissionais.

<br>

[Mas a final, o que √© estrutura de dados?]{.red}

<br>

> **Uma estrutura de dados √© uma forma de armazenar e organizar dados de
> maneira que eles possam ser acessados e modificados de maneira
> eficiente. Existem v√°rias estruturas de dados diferentes que podem ser
> usadas para resolver problemas de maneira √≥tima e cada linguagem
> possui suas estruturas que precisam ser dominadas.**

<br>

Abordaremos cada uma das estruturas de dados de Python e os principais
m√©todos associados √† essas estruturas. Elas tamb√©m apareceram at√© o fim
do curso e ser√° por meio delas e outros conceitos que voc√™ ir√° resolver
os exerc√≠cios.

## Estruturas de dados de Python `r fontawesome::fa("python", "black")` {background-image="imgs/rawpixel/image-from-rawpixel-id-2257681-jpeg.jpg" background-size="contain" background-position="right"}

<br>

::: columns
::: {.column width="60%"}
O legal da linguagem Python √© que ela possui poucas estruturas de dados,
por√©m, s√£o estruturas bastante flex√≠veis, permitindo resolver diversos
problemas. Iremos abordar uma de cada vez, onde exploraremos exemplos e
exerc√≠cios para dominarmos essas estruturas e os m√©todos associados a
cada uma das respectivas estruturas de dados.

<br>

[As estruturas de dados de Python s√£o]{.red}

<br>

1.  [Listas]{.red}: s√£o uma sequ√™ncia mut√°vel de itens. Voc√™ pode
    adicionar, remover, inserir e acessar itens em uma lista. As listas
    s√£o criadas usando colchetes. **Por exemplo**: `[1, 2, 3]`;
2.  [Tupas]{.red}: s√£o semelhantes √†s listas, mas s√£o imut√°veis. Voc√™
    n√£o pode adicionar, remover ou inserir itens em uma tupla depois de cri√°-la. As tuplas s√£o criadas usando par√™nteses. **Por exemplo**: `(1, 2, 3)`;
3.  [Dicion√°rios]{.red}: s√£o uma estrutura de dados que armazena pares
    chave-valor. Voc√™ pode usar as chaves para acessar os valores no
    dicion√°rio. Os dicion√°rios s√£o criados usando chaves. **Por
    exemplo**: `{'nome': 'Jo√£o', 'idade': 25}`;
4.  [Conjuntos]{.red}: s√£o uma cole√ß√£o de itens √∫nicos e n√£o ordenados. Voc√™ pode adicionar, remover e verificar a exist√™ncia de itens em um conjunto. Os conjuntos s√£o criados usando chaves ou a palavra-chave set. **Por exemplo**: `{1, 2, 3}` ou `set([1, 2, 3])`
5.  [Strings]{.red}: s√£o uma sequ√™ncia de caracteres. Voc√™ pode usar as strings para armazenar e processar texto. As strings s√£o criadas usando aspas simples ou duplas. **Por exemplo**: `'Ol√°, mundo!'` ou `"Ol√°, mundo!"`.
:::

::: {.column width="40%"}
:::
:::

## Analogia: estruturas de dados de Python `r fontawesome::fa("python", "black")` e R `r fontawesome::fa("r-project", "black")` {background-image="imgs/rawpixel/image-from-rawpixel-id-7027732-original.png" background-opacity="0.30"}

<br> <br>

::: fragment
Anteriormente falei do pacote
[reticulate](https://rstudio.github.io/reticulate/), em que mostrei em
um v√≠deo curto que √© poss√≠vel converter uma estrutura de dados de R para
Python, assim como √© poss√≠vel converter uma estrutura de dados de Python
para R.
:::

<br>

::: fragment
Caso voc√™ conhe√ßa algumas estruturas de dados de R, pensar na
"equival√™ncia" entre algumas estruturas de dados de R com estruturas de
Python poder√° ajudar a voc√™ pensar em quando utilizar uma dada estrutura
de dados de Python.
:::

<br>

::: fragment
Se voc√™ n√£o conhece nada de R, poder√°, se desdejar, pular o pr√≥ximo
slide; ok? üëç
:::

<br>

::: fragment
![](gifs/thumbs-up-nod.gif)
:::

## Analogia entre as estruturas de dados de Python `r fontawesome::fa("python", "black")` e R `r fontawesome::fa("r-project", "black")` {background-image="imgs/rawpixel/image-from-rawpixel-id-7027732-original.png" background-opacity="0.30"}

::: columns
::: {.column width="50%"}
### `r fontawesome::fa("r-project", "black")` em R:

-   Vetor com uma √∫nica posi√ß√£o em R √© um escalar em Python: `x <- 1`
-   Um vetor at√¥mico em R √© uma lista em Python: `v <- c(1.1, 2.3, 5.4)`
-   Uma lista n√£o nomeada em R √© uma tupla em Python:
    `l <- list(1L, TRUE, "pedro")`
-   Uma lista nomeada em R √© um dicion√°rio em Python:
    `y <- list(a = 1, b = TRUE, c = 3)`
-   Tipo nulo e tipos l√≥gicos em R: `NULL`, `TRUE` e `FALSE`
-   Uma matriz em R torna-se uma matriz em [numpy](https://numpy.org):
    `m <- matrix(1L:25L, ncol = 5, nrow = 5)`
-   Um data frame em R torna-se um data frame em
    [pandas](https://pandas.pydata.org):
    `df <- data.frame(nome = c("Maria", "Jo√£o"), idade = c(10, 23))`
:::

::: {.column width="50%"}
### `r fontawesome::fa("python", "black")` em Python:

-   Um escalar em Python: `x = 1`
-   Um lista em Python: `v = [1.1, 2.3, 5.4]`
-   Uma tupla em Python: `l = (1, True, "pedro")`
-   Um dicion√°rio em Python `y = {'a' = 1, 'b' = True, 'c' = 3}` ou
    `y = dict(a = 1, b = True, c = 3)`
-   Tipo nulo e tipos l√≥gicos em Python: `None`, `True` e `False`
-   Uma matriz em [numpy](https://numpy.org):
    `m = np.arange(1, 26).reshape(5, 5, order='F')`
-   Um data frame em [pandas](https://pandas.pydata.org):
    `df = pd.DataFrame({"nome": ["Maria", "Jo√£o"], "idade": [10, 23]})`
:::
:::

## Algumas conven√ß√µes de nomenclatura {background-image="imgs/rawpixel/image-from-rawpixel-id-4048191-original.png" background-size="1920" background-opacity="0.45"}

<br>

<!-- Python √© uma linguagem de programa√ß√£o que d√° grande import√¢ncia √† legibilidade e clareza do c√≥digo. Algumas conven√ß√µes podem ser √∫teis e s√£o incentivadas: -->

-   **Vari√°veis**: Usar snake case (estilo `snake_case`), come√ßando com
    letra min√∫scula, nomes descritivos e significativos, usar o sufixo
    `_` (underscore) para vari√°veis privadas. Vari√°veis privadas s√£o
    definidas no interior de classes e s√£o destinadas apenas para serem
    utilizadas dentro delas;

-   **Fun√ß√µes**: indica-se utilizar `snake_case`, come√ßando com letra
    min√∫scula, nomes descritivos e significativos, usando verbos no nome
    da fun√ß√£o para indicar sua a√ß√£o. Evitar nomes gen√©ricos!

-   **Constantes/Vari√°veis Globais**: indixa-se escrever o nome de uma
    constante em caixa alta, utilizando snake case, se for necess√°rio.

-   **Classes**: A conven√ß√£o mais comum para nomear Classes √© usar
    PascalCase, onde as palavras s√£o combinadas sem espa√ßos e cada
    primeira letra de cada palavra √© mai√∫scula, como `MyObject` ou
    `EmployeeData`.

-   **M√≥dulos**: assim como as fun√ß√µes, o nomes de m√≥dulos deve ser em
    letras min√∫sculas e poder√° usar `snake_case` para melhorar a
    legibilidade.

<br>

**Dica**: Algumas vezes pode ser √∫til [usar prefixos]{.orange} para
indicar o tipo de objeto, como `str_` para uma **string**, `lst_` para
uma **lista**, `dict_` para um **dicion√°rio**, `set_` para **conjunto**,
etc.

##  {background-image="imgs/rawpixel/image-from-rawpixel-id-4037217-original_png.png" background-position="left" background-size="contain"}

::: columns
::: {.column width="40%"}
![](imgs/rawpixel/educator.jpg){width="90%"}
:::

::: {.column width="60%"}
### Opera√ß√µes matem√°ticas (opera√ß√µes b√°sicas)

<br>

Sem recorrer ao uso de bibliotecas nem de importa√ß√µes de m√≥dulos, os
operadores matem√°ticos b√°sicos s√£o descritos na Tabela abaixo. Note que
o operador de exponencializa√ß√£o √© definido por `**` e n√£o por `^` (comum
em outras linguagens).

<br>

| Operador | Exemplo   | Descri√ß√£o         | Resultado |
|----------|-----------|-------------------|-----------|
| `+`      | `1 + 1`   | soma              | `2`       |
| `-`      | `1 - 1`   | subtra√ß√£o         | `0`       |
| `*`      | `2 * 4`   | multiplica√ß√£o     | `8`       |
| `/`      | `2 / 4`   | divis√£o           | `0.5`     |
| `**`     | `2 ** 3`  | exponencializa√ß√£o | `8`       |
| `//`     | `-5 // 2` | divis√£o inteira   | `-3`      |
| `%`      | `5 % 2`   | resto da divis√£o  | `1`       |
:::
:::

## Opera√ß√µes de atribui√ß√µes {background-image="imgs/rawpixel/image-from-rawpixel-id-4048191-original.png" background-size="1920" background-opacity="0.3"}

<br>

Assim como em muitas linguagens, o operador `=` √© utilizado como
operador de atribui√ß√£o. Al√©m disso, podemos combinar o operador `=` com
os operadores aritm√©ticos b√°sicos, apresentados no slide anterior, de
modo a ter uma abrevia√ß√£o que envolve uma opera√ß√£o matem√°tica com uma
atribui√ß√£o.

<br>

| Operador | Exemplo   | Equival√™ncia | Valor de x |
|----------|-----------|--------------|------------|
| `x = 10` | \-        | \-           | `10`       |
| `+=`     | `x += 2`  | `x = x + 2`  | `12`       |
| `-=`     | `x -= 2`  | `x = x - 2`  | `8`        |
| `*=`     | `x *= 4`  | `x = x * 4`  | `40`       |
| `/=`     | `x /= 4`  | `x = x/4`    | `2.5`      |
| `**=`    | `x **= 3` | `x = x ** 3` | `1000`     |
| `//=`    | `x //= 2` | `x = x // 3` | `3`        |
| `%=`     | `x %= 3`  | `x = x % 2`  | `0`        |

## Opera√ß√£o de atribui√ß√£o e tipos de dados `r fontawesome::fa("python", "black")` {.smaller}

<br>

**Observa√ß√£o**: A linguagem Python realizada a tipagem do conte√∫do dos
objetos de forma din√¢mica, ao contr√°rio de liguagens como C e C++ que
possuem [tipagem
est√°tica](https://en.wikipedia.org/wiki/Type_system#Static_type_checking).
Se uma tentativa de alguma opera√ß√£o for realizada com tipos de dados
incompat√≠veis, o erro ser√° observado em tempo de execu√ß√£o do programa.

<br>

O nome de um objeto √© apenas um "apelido" para um [endere√ßo de
mem√≥ria]{.rn}. O(s) dado(s) que encontra-se no endere√ßo de mem√≥ria √© que
tem um tipo. Linguagens com tipagem din√¢mica, como Python e R s√£o
capazes de escolher que tipo utilizar dinamicamente para cada vari√°vel,
podendo alter√°-lo dinamicamente durante a execu√ß√£o do programa.

<br>

[Exemplo]{.red}: Em nenhuma defini√ß√£o das vari√°veis abaixo foi preciso
especificar os tipos dos objetos.

```{python}
# Utilizando snake_case e nomes bastante sugestivos
professor_da_ufpb = "Prof. Pedro Rafael"
aluno = "Fulano de Tal"

# x √© um n√∫mero qualquer:
x = 10

# Realizando opera√ß√µes com atribui√ß√£o:
x += 2 # igual √† x = x + 2
x -= 2 # igual √† x = x - 2
x *= 2 # igual √† x = x * 2
x /= 2 # igual √† x = x / 2
x //= 2 # igual √† x = x // 2
x %= 2 # igual √† x = x % 2
x **= 2 # igual √† x = x ** 2
```

## Mais opera√ß√µes matem√°ticas b√°sicas

<br>

Outras opera√ß√µes matem√°ticas b√°sicas poder√£o ser encontradas no m√≥dulo
`math`. Este m√≥dulo fornece acesso √†s fun√ß√µes matem√°ticas definidas pelo
padr√£o C.

<br>

Voc√™ poder√° observar todas as fun√ß√µes dispon√≠vel em um m√≥dulo utilizado
a fun√ß√£o `dir()`:

<br>

```{python}
# Importando o m√≥dulo math
import math

# Quando aplicado √† um m√≥dulo, dir() retornar√° todos os seus atributos. Isso inclui
# todas as fun√ß√µes internas implementadas no m√≥dulo:
dir(math)
```

## Mais opera√ß√µes matem√°ticas b√°sicas

<br>

Voc√™ poder√° obter informa√ß√µes sobre o que cada uma das fun√ß√µes faz
usando a fun√ß√£o `help()`.

<br>

[Exemplo]{.red}: Consultado o que faz o m√©todo `cos` do m√≥dulo `math`:

<br>

```{python}
import math

help(math.cos)
```

<br>

[Nota]{.red}: Mais adiante no curso falaremos de m√≥dulos e como criar
nosso pr√≥prios m√≥dulos. Todavia, adianto que m√≥dulos nada mais s√£o que
arquivos `.py` para que possamos com a instru√ß√£o `import` importar para
outros scripts Python.

## Mais opera√ß√µes matem√°ticas b√°sicas

<br> A Tabela abaixo lista algumas fun√ß√µes do m√≥dulo **math** que podem
ser √∫teis. Como exerc√≠cio, estude a documenta√ß√£o das fun√ß√µes do m√≥dulo
**math**.

<br>

| M√©todo      | Exemplo             | Coment√°rio                                    |
|----------------|-----------------|---------------------------------------|
| `sqrt`      | `math.sqrt(3)`      | Obtendo $\sqrt(3)$                            |
| `pi`        | `math.pi`           | Obtendo o valor de $\pi$                      |
| `e`         | `math.e`            | Obtendo a constante de Euler                  |
| `exp`       | `math.exp(2)`       | Obtendo $\exp(2)$                             |
| `log`       | `math.log(2)`       | Obtendo $\log(2)$ (logaritmo natural)         |
| `log10`     | `math.log10(2)`     | Obtendo o logaritmo de 2 na base 10           |
| `factorial` | `math.factorial(5)` | Obtendo $5!$ (fatorial de 5)                  |
| `comb`      | `math.comb(5, 2)`   | Obtendo a combina√ß√£o de 5 √† 2                 |
| `perm`      | `math.perm(5, 2)`   | Obtendo o arranjo 5 √† 2                       |
| `trunc`     | `math.trunc(10.73)` | Obtendo o valor trunvcado de o n√∫mero 10.73   |
| `gamma`     | `math.gramma(3)`    | Obtendo $\Gamma(3)$ (gamma de 3)              |
| `lgamma`    | `math.lgamma(-3)`   | Calculadno $\log(|\Gamma(-3)|)$               |
| `ceil`      | `math.ceil(10.3)`   | Arredondando 10.3 para cima (resultado = 11)  |
| `floor`     | `math.floor(10.9)`  | Arredondando 10.9 para baixo (resultado = 10) |
| `sin`       | `math.sin(3)`       | Obtendo $\sin(3)$                             |
| `cos`       | `math.cos(-1)`      | Calculando $\cos(-1)$                         |
| `tan`       | `math.tan(4)`       | Calculando $\tan(4)$                          |
| `fsum`      | `math.fsum([1, 2])` | Somando os valores da lista `[1, 2]`          |

## Mais opera√ß√µes matem√°ticas b√°sicas

<br>

Existe algumas fun√ß√µes matem√°ticas que s√£o dispon√≠veis na linguagem
Python mas s√£o encontram-se dispon√≠veis no m√≥dulo **math**. Na Tabela
que segue, listo as principais:

<br>

| M√©todo   | Exemplo        | Coment√°rio                                                   |
|---------------|---------------|-----------------------------------------|
| `round`  | `round(5.7)`   | Arredonda 5.7 (resultado 6)                                  |
| `sum`    | `sum[5,2,0])`  | Retorna a soma da lista `[5, 2, 0]`                          |
| `min`    | `min([5,2,0])` | Retorna o m√≠nimo da lista `[5, 2, 0]`                        |
| `max`    | `max([5,2,0])` | Retorna o m√°ximo da lista `[5, 2, 0]`                        |
| `abs`    | `abs(-5)`      | Retorna o valor absoluto de -5, i.e, $|-5|$                  |
| `divmod` | `divmod(5,2)`  | Retorna uma tupla com a divis√£o inteira de 5 por 2 e o resto |

## M√©todos ou fun√ß√µes?

<br>

Muito embora Python √© uma linguagem multiparadigma, o paradigma de
orienta√ß√£o √† objeto, em Python, √© muito consistente. Ainda falaremos
melhor sobre orienta√ß√£o √† objeto. Por√©m, uma das caracter√≠sticas desse
paradigma de programa√ß√£o √© o encapsulamento, em que os objetos
encapsulam m√©todos e atributos.

<br>

[Observa√ß√£o]{.red}: Aqui, chamaremos de m√©todos as fun√ß√µes encapsuladas
de um objeto. Leia os coment√°rios dos c√≥digos!

<br>

[Exemplo]{.red}: A fun√ß√£o `__abs__()` ser√° um m√©todo do objeto
`math.sin(-1)`. No VSCode voc√™ poder√° apertar Tab para ver os m√©todos de
`math.sin(-1)`. Voc√™ tamb√©m poder√° utilizar a fun√ß√£o `dir()`:

<br>

```{python}
# Importando o m√≥dulo math
import math

# Realizando a opera√ß√£o sin(-1), utilizando a fun√ß√£o sin() de math.
# "resultado" √© um objeto. Objetos em linguagens orientadas a objeto
# poder√° encapsular m√©todos, que s√£o fun√ß√µes que podem operar sobre
# o objeto:
resultado = math.sin(-1)

# Checando os m√©todos e atributos do objeto "resultado":
dir(resultado)

# Imprimindo o resultado:
print(resultado)

# Tomando o valor absoluto de resultado:
print(resultado.__abs__())

# Poder√≠amos ter utilizado a fun√ß√£o abs():
print(abs(resultado))
```

## M√©todos ou fun√ß√µes?

<br>

N√£o estranhe os m√©todos definidos no padr√£o `__nome__`. Eles s√£o
simplesmente fun√ß√µes comuns que voc√™ poder√° definir dentro da
[classe]{.red} de um objeto. Aqui voc√™ est√° lendo mais um termo comum em
linguagens orientadas √† objetos; o conceito de classes.

<br>

[Exemplo]{.red}: Todo objeto tem sua classe. Veja a classe de um objeto
usando a fun√ß√£o `type()`:

<br>

```{python}
# Importando o m√≥dulo math. Sempre realize a importa√ß√£o dos m√≥dulos no in√≠cio
# do seu script Python:
import math

# Chegando a classe do objeto math.cos(-1):
type(math.cos(-1))
```

## M√©todos ou fun√ß√µes?

<br>

Muitas fun√ß√µes em Python s√£o documentadas com Docstrings que nada mais
s√£o que uma descri√ß√£o r√°pida a respeito da fun√ß√£o. Falaremos sobre
Docstrings mais a frente, mas voc√™ poder√° consultar a Docstring de uma
fun√ß√£o usando o m√©todo `__doc__` que normalmente √© implementado nas
fun√ß√µes de um m√≥dulo.

<br>

[Exemplo]{.red}: Consultando a Docstring da fun√ß√£o `sin` do m√≥dulo
`math`:

```{python}
# Importe os m√≥dulos no in√≠cio do arquivo .py. N√£o √© uma boa pr√°tica de programa√ß√£o importar
# m√≥dulos no meio de uma arquivo:

import math

# Retornando a docstring da fun√ß√£o sin do m√≥dulo math:
math.sin.__doc__
```

<br>

[Nota]{.red}: Os m√©todos no padr√£o `__name__` s√£o chamadas de [m√©todos
m√°gicos]{.red} ou simplesmente de "[Dunder]{.red}". M√©todos Dunder s√£o
fun√ß√µes como qualquer outra que voc√™ poder√° implementar em classes de
objetos. Mais a frente no curso voltaremos a esse tema.

## Operadores relacionais

<br>

Operadores relacionais s√£o utilizados para comparar valores em Python. A
Tabela que segue apresenta os operadores relacionais em Python. Como
resultado da compara√ß√£o, teremos um valor booleano `True` ou `False`.

<br>

| Operador | Descri√ß√£o      | Exemplo                                                     |
|--------------|--------------|---------------------------------------------|
| `==`     | Igualdade      | `x == y` retorna verdadeiro se `x` for igual a `y`          |
| `!=`     | Diferen√ßa      | `x != y` retorna verdadeiro se `x` for diferente de `y`     |
| `>`      | Maior que      | `x > y` retorna verdadeiro se `x` for maior que `y`         |
| `<`      | Menor que      | `x < y` retorna verdadeiro se `x` for menor que `y`         |
| `>=`     | Maior ou igual | `x >= y` retorna verdadeiro se `x` for maior ou igual a `y` |
| `<=`     | Menor ou igual | `x <= y` retorna verdadeiro se `x` for menor ou igual a `y` |

## Operadores l√≥gicos

<br>

As opera√ß√µes l√≥gicas e relacionais envolve o t√≠po l√≥gico `bool` de
Python (por exemplo, fa√ßa `type(True)`), podendo retornar `True` ou
`False`, a depender da condi√ß√£o. Podemos combinalas e assim, iremos
construir **express√µes l√≥gicas**.

<br>

A Tabela abaixo apresenta os operadores l√≥gicos de Python:

<br>

| Operador em Python | Opera√ß√£o l√≥gica |
|--------------------|-----------------|
| `not`              | nega√ß√£o         |
| `and`              | e               |
| `or`               | ou              |

<br>

**Exerc√≠cio**: Estude o c√≥digo baixo. Entenda o motivo dos resultados
das express√µes l√≥gicas:

<br>

```{python}
sou_verdade = True

# Negando
print(not sou_verdade)

# Negando duas vezes sou verdade:
print(not not sou_verdade)

# Quando usamos or, ao menos um precisa ser verdade
# para o retorno ser True
print(True or False)
print(False or True)
print(False or True or False)

# Usando and e or. Voc√™ poder√° utilizar par√™nteses para
# compor opera√ß√µes l√≥gicas:
print((True or False) and True)
print((True and False) or True)

# negando a primeira parte:
print(not(True and False) or True)
```

## Entrada de dados

<br>

Em Python podemos utilizar a fun√ß√£o `input()` para solicitar informa√ß√£o
ao usu√°rio do programa. √â importante notar que a fun√ß√£o `input()` ir√°
ler a informa√ß√£o digitada pelo usu√°rio como uma string, isto √©, como uma
cadeia de caracteres.

<br>

[Exemplo]{.red}: Solicitando ao usu√°rio uma informa√ß√£o, convertendo para
inteiro usando `int()` e usando operadores l√≥gicos e relacionais para a
cria√ß√£o de express√µes l√≥gicas.

<br>

``` python
idade = int(input("--> Por favor, informe sua idade: "))

# Checando se 30 < idade < 50 ou idade > 70:
print((idade > 30 or idade < 50) or idade > 70)

# Uma outra forma seria:
print((30 < idade < 50) or idade > 70)
```

## Convers√µes de tipos de dados

<br>

Assim como utilizamos a fu√ß√£o int para converter a entra para inteiro,
tamb√©m poderemos tentar outros tipos de coer√ß√µes.

<br>

[Exemplo]{.red}: utilizando as fun√ß√µes `chr()`, `int()`, `float()` e
`bool()`, para for√ßar a conver√ß√£o de objetos para string, inteiro, real
e booleano, respectivamente:

<br>

```{python}
numero = 65

# Realizando convers√µes de tipos de dados, se poss√≠vel
caractere = chr(numero)
num_int = int(numero)
num_real = float(numero)
valor_logico = bool(numero)

# Imprimendo as informa√ß√µes
print(caractere)
print(num_int)
print(num_real)
print(valor_logico)
```

## Convers√µes de tipos de dados {background-image="imgs/rawpixel/image-from-rawpixel-id-5945709-menor.jpg" background-position="right" background-size="contain"}

<br>

::: columns
::: {.column width="60%"}
Se voc√™ √© novo em programa√ß√£o, o que pode parecer mais estranho no
exemplo anterior √© que o n√∫mero 65 foi convertido para o caracter `"A"`
e para o valor `True`, ao utilizarmos as fun√ß√µes de convers√£o de tipos
`chr` e `bool`, respectivamente.

<br>

Em Python, assim como ocorre em diversas outras linguagens, qualquer
n√∫mero diferente de zero √© convertido para `True` ao utilizar a
convers√£o para o tipo booleano, sendo `False` a convers√£o do n√∫mero
zero.

<br>

<br> J√° a convers√£o do n√∫mero 65 para o caracter `"A"` se deve a √≠ntima
rela√ß√£o entre n√∫meros interios de 0 a 255 para caracteres da [Tabela
ASCII](http://www.redimovel.com.br/ceal/so/tabela-ascii.htm). Por
exemplo, `print(chr(64))` a string composta pelo character `@`.
:::

::: {.column width="40%"}
:::
:::

## Opera√ß√£o com strings

<br>

Em Python, √© poss√≠vel realizar opera√ß√µes em vari√°veis do tipo strings.
Strings s√£o cadeias de caracteres, como por exemplo,
`print("Ol√°, bem vindo ao curso"`) a frase entre aspas que √© passada
como argumento para a fun√ß√£o `print()`.

<br>

[Exemplo]{.red} (contatena√ß√£o): concatenando duas ou mais strings:

<br>

```{python}
nome = "Jo√£ozinho"
str_1 = "Eu, "
str_2 = nome
str_3 = ", serei um grande programador"
str_4 = " de Python!"

# Concatenando as strings com o operador +
print(str_1 + str_2 + str_3 + str_4)
```

## Opera√ß√£o com strings

<br>

Voc√™ tamb√©m poder√° utilizar o operador de multiplica√ß√£o `*` para repetir
uma string. Tamb√©m √© poss√≠vel obter a quantidade de caracteres de uma
dada string, utilizando a fun√ß√£o `len()` ou o m√©todo Dunder (
`__len__()`) encapsulado em um objeto do tipo `str`.

<br>

[Exemplo]{.red}: repetindo, uma string qualquer, em um total igual √†
metade do comprimento da string arredondado para cima:

<br>

```{python}
import math

str_qualquer = "\tLero lero, ...\n"
print(str_qualquer * math.ceil(len(str_qualquer)/2))
```

<br>

**Observa√ß√£o**: os caracteres `\t` e `\n` em uma string referem-se √† um
√∫nico caracter. S√£o caracteres especiais que denotam **tabula√ß√£o** e
**nova linha**, respectivamente.

## Composi√ß√£o de string

<br>

Poderemos compor strings utilizando alguns marcadores ("placeholders").
S√£o eles:

<br>

| Marcador | Tipo             |
|----------|------------------|
| `%d`     | N√∫meros inteiros |
| `%f`     | N√∫meros decimais |
| `%s`     | Strings          |

<br>

[Exemplo]{.red}: Considere as vari√°veis `nome = "Dennis Ritchie"`,
`importancia = "criador da linguagem C"`, `ano = 2011`. Vamos construir
a string `"Dennis Ritchie, criador da linguagem C", faleceu em 2011."`.
Para isso, poderemos aproveitar as informa√ß√µes que est√£o contidas nas
vari√°veis `nome`, `importancia` e `ano`.

<br>

```{python}
# nome e importancia s√£o vari√°veis do tipo str (s√£o strings):
nome = "Dennis Ritchie"
importancia = "criador da linguagem C"

# a vari√°vel ano √© do tipo int:
ano = 2011

# Montando a string que desejamos:
print("%s, %s, faleceu em %d." % (nome, importancia, ano))
```

## Composi√ß√£o de string

<br>

Podemos tamb√©m incrementar os operadores `%d`, `%f` e `%s` para
flexibilizar um pouco mais a formata√ß√£o, caso seja necess√°rio, adequando
melhor a sa√≠da com o uso de operadores de largura de campo.

<br>

[Exemplo]{.red}: estude o exemplo que segue:

<br>

```{python}
nome = "Sofia"
idade = 35
altura = 171.5
medida = "cm"

print("->%20s, tem %03d anos e %6.2f de altura" % (nome, idade, altura))

# Note o sinal de '-':
print("->%-20s, tem %03d anos e %-10.2f de altura" % (nome, idade, altura))
```

## Composi√ß√£o de string

<br>

O sinal de negativo no exemplo anterior informa que o elemento dever√°
ser alinhado √† esquerda.

<br>

A nota√ß√£o `%numeros`, informa qual a quantidade de espa√ßo para os
caracteres devem ser reservado para a string. Se uma quantidade inferior
for reservada, a linguagem Python ir√° negligenciar essa informa√ß√£o e
imprimir√° a string inteira. Tente fazer
`print("%1s" % ("Pedro Rafael"))`.

<br>

A nota√ß√£o `%a.bf` para n√∫meros decimais, informa que dever√° reservar um
espa√ßo de tamanho `a` para representar o n√∫mero, e este n√∫mero ser√°
impresso com `b` casas decimais. A informa√ß√£o `a` dever√° incluir o ponto
como parte do n√∫mero. Por exemplo, rode o c√≥digo
`print("%10.2f" % (10))`.

<br>

::: fragment
[Exemplo]{.red}: Poderemos preencher a esquerda com 0, caso tenhamos
deixado muito espa√ßo para representa√ß√£o de um n√∫mero.

<br>

```{python}
import math
numero_pi = math.pi
numero_euler = math.e

print("O n√∫mero de Euler √© %4.2f\nO n√∫mero Pi √© %4.2f" % (numero_euler, numero_pi))
```
:::

## Composi√ß√£o de string

<br>

Uma forma mais moderna de compor strings √© usando o m√©todo `format()`.
Considere o pr√≥ximo exemplo.

<br>

[Exemplo]{.red}: considere o exemplo abaixo, onde utilizamos o m√©todo
`format()`. Note que a linguagem Python √© zero of set, ou seja, √©
"zero-based", o que significa que a indexa√ß√£o come√ßa por 0.

<br>

```{python}
nome = "Maria"
idade = 23

# Usando o m√©todo format:
print("Meu nome √© {} e tenho {}".format(nome, idade))

# Podemos passar as posi√ß√µes entre as chaves:
print("Tenho {1} e me chamo {0}".format(nome, idade))
```

## Formata√ß√£o de alinhamento

<br>

Utilizando o m√©todo format, tamb√©m poderemos especificar "configurar" a
m√°scara para impress√£o dos dados, isto √©, poderemos manipular a [largura
de campo]{.orange}. Tamb√©m podemos utilizar [formata√ß√£o de
alinhamento]{.red} no m√©todo `format()`. S√£o elas:

<br>

| Formata√ß√£o | Exemplo     | Descri√ß√£o                                                             |
|--------------|--------------|---------------------------------------------|
| `{:<}`     | `"{:<10}"`  | Alinha √† esquerda e ocupa no m√≠nimo 10 caracteres                     |
| `{:>}`     | `"{:>10}"`  | Alinha √† direita e ocupa no m√≠nimo 10 caracteres                      |
| `{:^}`     | `"{:^10}"`  | Centraliza e ocupa no m√≠nimo 10 caracteres                            |
| `{:=^10}`  | `"{:=^10}"` | Centraliza e ocupa no m√≠nimo 10 caracteres, justificando para o sinal |
| `{:0=3d}`  | `"{:0=3d}"` | Alinha √† direita, preenche com zeros e ocupa no m√≠nimo 3 caracteres   |
| `{:x<4}`   | `"{:x<4}"`  | Alinha √† esquerda e preenche com "x" e ocupa no m√≠nimo 4 caracteres   |
| `{:b>5}`   | `"{:b>5}"`  | Alinha √† direita e preenche com "b" e ocupa no m√≠nimo 5 caracteres    |

## Formata√ß√£o de alinhamento

<br>

[Exemplo]{.red}: considere o exemplo que segue. Olhe com cuidado cada
uma das formata√ß√µes. Entender bem elas ajudar√° voc√™ organizar a sa√≠da
das suas fun√ß√µes.

<br>

```{python}
print("{:<10}".format("left"))     # "left     "
print("{:>10}".format("right"))    # "     right"
print("{:^10}".format("center"))   # "  center  "
print("{:=^10}".format("center"))  # "==center=="
print("{:0=3d}".format(5))         # "005"
print("{:x<4}".format("a"))        # "axxx"
print("{:b>5}".format(2))          # "bbb10"
```

## Formata√ß√£o de alinhamento

<br>

[Exerc√≠cio]{.red}: Considere os objetos `nome`, `idade` e `salario`,
conforme abaixo:

<br>

```{python}
nome = "Jo√£o da Silva"
idade = 38
salario = 12500.37
```

<br>

Monte uma f-string `s`, tal que `print(s)` retorne:

<br>

```{python}
#| echo: false
#| include: true
s = f"Nome: [{nome:+<20}], Idade: [{idade:0>4}], Sal√°rio: [{salario:*^15.3f}]"
print(s)
```

## Formata√ß√£o de alinhamento

<br>

[Exerc√≠cio]{.red}: Considere o c√≥digo que segue:

<br>

``` python
nome = "Sofia"
idade = 35
altura = 171.5
medida = "cm"
```

<br>

Utilizando o m√©todo `format()`, os operadores de alinhamento e um √∫nico
`print()`, implemente um c√≥digo que forne√ßa a sa√≠da que segue:

<br>

```{python}
#| echo: false
nome = "Sofia"
idade = 35
altura = 171.5
medida = "cm"

print("Nome = {0:.<50}\nIdade = {1:_^10}\nAltura = {2:.=11.2f}{3}".format(nome, idade, altura, medida))
```

## Formata√ß√£o de alinhamento

<br> <br>

[Solu√ß√£o]{.red}:

<br>

```{python}
nome = "Sofia"
idade = 35
altura = 171.5
medida = "cm"

print("Nome = {0:.<50}\nIdade = {1:_^10}\nAltura = {2:.=11.2f}{3}".format(nome, idade, altura, medida))
```

## Utilizando f-strings

<br>

A partir da vers√£o 3.6 de Python, uma nova forma bastante conveniente
surgiu para realizar composi√ß√£o de strings, s√£o as chamadas
[f-strings]{.red}. Chama-se assim pois usamos nota√ß√£o `f""`. <br>

<br>

**Diferen√ßas e semelha√ßas para o uso do** `format()`:

1.  [Diferen√ßa]{.orange}: Voc√™ dever√° passar os nomes das vari√°veis em
    `{}`;
2.  [Semelhan√ßas]{.orange}: as regras de formata√ß√£o ap√≥s os `:` s√£o
    ind√™nticas √†s descritas para o m√©todo `format()`.

::: fragment
[Exemplo]{.red}: utilizando f-string com opera√ß√µes de alinhamento.

```{python}
nome = "Pedro Rafael"
altura = 171.5
unidade = "cm"
idade = 35
print(f"Nome: {nome:.<20}\nAltura: {altura:.^8.2f}{unidade}\nIdade: {idade:0=3d}")
```
:::

## Fatiando strings

<br>

Em Python, assim como poderemos fazer em outas estruturas de dados que
veremos, uma string √© um iterador, isto √©, √© um objeto ao qual poderemos
percorrer.

<br>

**Se podemos percober, ent√£o isso implica que poderemos acessar
subelementos.**

<br>

[Exemplo]{.red}: Acessando substrings de uma string principal.

```{python}
s = "Bem vindo ao curso de Python pessoal"

print(s[0])
print(s[len(s) - 1])
print(s[:5])
print(s[-3:-1])
print(s[:])
print(s[:-8])
```

## Fatiando strings {background-image="imgs/rawpixel/image-from-rawpixel-id-8693208-jpeg.jpg" background-size="contain" background-position="right"}

::: columns
::: {.column width="60%"}
<br>

[Algumas observa√ß√µes]{.red}

<br>

Python √© **zero-based**, i.e., o seu sistema de index√£o come√ßa em zero

<br>

No que index√£o de tr√°s para frente s√£o realizadas utilizando valores
negativos e o √∫ltimo elemento √© o elemento -1, uma vez que 0 = -0, e
portanto n√£o faria sentido indexar de tr√°s para frete a partir do √≠ndice
-0.

<br>

Strings n√£o s√£o estruturas de dados, e sim, tipos de dados! Todavia, √©
poss√≠vel realizar indexa√ß√µes como vimos. As demais estruturas de dados
de Python, em que poderemos utilizar √≠ndices para acessar seus
elementos, segue o mesmo esquema de indexa√ß√£o das strings, por exemplo,
as listas e tuplas.
:::

::: {.column width="40%"}
:::
:::

## Listas

<br>

Em Python, listas s√£o um tipo de **estrutura de dados** em que podemos
armazenar dados, podendo ser de **tipos diferentes**, e podemos
percorrer pelo √≠ndice do elemento na lista.

<br>

Lembre-se que assim como as strings, as demais estruturas de dados de
Python **come√ßam sua indexa√ß√£o por zero**.

<br>

[Exemplo]{.red}: Note que acessar os √≠ndices de tr√°s para crente, a
indexa√ß√£o come√ßa de $-1$, do mesmo modo que em strings e em arrays do
Numpy adiante no curso.

<br>

```{python}
# Criando uma lista vazia
l1 = []
# Criando uma lista de valores inteiros
l2 = [1, 6, 8]

# Acessando o primeiro elemento de l2
l2[0]

# Acessando o √∫ltimo elemento de l2
l2[-1]

# Acessando os dois √∫ltimos elementos
l2[-2:]

# Acessando os dois primeiros
l2[0:2]

# Tamb√©m acessando os dois primeiros
l2[-3:-1]
```

## Listas

<br>

Tamb√©m poderemos ter listas aninhadas e o acesso se d√° da mesma forma. O
exemplo que segue explora isso. Leia os coment√°rios.

<br>

[Exemplo]{.red}: Criando listas aninhadas e acessando seus elementos.

<br>

```{python}
#| results: hold
# Frutas
frutas = ['laranja', 'uva', 'ma√ß√£', 'tomate']
quantidade_frutas = [10, 20, 5, 8]

# Verduras
verduras = ['cebola', 'alho', 'piment√£o']
quantidade_verduras = [10, 8, 5]

# Frutas e verduras
frutas_e_verduras = [[frutas, quantidade_frutas], [verduras, quantidade_verduras]]

# Obtendo da lista aninhada frutas_e_verduras, apenas as frutas:
frutas_e_verduras[0][0]

# Quais as duas √∫ltimas frutas?
frutas_e_verduras[0][0][len(frutas_e_verduras[0][0])-2:]
```

## Listas

<br>

Em linguagens orientadas √† objetos, como Python, quase tudo s√£o objetos.
Objetos geralmente possui m√©todos associados. Objetos da classe `list`
fornecem diversos m√©todos √∫teis.

<br>

```{python}
#| output-location: column-fragment
#| results: hold
# Criando uma lista
lista = ["Jo√£o", "Maria", "Jos√©", "Pedro"]

# Chegando o tipo:
type(lista)

# Testando a inst√¢ncia:
isinstance(lista, list)

# ou

type(lista) == list

# Listando os m√©todos de um objeto do tipo list
dir(lista)
```

## Listas

<br>

Alguns m√©toods aparerem com os nomes envolvidos por duplo underscores
`__`. Esses m√©todos s√£o chamados de m√©todos m√°gicos ou m√©todos dunder.
Tais m√©todos s√£o √∫teis para permitir flexibilidade na classe. Por
exemplo, os desenvolvedores da classe list implementaram o m√©todo
`__add__` que permitir√° a soma de duas listas.

<br>

[Exemplo]{.red}: Note que foi poss√≠vel chamar o m√©todo m√°gico `__add__`
de um objeto da classe `list`. Invocar o m√©todo m√°gico diretamente pode
n√£o ser uma boa pr√°tica. A implementa√ß√£o de `__add__` na classe interna
`list` permite que possamos usar o operador bin√°rio `+` para somar
listas. Note que a soma de listas nesse caso significa concatenar as
listas.

<br>

```{python}
#| results: asis
#| output-location: column-fragment
l1 = [1, 2, 7, 8, 10]
l2 = [12, 20, -1]

# __add__ √© um m√©todo m√°gico que se implementado na
# defini√ß√£o da classe permite que possamos somar
# duas listas assim:
l1 + l2

# Ou ent√£o assim:
l1.__add__(l2)
```

## Listas

<br>

√â aconselh√°vel evitar o uso direto dos m√©todos m√°gicos em Python. Os
m√©todos m√°gicos s√£o uma forma de encapsulamento e oculta√ß√£o de c√≥digo
que permite ao programador escrever c√≥digo mais conciso e limpo. No
entanto, os m√©todos m√°gicos tamb√©m podem tornar o c√≥digo mais dif√≠cil de
entender e manter, portanto, √© importante us√°-los com sabedoria.

<br>

Usando palavras mais diretas, quando voc√™ estiver implementando suas
pr√≥prias classes, voc√™ poder√° implementar, por exemplo, o m√©todo m√°gico
`__add__` que permitir√° voc√™ utilizar opera√ß√µes de soma com seus
objetos.

<br>

[Exemplo]{.red}: M√©todo `__doc__` √© usado para retornar docstrings
(strings de documenta√ß√£o) de m√©todos e objetos.

<br>

```{python}
#| results: hold
#| output-location: column-fragment
# Criando uma lista vazia:
sou_uma_lista = list()

# Outra forma de criar uma lista vazia:
sou_uma_lista = []

# Invocando o m√©todo m√°gico __doc__
# Ele retorna uma docstring com informa√ß√µes sobre o objeto
sou_uma_lista.__doc__
```

## Listas {background-image="imgs/rawpixel/image-from-rawpixel-id-5743490-jpeg.jpg" background-size="contain" background-position="right"}

<br>

::: columns
::: {.column width="70%"}
[Exemplo]{.red}: Perceba que podemos comparar `l1 == l2`, uma vez que
`__eq__` √© um m√©todo da classe `list`. Note tamb√©m que podemos fazer
`len(l1)` ou `len(l2)` uma vez que existe o m√©todo `__len__`
implementado no interior da classe `list`:

<br>

```{python}
#| results: hold

# Criando duas listas (l1 e l2):
l1 = [100, 2, 7, 8, 10]
l2 = [12, 20, -1]

# S√≥ √© poss√≠vel comparar l1 com l2 abaixo, pois quem implementou
# a classe list, implementou o m√©todo m√°gico __eq__:
l1 == l2

# Equivale a fazer
l1.__eq__(l2)

# Podemos obter o tamanho de uma lista porque existe o m√©todo
# __len__ implementado na classe list:
len(l1)

# Poder√≠amos ter feito:
l1.__len__()
```

<br>

[Exerc√≠cio]{.red}: Pesquise na internet qual a flexibilidade que os
m√©todos m√°gicos `__le__`, `__lt__`, `__ge__` e `__gt__` fornecem a
classe list ou a qualquer classe que os cont√©m.
:::

::: {.column width="30%"}
:::
:::

## Listas

<br>

[Exemplo]{.red}: N√£o precisa entender o c√≥digo por completo. Apenas note
que implementei o m√©todo m√°gico `__sub__` de Python e criei uma nova
classe de listas, de nome `MinhaLista`, que permite subtrair duas
listas. Note que n√£o podemos subtrair listas padr√µes de Python, por√©m,
agora poderemos subtrair objetos da classe `MinhaLista` segundo alguma
l√≥gica. A l√≥gica implementada em `__sub__` √© subtrair os dois primeiros
elementos. Voc√™ poderia implementar qualquer outra! Aqui, `MinhaLista` √©
uma subclasse (classe derivada/classe filha) de `list`.

<br>

```{python}
#| results: hold
class MinhaLista(list):
    # Adicionando a capacidade de subtrair. Aqui
    # ser√° subtra√≠do os primeiros elementos:
    def __sub__(self, outra):
        return self[0] - outra[0]

# Cirando dois objetos da classe MinhaLista:
l1 = MinhaLista([1, 2, 3])
l2 = MinhaLista([5, 4, 3])

# Agora posso subtrair duas listas segundo alguma l√≥gica:
l1 - l2
```

## Listas

<br>

Portanto, os [m√©todos m√°gicos]{.red} s√£o nada mais que m√©todos
implementados na defini√ß√£o de uma classe de Python que visam dar maior
flexibilidade aos objetos (inst√¢ncias) dessas classes, permitindo, por
exemplo, definir opera√ß√µes de soma, subtra√ß√£o, multiplica√ß√£o, divis√£o,
compara√ß√µes usando operadores relacionais entre objetos, calcular o
tamanho, entre outros recursos.

<br>

Por exemplo, somar duas strings significa junt√°-las. O que uma opera√ß√£o
ir√° fazer depende do que voc√™ implementar na l√≥gica da fun√ß√£o. Voc√™
aprender√° isso mais tarde.

<br>

Foque, por enquanto, apenas nos m√©todos de um objeto do tipo `list`
cujos nomes n√£o est√£o envoltos de `__`, isto √©, nos m√©todos que n√£o s√£o
"m√©todos m√°gicos".

<br>

```{python}
# Desconsidere o c√≥digo abaixo. Estou usando apenas para
# listar os m√©todos que n√£o come√ßam com '_'.
[x for x in dir(list) if not x.startswith('_')]
```

## Listas

<br>

Abaixo segue uma tabela de m√©todos √∫teis de um objeto que √© inst√¢ncia da
classe `list`. Seja `l = [1, 2, 5, 7]`

<br>

| M√©todo    | Exemplo             | Descri√ß√£o                                                             |
|----------------|-----------------|----------------------------------------|
| `append`  | `l.append([1,6,7])` | Adiciona a lista `[1,6,7]` ao final de `l`                            |
| `clear`   | `l.clear()`         | Remove todos elementos de `l`                                         |
| `copy`    | `g = l.copy()`      | Cria uma c√≥pia de `l`                                                 |
| `count`   | `l.count(1)`        | Conta o n√∫mero de ocorr√™ncias de 1 em `l`                             |
| `extend`  | `l.extend([1,2])`   | Adiciona os elementos de `[1,2]` ao final de `l`                      |
| `index`   | `l.index(2)`        | Retorna o √≠ndice da primeira ocorr√™ncia de `2`                        |
| `insert`  | `l.insert(1, 3)`    | Insere `3` na posi√ß√£o `1` da lista `l`                                |
| `remove`  | `l.remove(2)`       | Remove a primeira ocorr√™ncia de `2` em `l`                            |
| `pop`     | `l.pop(len(l)-1)`   | Remove o √∫ltimo elemento da lista `l`, devolvendo o elemento removido |
| `reverse` | `l.reverse()`       | Retorna a lista reversa de `l`                                        |
| `sort`    | `l.sort()`          | Ordena a lista `l`                                                    |

## Listas

<br>

[Exerc√≠cio]{.red}: Com base no exemplo da tabela acima, descreva a
diferen√ßa dos m√©todos `append` e `extend`.

<br>

Muitos m√©todos de Python utilizando passagem por refer√™ncia, isto √©, n√£o
realizam c√≥pias do objeto para realizar a opera√ß√£o. No exemplo que
segue, note que `l.sort()` ordena a lista `l` sem realizar c√≥pia. Se
desejamos realizar uma c√≥pia, deveremos usar o m√©todo `copy`.

<br>

[Exemplo]{.red}: Estude o c√≥digo abaixo. Note que com a fun√ß√£o `id()`
poderemos obter o endere√ßo de mem√≥ria de objetos em Python. Perceba
tamb√©m que opera√ß√µes de atribui√ß√£o de listas, no caso, `l2 = l1` n√£o
far√° com que `l2` seja uma c√≥pia de `l1`. Isso trar√° desepenho
computacional, uma vez que evitar√° c√≥pias desnecess√°rias, mas poder√°
pegar de surpresa iniciantes na linguagem.

<br>

```{python}
#| results: hold
l1 = [4, 7, 8, -1]

# Ordenando l.
l1.sort()

# Note que n√£o foi preciso reatribuir l1.sort() √† l1
# para que l1 tivesse seus valores ordenados
print(l1)

# Note tamb√©m que l2 n√£o √© uma c√≥pia de l1 quando
# utilizamos o operador de atribui√ß√£o =
l2 = l1 # l2 n√£o √© c√≥pia de l1

# Aqui l2 olha para o mesmo endere√ßo de mem√≥ria de l1.
print(f"Endere√ßo de l1 = {id(l1)}")
print(f"Endere√ßo de l2 = {id(l2)}")

# Se quisermos que l3 seja uma c√≥pia de l1, usamos copy():
l3 = l1.copy()
print(f"Endere√ßo de l1 = {id(l1)}")
print(f"Endere√ßo de l2 = {id(l2)}")

# Note que ordenar l2 ir√° ordenar l1, uma vez que l2
# n√£o √© c√≥pia de l1. Nesse caso, dizemos que l2 √© um view
# de l1. Ambos apontam para o mesmo enderelo de mem√≥ria.
l2.sort() # Ordenar l2 equivale a ordenar l1.
print(l1)
```

## Listas

<br>

[Qual a diferen√ßas de `pop` e `remove`?]{.red}

<br>

1.  O m√©todo remove ir√° remover a primeira ocorr√™ncia do valor passado
    ao m√©todo. Por exemplo. `l.remove(1)` ir√° remover a primeira
    ocorr√™ncia do valor `1` na lista `l`. J√°, fazer `l.pop(1)` ir√°
    remover o elemento na posi√ß√£o `1` da lista `l`.

<br>

2.  Uma outra diferen√ßa importante √© que o m√©todo `pop` ir√° devolver o
    elemento removido. Ou seja, `removido = l.pop(1)` ir√° armazenar o
    valor removido que se encontrava na posi√ß√£o 1 da lista `l` e poder√°
    ser armazenado no objeto `removido`. Por√©m, tente fazer o mesmo com
    `remove`.

## Listas

<br>

[Exemplo]{.red}: Removendo elementos da lista `l` usando os m√©todos
`pop` e `remove`. Note que `b` ser√° do tipo `None`, uma vez que `remove`
ir√° remover a primeira ocorr√™ncia de `1` em `l`, mas sem devolver o
valor removido.

<br>

```{python}
#| results: hold

# Removendo usando pop:
l = [1,2,3]
a = l.pop(1)
print(a)

# Removendo usando remove:
l = [1,2,3]
b = l.remove(1)

# Note que b ser√° do tipo None, uma vez que
# o m√©todo remove remover√° sem devolver o
# elemento removido:
print(b)
```

## Listas

<br>

[Exemplo]{.red}: O c√≥digo que segue apresentam alguns exemplos
comentados de como acessar elementos de uma lista:

<br>

```{python}
#| results: hold
# Criando a lista x:
x = [1, 6, 3, 0, -1, 2, 8, 7]

print(f"Acessando os tr√™s primeiros: {x[:3]}")
print(f"Quarto ao √∫ltimo elemento de l: {x[4:]}")

# Note que o √∫ltimo elemento n√£o √© incluso no fatiamento:
print(f"Acessando do segundo ao quinto: {x[1:6]}")

# Poderemos utilizar um terceiro √≠ndice.
# Note que o √∫ltimo elemento n√£o √© incluso no fatiamento:
print(f"Acessando do primeiro ao s√©timo, pulando 2 {x[1:7]}")

# Poderemos utilizar um terceiro √≠ndice para dar o passo:
print(f"Acessando do 5 ao primeiro, pulando 2: {x[5::-2]}")

# Note que o elemento na posi√ß√£o 3 n√£o √© incluso:
print(f"Acessando do √∫ltimo ao terceiro, pulando 2: {x[len(x):3:-2]}")
```

## Listas

<br>

O √∫ltimo √≠ndice de uma fatia (slice) de lista ou outra estrutura em
Python n√£o √© incluso porque as fatias usam uma nota√ß√£o "in√≠cio:fim" onde
"in√≠cio" √© inclu√≠do na fatia e "fim" √© exclu√≠do. Portanto, ao selecionar
uma fatia com o √≠ndice final desejado, √© preciso adicionar 1 a esse
√≠ndice.

<br>

Al√©m disso:

<br>

```{python}
#| results: hold
l = [4, 8, 0, 12, 9, 13, 11]

# Acessando todos os elementos de l. √â o mesmo
# que considerar apenas l:
print(f"l[:] = {l[:]}")

# Obtendo a lista invertida (passo 1):
print(f"l[::-1] = {l[::-1]}")

# Obtendo a lista invertida (passo 2):
print(f"l[::-2] = {l[::-2]}")
```

## Tuplas

<br>

Diferentemente de [listas]{.orange}, que que poderemos alterar os seus
valores, [tuplas]{.orange} s√£o estruturas de dados **imut√°veis** em
Python.

<br>

**Voc√™ poder√° usar tuplas para representar valores constantes.**

<br>

``` python
# Definindo uma tupla de nome t:
t = ("Pedro", 35, "Valentina", 1)

# Acessando os dois √∫ltimos elementos:
t[2:len(t)]

# A tentativa de substituir um elemento da
# tupla t dar√° erro. Tuplas s√£o objetos
# imut√°veis:
t[0] = "Emanuelle" # Dar√° erro
```

## Tuplas

<br>

Durante toda a execu√ß√£o do programa, uma tupla n√£o poder√° ser
modificada. No exemplo anterior, voc√™ poder√° no decorrer do programa
redefinir o objeto `t`, ou seja, poder√° alterar todo o objeto `t`, que
poder√° em algum momento, por exemplo, se tornar uma lista, mas enquanto
`t` for uma tupla, opera√ß√µes de indexa√ß√£o para substitui√ß√£o de valor n√£o
poder√° ser realizada. **Tuplas s√£o imut√°veis**!

<br>

```{python}
#| results: hold
# Criando uma tupla vazia
t = () # ou t = tuple()

# Apesar de n√£o podermos alterar elementos de uma tupla,
# poderemos concatenar tuplas com o operador +:
t = t + (1, 2, 3) + (4,)
print(t)

# Repetindo a lista com o operador '*':
t = t * 3
print(t)
```

## Tuplas

<br>

No c√≥digo anterior, note `(4,)`. Para criar uma t√∫pla com um √∫nico
elemento voc√™ der√° colocar a v√≠rgula. Note que `type((4))` n√£o √© do tipo
`tuple`:

<br>

```{python}
#| results: hold
# (4) n√£o √© uma tupla com um √∫nico elemento:
type((4)) == tuple

# (4,) √© uma tupla com um √∫nico elemento:
type((4,)) == tuple
```

<br>

Outra forma de chegar poderia ser utilizando a fun√ß√£o
`isinstance(obj, classe)`:

<br>

```{python}
#| results: hold
# t1 n√£o √© uma tupla
t1 = (4)
isinstance(t1, tuple)

# t2 √© uma tupla
t2 = (4,)
isinstance(t2, tuple)
```

## Tuplas

<br>

Apesar de termos usado a fun√ß√£o isinstance na explica√ß√£o de tuplas em
Python, essa fun√ß√£o √© aplic√°vel sempre que voc√™ desejar saber se um
objeto √© de uma determinada inst√¢ncia.

<br>

::: {.panel-tabset group="fruits"}
## Usando `type`

Normalmente usamos `type()` para chegar a classe de algum objeto. Por
exemplo, se desejarmos saber qual a classe de objetos quaisquer, sejam
eles `l`, `s` e `t`, faremos:

<br>

```{python}
#| results: hold
#| output-location: column-fragment
l = [1, 2, -1, 0.58]
s = "string"
t = (1, -5, 1.2)

type(l)
type(s)
type(t)
```

<br>

Note que o retorno √© a classe dos respectivos objetos. Para `s` foi
retornado o tipo de dado (string/str) e para `l` e `t` foi retornado a
estrutura de dados, `list` e `tuple`, respectivamente. Emfim, ser√°
retornado a classe do objeto que poder√° fazer mens√£o ao tipo, estrutura
de dados ou √† alguma caracter√≠stica do objeto que voc√™ deseja
inspecionar.

## Usando `isinstance`

Observe o uso da fun√ß√£o `type` na aba anterior. Se desejo fazer uma
pergunta sobre os tipos que agora sabemos quais s√£o, uma vez que foram
retornados por `type`, poderemos perguntar fazendo:

<br>

```{python}
#| include: true
#| results: hold
#| output-location: column-fragment

# l √© uma lista?
isinstance(l, list) # ou type(l) == list

# s √© uma string (str)?
isinstance(s, str) # ou type(s) == str

# t √© uma tupla?
isinstance(t, tuple) # ou type(t) == tuple
```
:::

## Tuplas

<br>

Os par√™nteses em tuplas s√£o opicionais. Considere o exemplo:

<br>

```{python}
t = 1, "carro"

# O objeto t √© uma tupla?
isinstance(t, tuple)
```

<br>

A linguagem Python n√£o impedir√° voc√™ de ter tuplas concatenadas, ou
eventualmente ter uma lista como elemento de uma tuplas. Concatena√ß√µes
coerentes de estruturas de dados normalmente ser√£o permiss√≠veis.

<br>

```{python}
l = (1, 2, (6, 7), (1, ["a", ("b", "c")]))

# Acessando a tupla ("b", "c"):
l[-1][1][1]
```

## Tuplas

<br>

Objetos do tipo tupla apresentam dois m√©todos comuns, desconsiderando os
m√©todos m√°gicos (m√©todos dunder). S√£o eles o m√©todo `index()` e o m√©todo
`count()`. O primeiro, fornece o √≠ndice da primeira ocorr√™ncia de uma
valor na tupla. J√° o segundo, conta o n√∫mero de ocorr√™ncias de uma
quantidade na lista.

<br>

Veja:

<br>

```{python}
#| results: hold
frutas = ("uva", "banana", "abacaxi", "abacaxi")

# Buscando o n√∫mero de ocorr√™ncias de uva e abacaixi e
# salvando na lista frequ√™ncia:
frequencia = [frutas.count("uva"), frutas.count("abacaxi")]
print(f"[N. de uva, N. de abacaxi] = {frequencia}\n")

# Buscando o √≠ndice da primeira ocorr√™ncia de banana:
print(f"\'banana\' encontra-se na posi√ß√£o {frutas.index('banana')} de frutas\n")
```

## Dicion√°rios

<br>

Dicion√°rios consiste em uma estrutura de dados similar √† uma lista,
por√©m com propriedade de acesso diferente. No caso das listas, podemos
acessar seus elementos por √≠ndices num√©ricos. J√° um dicion√°rio, cada
elemento possui uma [chave]{.orange}. √â por meio dessa chave que
acessamos os respectivos √≠tens.

<br> <br>

| Id  | Aluno           | Nota 1 | Nota 2 | Nota 3 |
|-----|-----------------|--------|--------|--------|
| 01  | Jo√£o da Silva   | 7,25   | 8.74   | 8,20   |
| 02  | Fabiano Dalison | 8,00   | 9,25   | 7,90   |
| 03  | Jos√© Walter     | 10,00  | 9,50   | 9,90   |

## Dicion√°rios

<br>

Sem uso de data frames, em Pandas que aprenderemos a utilizar adiante no
curso, poder√≠amos salvar o registro da tabela acima usando uma estrutura
de dados da classe dict, isto √©, em um dicion√°rio. Veja:

<br>

```{python}
#| output-location: column-fragment
#| results: hold
import statistics as st

id = (1, 2, 3)
nomes = ["Jo√£o da Silva", "Fabiano Dalison", "Jos√© Walter"]
notas = [[7.25, 8.74, 8.20], [8.00, 9.25, 7.90], [10.00, 9.50, 9.90]]
turma = {'id': id, 'nomes': nomes, 'notas': notas}

print(f"--> Aluno {turma['nomes'][0]}, matr√≠cula 0{turma['id'][0]}: m√©dia {round(st.mean(turma['notas'][0]), 2)}\n")

print(f"--> Aluno {turma['nomes'][1]}, matr√≠cula 0{turma['id'][1]}: m√©dia {round(st.mean(turma['notas'][1]), 2)}\n")

print(f"--> Aluno {turma['nomes'][2]}, matr√≠cula 0{turma['id'][2]}: m√©dia {round(st.mean(turma['notas'][2]), 2)}")

```

## Dicion√°rios

<br>

Os m√©todos associados √† um objeto do tipo `dict`, encontra-se ao lado.
Desconsidere os m√©todos **dunder** (m√©todos **d**ouble **under**score):

<br>

```{python}
#| results: hold
#| output-location: column-fragment
# Criando um dicion√°rio vazio
d = {}
dir(d) # ou diretamente d({})
```

## Dicion√°rio

<br>

Listando apenas os m√©todos comuns, isto √©, todos os m√©todos que n√£o
come√ßam com underscore:

<br>

```{python}
#| results: hold
# Agora, voc√™ n√£o precisa entender por completo o
# c√≥digo que segue. Mas, basicamente o que ele est√°
# fazendo √© retornar os m√©todos de {} (um dicion√°rio)
# que n√£o come√ßam com underscore '_':
[i for i in dir({}) if not i.startswith('_')]
```

## Dicion√°rios

<br>

Considere o dicion√°rios `d = {'a': 1, 'b': 2, 'c': 3}`. Ent√£o,

<br>

| M√©todo       | Exemplo                           | Descri√ß√£o                                                                                                                              |
|----------------|--------------------------|-------------------------------|
| `clear`      | `d.clear()`                       | Limpa o dicion√°rio, tendo assim um dicion√°rio vazio.                                                                                   |
| `copy`       | `x = d.copy()`                    | `x` √© uma c√≥pia do dicion√°rio `d` (`x is d` √© `False`).                                                                                |
| `fromkeys`   | `x = d.fromkeys(['a', 'c'], 0)`   | `x` √© um novo dicion√°rio com chaves `'a'` e `b` com `0` sendo fizado como valor padr√£o.                                                |
| `items`      | `l = list(d.items())`             | `d.items()` retorna um objeto da classe `dict_items` que poder√° ser convertida para uma lista usando a fun√ß√£o `list()`.                |
| `pop`        | `d.pop('e', -1)`                  | Remove e devolve o valor da chave removida. Caso a chave n√£o seja encontrada no dicion√°rio, `-1` ser√° devolvido.                       |
| `setdefault` | `d.setdefault('e', 4)`            | Coloca a chave `e` e o valor `4` ao dicion√°rio `d`. Caso a chave j√° exista em `d`, o valor da chave ser√° substitu√≠do por `4`.          |
| `values`     | `x = list(d.values())`            | `d.values()` retorna um objeto da classe `dict_values` que poder√° ser convertido √† uma lista de valores usando a fun√ß√£o `list()`.      |
| `get`        | `x = d.get('c')`                  | Retorna o valor `3` (item da chave `c`) do dicion√°rio `d`. Caso a chave n√£o exista, `None` ser√° retornado.                             |
| `keys`       | `x = list(d.keys())`              | Retorna um objeto da classe `dict_keys` que poder√° ser convertido para uma lista com a fun√ß√£o `list`.                                  |
| `popitem`    | `d.popitem()`                     | Remove o √∫ltimo item (chave e valor) do dicion√°rio `d` e retorna a tupla `('c', 3)`.                                                   |
| `update`     | `d.update({'a': 1.2, 'e': 5.03})` | Atualiza o dicion√°rio `d`, modificando o valor da chave `a` para `1.2` e introduzindo uma nova informa√ß√£o de chave `e` e valor `5.03`. |

# Dicion√°rios

<br>

Poderemos concatenar dicion√°rios, assim como podemos concatenar listas e
tuplas. Al√©m disso, √© poss√≠vel utilizar operadores relacionais e l√≥gicos
para construir express√µes de consulta. No caso do exemplo, foi utilizado
os operadores `<` (operador relacional) e `and` (operador E l√≥gico).
Como compor express√µes depender√° da sua necessidade e criatividade.

<br>

Veja:

<br>

```{python}
import math

# Criando um dicion√°rio com chaves nomes e idade:
d = {
  'pessoas': {
    'nomes': ["Maria", "Renata", "Jos√©"],
    'idades': [20, 18, 25]
    },
  'escolas': ['A', 'B', 'C']
  }

dic_interno = d['pessoas']
n = len(dic_interno['idades'])
soma = math.fsum(dic_interno['idades'])

# Chegando se existe alguma chame de nome "Renata" no
# dicion√°rio dic_interno e al√©m disso, se a m√©dia
# das idades √© menor que 30.
("Renata" in  dic_interno['nomes']) and (soma/n) < 30
```

## Dicion√°rios

<br> <br>

[Exerc√≠cio]{.red}: Considerando o dicion√°rio aninhado `d` no c√≥digo do
slide anterior, construia uma express√£o que retorne um valor da classe
`bool` (`True` ou `False`), em que a regra √©:

<br>

> Testar se dentro do dicion√°rio `'pessoas'`, primeiro √≠tem do
> dicion√°rio `d`, existe em `nomes` as strings `Jo√£o` ou `Jos√©` e que a
> m√©dia dos valores da chave `idades` esteja no intervalo \[20, 35) e
> que al√©m disso exista no √≠tem `escolas` alguma com o nome `A` ou `E`.

<br>

O operador `in` poder√° ser utilizado com listas e tuplas, estruturas que
j√° conversamos, como tamb√©m com conjuntos, estrutura de dados que ser√°
apresentada em breve. Por exemplo, `not(2 in [1,2,3]) or 1 in (-1,1)`
ir√° retornar `True`.

## Dicion√°rios

<br>

A partir da vers√£o 3.9 de Python, √© poss√≠vel utilizar o operador infix
`|` para concatenar dois dicion√°rios. An√°logo ao m√©todo `update()`,
por√©m com uma nota√ß√£o mais simples.

<br>

```{python}
d1 = {'a': 1, 'b': 2, 'c': 3}
d2 = {'e': 4, 'f': 5, 'g': 6}
d3 = {'h': 7, 'c': 4}

print(f"d1 | d2 = {d1 | d2}")
# Note que aqui, a chave 'c' de d3 ir√° sobrepor a
# chave 'c' de d1:
print(f"d1 | d2 = {d1 | d3}")
```

# Conjuntos

<br>

Conjuntos, `set` em Python, s√£o estruturas de dados que implementam
oera√ß√µes de l√≥gica de conjuntos matem√°ticos, como uni√£o, intersec√ß√£o,
diferen√ßa, entre outras.

<br>

üîä [Aten√ß√£o]{.red}: A principal caracter√≠stica de conjuntos √© **n√£o
admitir elementos repetidos**. Uma seguinda caracter√≠stica importante, √©
que conjuntos n√£o mant√©m a ordem de seus elementos.

<br>

Se a ordem e repeti√ß√£o de elementos for importante para voc√™, pense no
uso de estruturas como listas e tuplas, ok?

<br>

![](gifs/thumbs-up-nod.gif)

## Conjuntos

<br>

No que se refere a ordem dos elementos, a estrutura de dados de
dicion√°rio tamb√©m n√£o √© indicada. Admite-se chaves distintas com
elementos iguais, mas n√£o poderemos ter chaves repetivas e nem
considerar a ordem dos elementos. Voc√™ at√© poder√° fazer
`{'a': 1, 'a': 2}`, ao construir um dicion√°rio, por√©m, apenas o √∫ltimo
par de chave e valor ser√° considerado.

<br>

<br>

```{python}
# Criando um conjunto vazio.
a = set() # poderia ter feito simplesmente a = {}

# Itroduzindo elementos em um conjunto:
a.add(1)
a.add(2)
a.add(3)
print(f"Meu conjunto √© {a}!")
```

## Conjuntos

<br>

[Exemplo]{.red}: Atualizando um conjunto com elementos de outro
conjunto. Note que esse m√©todo, assim como o m√©todo `add`, realiza
modifica√ß√µes no objeto sem termos que reatribuir o resultado, isto √©,
realiza a opera√ß√£o sem necessidade de c√≥piar o objeto. Ali√°s, isso √© uma
pr√°tica comum em muitos m√©todos de Python.\
<br>

``` python
a = {1, 2, 3, 4}
b = {5, 6, 7}

# Imprimindo os endere√ßos dos objetos na mem√≥ria

print(f"Endere√ßo de 'a': {hex(id(a))}")
print(f"Endere√ßo de 'b': {hex(id(b))}")

# Iremos modificar 'a', onde introduziremos
# os elementos de 'b' em a:
a.update(b)

# Observando novamente o endere√ßo de 'a':
print(f"Endere√ßo de 'a': {hex(id(a))}")
```

<br>

üìå Note que o endere√ßo de mem√≥ria do objeto `a` permanece igual ao
endere√ßo de mem√≥ria de `a` antes de atualizarmos `a` com o m√©todo
`update`.

## Conjuntos

<br>

Voc√™ poder√° testar se um determinado valor pertence √† um conjunto em
Python √† um conjunto utilizando a fun√ß√£o `in`, assim como tamb√©m poder√°
fazer uso em estruturas como listas, tuplas e dicion√°rios.

<br>

[Exemplo]{.red}: Estude o c√≥digo abaixo. Note que podemos converter uma
lista em um **set**, podendo ser √∫til, por exemplo, quando desejarmos
conhecer as categorias poss√≠veis em uma lista.

<br>

```{python}
#| results: hold
#| output-location: column-fragment

# Aqui o retorno ser√° True, uma vez que
# 7 √© elemento do conjunto:
7 in {1, 2, 3, 7, 5}

# Aqui o retorno √© False, uma vez que o conjunto
# {1, 2} n√£o √© subconjunto do conjunto {1, 2, -1}:

{1, 2} in {1, 2, -1}

# Convertendo uma lista com elementos repetidos
# em um conjunto:
l = [1, 2, 3, -1, -1, 2, 3, 1]
conjunto_l = set(l)
print(f"Conjunto l = {conjunto_l}!")
```

## Conjuntos {background-image="imgs/rawpixel/image-from-rawpixel-id-4063951-jpeg.jpg" background-position="right" background-size="contain"}

<br>

::: columns
::: {.column width="70%"}
Algumas opera√ß√µes importantes de conjuntos que poder√£o ser √∫teis ao
manipular conjuntos Python:

::: fragment
![](imgs/sets.png){width="700"}
:::
:::

::: {.column width="30%"}
:::
:::

## Conjuntos

<br>

Abaixo segue a Tabela com as principais opera√ß√µes entre conjuntos que
voc√™ poder√° realizar usando a estrutura de dados **set**. Outras
opera√ß√µes de conjuntos poder√£o ser obtidas com base nas opera√ß√µes de
uni√£o, intersec√ß√£o, diferen√ßa e diferen√ßa sim√©trica.

<br>

| Opera√ß√£o                                           | Sintaxe | Exemplo                 | Resultado      |
|----------------------|---------------|--------------------|---------------|
| [Uni√£o]{.red}: $A \cup B$                          | `|`     | `{1, 2} | {3, 4}`       | `{1, 2, 3, 4}` |
| [Intersec√ß√£o]{.red}: $A \cap B$                    | `&`     | `{1, 0} & {0, 4}`       | `{0}`          |
| [Diferen√ßa]{.red}: $A - B$                         | `-`     | `{7, 6, 8} - {6, 8}`    | `{7}`          |
| [Diferen√ßa sim√©trica]{.red}: $\overline{A \cap B}$ | `^`     | `{1, 2, 3} ^ {8, 5, 3}` | `{1, 2, 5, 8}` |

##  {background-image="imgs/rawpixel/image-from-rawpixel-id-4064523-jpeg.jpg" background-size="contain" background-position="left"}

<br>

::: columns
::: {.column width="30%"}
:::

::: {.column width="70%"}
### Conjuntos

<br>

Alguns outros m√©todos importantes para manipular conjuntos em Python
s√£o:

<br>

1.  `pop()`: no caso de conjuntos, o m√©todo `pop()` sempre ir√° remover o
    √∫ltimo elemento do conjunto. N√£o ser√° poss√≠vel passar uma posi√ß√£o,
    tendo em vista que em conjuntos, a posi√ß√£o n√£o importa.

2.  `issubset()`: checa se um conjunto √© subconjunto de outro.

3.  `issuperset()`: checa se um conjunto √© superconjunto de outro.

4.  `isdisjoint()`: checa se os conjuntos s√£o disjuntos.

5.  `remove()`: remove o valor passado como argumento. Note que aqui,
    diferentemente de lista, n√£o √© preciso destacar que o m√©todo
    removerar a primeira ocorr√™ncia, uma vez que n√£o h√° elementos
    repetidos em conjuntos.

6.  `discard()`: remove um elemento de um conjunto, caso esse elemento
    perten√ßa ao conjunto.
:::
:::

## Conjuntos

<br>

[Exemplo]{.red}: Exemplo do uso dos m√©todos enumerados no slide
anterior:

<br>

```{python}
# Defini√ß√£o de um conjunto qualquer:
con1 = {-1, 0, 3, -2, 10}
con2 = {10, -2, 3}


# Note que os conjuntos con1 e con2 n√£o s√£o conjuntos
# disjuntos. H√° elementos que eles compartilham:
con1.isdisjoint(con2)

# Note tamb√©m que con2 √© subconjunto de con1. Lembre-se
# sempre que em conjunto a ordem n√£o importa.
con2.issubset(con1)

# Temos tamb√©m que con1 √© superconjunto de con2. Veja:
con1.issuperset(con2)

# Removendo o √∫ltimo elemento de con1. No caso, o valor
con1.pop()

# Removendo o valor 10 do conjunto con1:
con1.remove(10)

# Removendo, se existir, o valor 1.2 de con1:
con1.discard(1.2)
```

## Conjuntos

<br> <br> <br> <br>

[Exerc√≠cio]{.red}: Como vimos, tanto o m√©todo `remove()` quanto o m√©todo
`discard()` s√£o m√©todos objetos da classe `set` que s√£o √∫teis para
remover elementos de um conjunto. Descreva a principal diferen√ßas dos
dois m√©todos. Aprensente um exemplo.

## `is` e `==`

<br>

Em geral, poderemos comparar dois ou mais objetos Python utilizando a
fun√ß√£o `is`, al√©m de construir express√µes utilizando os [operadores
l√≥gicos]{.orange} (`and`, `or` e `not`) e/ou [relacionais]{.orange}
(`<`, `>`, `<=`, `>` e `!=`).

<br>

Algumas estruturas de dados, como dicion√°rios, n√£o permitem o uso de
operadores relacionais `<`, `>`, `<=` e `>=`, por√©m, por exemplo, √©
poss√≠vel fazer uso dos operadores `==` e `!=`. O que essas opera√ß√µes
significam ao comparar cada objeto depender√° das caracter√≠sticas
intr√≠nsecas a natureza l√≥gica da implementa√ß√£o das classes dos objetos
comparados.

<br>

Aos poucos, na medida que os nossos programas ir√£o ficando maiores, e o
n√∫mero de exemplos e exerc√≠cios forem aumentando, esses detalhes ir√£o
sendo absorvidos.

## `is` e `==` {background-image="imgs/rawpixel/image-from-rawpixel-id-3934676-jpeg.jpg" background-position="right" background-size="contain"}

<br>

::: columns
::: {.column width="50%"}
Gostaria apenas de destacar o uso do operador `is` e comparar com o do
operador `==`. O operador relacional de igual (`==`) √© √∫til, como j√°
sabemos, para poder comparar dois objetos, no que refere-se √† igualdade
dos seus conte√∫dos e estrutura. Por exemplo, `[1, 2, 3] == {1, 2, 3}`
ir√° retornar `False` pois a pesar de terem o mesmo elemento, os objetos
s√£o diferentes (classes diferentes). `[1, 2, 3]` √© uma lista, enquanto,
`{1, 2, 3}` √© uma tupla.

<br>

Do mesmo modo que `{1, 2, 3} == {3, 4, 2}` tamb√©m retornar√° `False`, uma
vez que mesmo sendo objetos com mesma estrutura de dados, eles possuem
elementos diferentes.
:::

::: {.column width="50%"}
:::
:::

## `is` e `==`

<br>

Algumas estruturas de dados n√£o tem no√ß√£o de ordem. Por exemplo, em
conjuntos, `{1, 4, -1} == {-1, 1, 4}` ir√° retornar `True`, uma vez que
conjuntos s√£o iguais se ambos os objetos s√£o da mesma classe e possuem
os mesmos elementos. Isso, por exemplo, n√£o ocorre com listas.

<br>

Veja:

<br>

```{python}
#| results: hold
# Comparando dois conjuntos:
{1, 4, -1} == {-1, 1, 4}

# Comparando duas listas. A ordem em
# listas tem import√¢ncia
[1, 4, -1] == [-1, 1, 4]
```

## `is` e `==`

<br>

O operador `is`, por sua vez, √© uma compara√ß√£o ainda mais forte sobre a
igualdade de dois objetos. O operador `is` tamb√©m comparar se os objetos
s√£o iguais na mem√≥ria do computador. Por exemplo,

<br>

``` python
# Conjuntos:
s1 = {1, 4, -1}
s2 = {1, 4, -1}
s3 = {-1, 4, 1}

print(f"s1 is s2: {s1 is s2}\n(id_s1: {hex(id(s1))}, id_s2: {hex(id(s2))}\n")
print(f"s1 is s3: {s1 is s3}\n(id_s1: {hex(id(s1))}, id_s3: {hex(id(s3))}\n")
print(f"s2 is s3: {s2 is s3}\n(id_s2: {hex(id(s2))}, id_s3: {hex(id(s3))}")
```

<br>

Usamos `hex()` para converter um n√∫mero inteiro para hexadecimal. Leia
sobre as fun√ß√µes `bin()` e `otc()`.

## `is` e `==`

<br>

[Exerc√≠cio]{.red}: Inspecione o c√≥digo que segue. Exlique os porqu√™s das
sa√≠das!

<br>

```{python}
#| results: hold
#| output-location: column-fragment
x = [1, 2, 3]
y = x
z = y.copy()

print(f"--> x is z: {x is z}\n")
print(f"--> x == z: {x == z}\n")
print(f"--> y is z: {y is z}\n")
print(f"--> y == z: {y == z}\n")


# Ordenando y:
y.sort()

print(f"--> x == y: {x == y}\n")
print(f"--> x is y: {x is y}\n")
```

## Qual estrutura de dados usar?

<br>

Se voc√™ n√£o sabe qual estrutura de dados utilizar, a Tabela que segue te
dar√° uma luz üí°:

|                             | [Listas]{.red}                                      | [Tuplas]{.red}                                                 | [Dicion√°rios]{.red}                      | [Conjuntos]{.red}                                 |
|---------------|---------------|---------------|---------------|---------------|
| [Ordem dos elementos]{.red} | Fixa                                                | Fixa                                                           | Mantida a partir do Python 3.7           | Indeterminada                                     |
| [Tamanho]{.red}             | Vari√°vel                                            | Fixo                                                           | Vari√°vel                                 | Vari√°vel                                          |
| [Elementos Repetidos]{.red} | Sim                                                 | Sim                                                            | Apenas os valores, mas com chaves √∫nicas | N√£o                                               |
| [Pesquisa]{.red}            | Sequ√™ncial, √≠ndice num√©rico                         | Sequ√™ncial, √≠ndice num√©rico                                    | Direta por chave                         | Direta por valor                                  |
| [Altera√ß√µes]{.red}          | Sim                                                 | N√£o                                                            | Sim                                      | Sim                                               |
| [Uso prim√°rio]{.red}        | Sequ√™ncias de valores n√£o necessariamente ordenados | Sequ√™ncias de valores constantes n√£o necessariamente ordenados | Dados indexados por chave                | Verifica√ß√£o de unicidade, opera√ß√µes com conjuntos |

## Input de dados

<br>

As vezes precisamos interagir com a execu√ß√£o de um c√≥digo, seja para
obter dados ou fornecer algum tipo de informa√ß√£o. Na maioria dos casos,
essas informa√ß√µes vem do teclado. Poder√≠amos ter informa√ß√µes de outra
fonte, como, por exemplo, um sensor para captar humidade do ar, um
leitor de impress√µes digitais, uma c√¢mera associada √† algum algoritmo
que forne√ßa algum tipo de informa√ß√£o atrav√©s da leitura de imagens, etc.

<br>

Para cada um desses casos, voc√™ quando dominar a linguagem Python,
saber√° ir atr√°s de bibliotecas espec√≠ficas que permitam o uso de
entradas mais espec√≠ficas.

<br>

![](gifs/teclado-anime.gif)

## Input de dados

<br>

Como mencionado, na maioria dos casos, o input vem do teclado ‚å®Ô∏è. Para
este prop√≥sito, Python fornece a fun√ß√£o `input()`, que possui um
par√¢metro opcional, que √© a string que ser√° enviada para o usu√°rio.

<br>

<br>

``` python
n = input("Insira um n√∫mero: ")
print(n)
```

<br>

Ao executarmos o c√≥digo acima, o prompt de comandos aguardar√° pela
entrada de dados por parte de usu√°rio, uma vez informado o valor e
enviado, ele ser√° impresso. Mas qual o tipo de dados que teremos em `n`?

## Input de dados

<br>

Voc√™ j√° sabe obter a classe de um objeto em Python. Com o comando
`type()`, n√£o √© isso?

<br>

Portanto, voc√™ ir√° notar que a classe de `n` √© `str`, e assim ir√°
concluir que o objeto `n` √© uma string.

<br>

[Dica]{.red}: Facilmente poderemos converter uma string para um valor
num√©rico (`int` ou `float`), ou mesmo avaliar diretamente a string
usando a fun√ß√£o `eval()`. Para converter, por exemplo, a string `1.7`
para **int** fa√ßa `int('1.7')`. De forma an√°loga, para converter para
**float**, fa√ßa `float('1.7')`.

<br>

[Exemplo]{.red}: Inicialmente execute apenas a linha 3 e entre com os
daddos no formato solicitado. Ap√≥s isso, execute o restante do c√≥digo.

<br>

``` python
# Execute apenas a linha abaixo, entre com os dados e
# s√≥ depois execute as demais linhas:
dados = input("Informe seu nome, peso (em kg), altura (em m) no formato [nome, peso, altura]: ")

# Execute as linhas de c√≥digo abaixo apenas depois de executar
# a linha de c√≥digo com o input acima.
# Avaliando a entrada de dados:
lista = eval(dados)

# Calculando o IMC (√çndice de Massa Corporal):
imc = round(lista[1]/(lista[2]**lista[2]), 2)

# Imprimindo o resultado:
print(f"{lista[0]}, seu IMC √© {imc}")
```

## Input de dados

<br>

[Exemplo]{.red}: Sei que voc√™ poder√° estar se perguntando o por qu√™ do
c√≥digo anterior n√£o funcionar ao executarmos todo c√≥digo de uma √∫nica
vez. Abaixo h√° uma solu√ß√£o. N√£o precisa entender todo ele. No momento
ainda n√£o falei sobre estruturas de controle nem de repeti√ß√µes.

<br>

``` python
# Para responder sua curiosidade, a fun√ß√£o input()
# ir√° aguardar a entrada quando esta est√° associada
# √† uma estrutura de repeti√ß√£o.
while True:
    dados = input("Informe seu nome, peso (em kg), altura (em m) no formato [nome, peso, altura]: ")
    if dados.lower() == 'q':
        print("Tchau!")
        break
    # Execute as linhas de c√≥digo abaixo apenas depois de executar
    # a linha de c√≥digo com o input acima.
    # Avaliando a entrada de dados:
    lista = eval(dados)

    # Calculando o IMC (√çndice de Massa Corporal):
    imc = round(lista[1]/(lista[2]**lista[2]), 2)

    # Imprimindo o resultado:
    print(f"{lista[0]}, seu IMC √© {imc}")]
```

#  {.title background-image="imgs/rawpixel/freight.jpg"}

::: r-fit-text
[Estruturas condicionais]{.flow}
:::

## `if`

<br>

Nem sempre todas as linhas dos programas ser√£o executadas. Muitas vezes,
se≈ïa mais interessante decidir que partes do programa devem ser
executadas com base no resultado de uma condi√ß√£o. A base dessas decis√µes
consistir√° em express√µes l√≥gicas que permitam representar escolhas em
programas.

<br>

A condi√ß√£o `if` √© uma estrutura de controle de fluxo em Python que
permite a execu√ß√£o de um bloco de c√≥digo somente se a condi√ß√£o
especificada for verdadeira.

<br>

``` python
if <condicao>:
  c√≥digo executado
  se a condicao for
  verdadeira
```

<br>

A nota√ß√£o `< >` n√£o faz parte da instru√ß√£o e s√≥ est√° a√≠ para destacar a
necessidade de uma condi√ß√£o l√≥gica. Se essa condi√ß√£o for verdadeira, o
bloco de instru√ß√µes ser√° executado.

## `if`

<br>

[Exemplo]{.red}: Instru√ß√£o `if` avaliando a condi√ß√£o `num > 5`. Perceba
que o resultado de avalia√ß√£o de uma condi√ß√£o ser√° sempre um objeto do
tipo `bool`, isto √©, ser√° um valor booleano, podendo ser `True` (bloco
de instru√ß√µes do `if` ser√° executado) ou `False` (bloco de instru√ß√µes do
`if` ser√° ignorado).

<br>

```{python}
#| results: hold
# Objeto num antes do if:
num = 7

print(f"--> Objeto num antes do if: {num}")

if num > 5:
    num += 1

# Objeto num depois do if:
print(f"--> Objeto num depois do if: {num}")
```

## `if`

<br>

[Exemplo]{.red}: Corra um input de cada vez para depois poder correr o
restante do c√≥digo. No exemplo do IMC implementei uma estrat√©gia simples
para contornar o "problema" de rodar v√°rios inputs de uma √∫nica vez.
Nesse exemplo, voc√™ entrar√° com os valores de `a` e `b`,
respectivamente, e o programa ir√° decidir qual valor informado √© o
vaior.

<br>

``` python
# Execute os inputs, um de cada vez!
a = float(input("Primeiro valor: "))
b = float(input("Segundo valor: "))

if a > b:
  print("O primeiro valor √© maior!")

if not a > b:
  print("O segundo valor √© o maior!")
```

<br>

Note que no segundo `if` foi utilizado a nega√ß√£o `not`. Voc√™ poderia ter
utilizado a condi√ß√£o `b < a`. Lemtre-se tamb√©m que as entradas do
`input()` s√£o strings e devem ser covertidas para n√∫meros.

## `if`

<br>

üì¢ [ATEN√á√ÉO]{.red}: Python √© uma linguagem que exige que o programador
idente corretamente o seu c√≥digo. A
[identa√ß√£o](https://pt.wikibooks.org/wiki/Python/Conceitos_b%C3%A1sicos/Indenta%C3%A7%C3%A3o)
√© um aspecto importante da sintaxe em Python, pois √© usada para definir
blocos de c√≥digo. Em Python, os blocos de c√≥digo s√£o definidos pela
indenta√ß√£o, que √© o espa√ßamento √† esquerda de uma linha de c√≥digo. O
interpretador de Python ir√° indicar o erro como `IndentationError`.

<br>

::: {.panel-tabset group="identacao"}
## C√≥digo bem identado

``` python
# Execute os inputs, um de cada vez!
a = float(input("Primeiro valor: "))
b = float(input("Segundo valor: "))

if a > b:
  print("O primeiro valor √© maior!")

if not a > b:
  print("O segundo valor √© o maior!")
```

## C√≥digo mal identado

``` python
# Execute os inputs, um de cada vez!
a = float(input("Primeiro valor: "))
b = float(input("Segundo valor: "))

if a > b:
print("O primeiro valor √© maior!")

if not a > b:
print("O segundo valor √© o maior!")
```
:::

## `if`

<br>

Em outras linguagens de programa√ß√£o, como R e C, n√£o h√° a obriga√ß√£o do
programador alinhar os blocos de instru√ß√µes de c√≥digo, muito embora √©
uma pr√°tica recomentada pelas boas pr√°ticas de programa√ß√£o. Nessas
linguagens usa-se a nota√ß√£o de chaves (`{}`) para delimitar os blocos de
instru√ß√µes. Em Python, essa delimita√ß√£o se d√° por identa√ß√£o coerente.
Usa-se 4 espa√ßos (n√£o tabula√ß√£o) para definir blocos de instrui√ß√µes em
Python. Identar c√≥digo ajudar√° a entendermos melhor as hierarquias de
c√≥digos, ajudando na manuten√ß√£o.

<br>

![](imgs/identacao.png){width="500"}

## Exerc√≠cios üìö

<br> <br>

[Exerc√≠cio]{.red}: Escreva um programa que pergunte a velocidade do
carro de um motorista. Caso ultrapasse 80 km/h, exiba uma mensagem
dizendo que o usu√°rio foi multado. Nesse caso, exiba o valor da multa,
cobranco R\$ 5,00 por km/h acima de 80 km/h.

<br>

[Exerc√≠cio]{.red}: Escreva um progama que leia tr√™s n√∫meros. O programa
dever√° retornar uma lista com os valores em ordem.

<br>

[Exerc√≠cio]{.red}: Escreva um programa que pergunte o sal√°rio do
funcion√°rio e calcule o valor do aumento. Para sal√°rios superiores a
$R\$\,1.250,00$, calcule um aumento de $10\%$. Para sal√°rios inferiores
ou iguais, o aumento ser√° de $15\%$.

<br>

## `else`

<br>

No c√≥digo que segue, o que ocorre se `x` e `y` forem iguais?

<br>

```{python}
# Inicializando x e y com os mesmos valores:
x = 7.6
y = 7.6

if x < y:
  print(f"{x} < {y}")
if x > y:
  print(f"{x} > {y}")
```

<br>

O c√≥digo ser√° executado, mas nenhum bloco de ambos os if's ir√£o ser
executados. Poder√≠amos querer tratar a condi√ß√£o que n√£o contempla as
duas condi√ß√µes das instru√ß√µes if's. Para isso, poder√≠amos utilizar a
instur√ß√£o `else`.

## `else`

<br>

Poder√≠amos ter resolvido a situa√ß√£o acima, para incluir todas as demais
situa√ß√µes poss√≠veis que n√£o encontram-se contempladas nas duas condi√ß√µes
das instru√ß√µes if's, assim:

<br>

```{python}
# Inicializando x e y com os mesmos valores:
x = 7.6
y = 7.6

if x < y:
  print(f"{x} < {y}")
if x > y:
  print(f"{x} > {y}")
else:
  print(f"{x} == {y}")
```

## else

<br>

A instru√ß√£o `else` com o seu bloco de instru√ß√µes Python estar√° associada
ao `if` mais pr√≥ximo. O bloco de instrui√ß√µes de comandos Python
associados √† instru√ß√£o `else` ser√° executado em qualquer situa√ß√£o que
n√£o for atendida a condi√ß√£o da instru√ß√£o `if` mais pr√≥xima. Portanto, se
a condi√ß√£o do `if` mais pr√≥ximo for `False`, o bloco de instrui√ß√µes do
`else` hierarquicamente mais pr√≥ximo ao `if` em quest√£o ser√° executado.

<br>

Al√©m disso, voc√™ poder√° ter if's e else's aninhados, a depender de sua
necessidade. Veja no exemplo que segue.

<br>

[Exemplo]{.red}: O programa abaixo calcula a conta de telefone com tr√™s
faixas de pre√ßos:

<br>

```{python}
#| results: hold
#| output-location: column-fragment

# Valor dos minutos utilizados:
minutos = 201

# Programa: conta de telefone por tr√™s faixas de pre√ßos
if minutos < 200:
  preco = 0.20
else:
  if minutos < 400:
    preco = 0.18
  else:
    preco = 0.15
print(f"Sua conta: R$ {minutos * preco:.<6.2f}")
```

## `elif`

<br>

[Exerc√≠cio]{.red}: Considere o c√≥digo que segue. Explique o que ele faz!

<br>

```{python}
x = 25
y = 15

if x < y:
    print("x √© menor que y")
else:
    if x > y and x % 2 == 0:
        print("x √© maior que y e √© um n√∫mero par")
    else:
        if x > y or x % 2 != 0:
            print("x √© maior que y ou √© um n√∫mero √≠mpar")
        else:
            print("x √© igual a y")
```

<br>

Uma forma mais conveniente para escrever instru√ß√µes `else-if` √© utilizar
a instru√ß√£o `elif`.

## `elif`

<br>

[Exemplo]{.red}: Compare o c√≥digo anterior, que utiliza as instru√ß√µes
`else-if` com o c√≥digo que utiliza a instru√ß√£o `elif`.

<br>

::: {.panel-tabset group="elif"}
## Usando `else-if`

```{python}
x = 25
y = 15

if x < y:
    print("x √© menor que y")
else:
    if x > y and x % 2 == 0:
        print("x √© maior que y e √© um n√∫mero par")
    else:
        if x > y or x % 2 != 0:
            print("x √© maior que y e √© um n√∫mero √≠mpar")
        else:
            print("x √© igual a y")
```

## Usando `elif`

```{python}
x = 25
y = 15

if x < y:
    print("x √© menor que y")
elif x > y and x % 2 == 0:
    print("x √© maior que y e √© um n√∫mero par")
elif x > y or x % 2 != 0:
    print("x √© maior que y e √© um n√∫mero √≠mpar")
else:
    print("x √© igual a y")
```
:::

## `elif`

<br> <br>

A vantagem de usar `elif` em vez de `if` e `else` √© que ele permite
testar v√°rias condi√ß√µes de uma s√≥ vez, sem a necessidade de aninhar
v√°rios `if` e `else` uns dentro dos outros. Isso faz com que o c√≥digo
fique mais limpo, f√°cil de ler e manter.

<br>

Al√©m disso, o uso de `elif` tamb√©m economiza tempo de processamento,
pois assim que uma condi√ß√£o √© verdadeira, o programa para de verificar
as outras condi√ß√µes e executa o c√≥digo correspondente. Se fosse usado
somente "if" e "else", todas as condi√ß√µes precisariam ser verificadas,
mesmo que uma j√° tenha sido verdadeira.

## Exerc√≠cios üìö

<br>

[Exerc√≠cio]{.red}: Escreva um programa que leia dois n√∫meros e que
pergunte qual opera√ß√£o voc√™ deseja realizar. Voc√™ deve poder calcular
soma (`+`), subtra√ß√£o (`-`), multiplica√ß√£o (`*`) e divis√£o (`/`).
Informe qual a opera√ß√£o foi escolhida e exiba o resultado da opera√ß√£o
solicitada.

<br>

[Exerc√≠cio]{.red}: Crie um programa em Python que pergunte ao usu√°rio
qual √© a sua idade e, com base nisso, informe se o usu√°rio √© considerado
crian√ßa, adolescente ou adulto. Utilize as seguintes faixas et√°rias:

::: nonincremental
-   Crian√ßa: at√© 12 anos
-   Adolescente: de 13 a 17 anos
-   Adulto: 18 anos ou mais
:::

[Exerc√≠cio]{.red}: Crie um programa em Python que, dada uma string,
informe se ela √© um pal√≠ndromo ou n√£o. Um pal√≠ndromo √© uma palavra ou
frase que √© lida da mesma forma da esquerda para a direita e da direita
para a esquerda. **Dica**: Se `s` √© uma string, lista ou tupla, ent√£o
voc√™ poder√° reverter utilizando passando o valor `-1` como o terceiro
√≠ndixe de indexa√ß√£o, ou seja, `s[::-1]` ir√° fornecer a a mesma
estrutura, com os elementos em ordem reversa.

## Exerc√≠cios üìö

<br>

[Exerc√≠cio]{.red}: Escreva um progama para aprovar o empr√©stimo banc√°rio
para compra de uma casa. O programa deve perguntar o valor da casa a
comprar, o sal√°rio e a quantidade de anos a pagar. O valor da presta√ß√£o
mensal n√£o pode ser superior a $30\%$ do sal√°rio. Calcule o valor da
presta√ß√£o como sendo o valor da casa a comprar dividido pelo n√∫mero de
meses a pagar.

<br>

::: columns
::: {.column width="50%"}
[Exerc√≠cio]{.red}: Escreva um programa que calcule o pre√ßo a pagar pelo
fornecimento de energia el√©trica. Pergunte a quantidade de kWh consumida
e o tipo de instala√ß√£o: R (residencias), I (ind√∫strias) e C (com√©rcios).
Calcule o pre√ßo a pagar de acordo a Tabela ao lado.
:::

::: {.column width="50%"}
| Tipo        | Faixa (kWh)   | Pre√ßo        |
|-------------|---------------|--------------|
| Residencial | At√© 500       | $R\$\, 0,40$ |
|             | Acima de 500  | $R\$\, 0,65$ |
| Comercial   | At√© 1000      | $R\$\, 0,55$ |
|             | Acima de 1000 | $R\$\, 0,60$ |
| Industrial  | At√© 5000      | $R\$\, 0,55$ |
|             | Acima de 5000 | $R\$\, 0,60$ |
:::
:::

## Exerc√≠cios üìö {background-image="imgs/rawpixel/image-from-rawpixel-id-3892634-jpeg.jpg" background-size="contain" background-position="right"}

<br> <br>

::: columns
::: {.column width="50%"}
[Exerc√≠cio]{.red}:Leia os Cap√≠tulo 1 e 2 do livro [Pense em
Python](https://pense-python.caravela.club/introducao.html).

<br> <br>

![](gifs/gifs-de-leitura.gif)
:::

::: {.column width="50%"}
:::
:::

## Exerc√≠cios üìö

<br> <br>

[Exerc√≠cio]{.red}: Crie um programa que pergunte a sigla de um pa√≠s ao
usu√°rio e de acordo com a sigla, seja informada a capital do pa√≠s.
Considere o dicion√°rio abaixo. Permita que o programa trate situa√ß√µes em
que o usu√°rio possa informar as siglas em ma√∫scula ou min√∫scula.
**Dica**: use a fun√ß√£o `in` para buscar se um elemento encontra-se
dentro da estrutura de dados.

<br>

``` python
paises = {
  'br': 'Bras√≠lia',
  'fr': 'Paris',
  'cl': 'Santiago',
  'us': 'Washington'
}
```

#  {.title background-image="imgs/rawpixel/freight.jpg"}

::: r-fit-text
[Estruturas repeti√ß√µes]{.flow}
:::

## Loops

<br>

As estruturas de repeti√ß√£o s√£o fundamentais em qualquer linguagem de
programa√ß√£o, e Python n√£o √© exce√ß√£o. Elas permitem que um trecho de
c√≥digo seja executado v√°rias vezes, dependendo de uma condi√ß√£o
espec√≠fica. Isso √© √∫til em muitas situa√ß√µes, como percorrer uma lista de
elementos, processar dados em um arquivo ou realizar c√°lculos
matem√°ticos.

<br>

Repeti√ß√µes representam a base de v√°rios programas. S√£o utilizadas para
executar a mesma parte de um programa v√°rias vezes, normalmente
dependendo de uma condi√ß√£o ou de um crit√©rio de parada.

<br>

Uma das instru√ß√µes de repeti√ß√£o amplamente utilizada √© a instru√ß√£o
`while`. Ela √© composta de seguinte forma:

<br>

``` python
while <condi√ß√£o>:
  bloco com
  instru√ß√µes Python
```

## Loops

<br>

A coindi√ß√£o do la√ßo `while` n√£o utiliza a nota√ß√£o "`< >`". O uso de
"`< >`" √© apenas para destacar a necessidade de haver uma condi√ß√£o.
Enquanto a condi√ß√£o for cerdadeira, as instru√ß√µes do la√ßo/loop `while`
ser√£o executadas.

<br>

[Exemplo]{.red}: A condi√ß√£o ao ser avaliada devolver√° um valor da classe
`bool`, isto √©, um `True` (condi√ß√£o verdadeira) ou `False` (condi√ß√£o
falsa). Portanto, poder√≠amos criar um loop infinito colocando a condi√ß√£o
como `True`.

<br>

``` python
# A instru√ß√£o print dentro do la√ßo while
# ser√° sempre executada, uma vez que a
# condi√ß√£o √© sempre verdadeira.
while True:
  print("Eu serei executado sempre!")
```

<br>

Cuidado com os loops infinitos! Eles s√£o √∫teis nas simula√ß√µes
estat√≠sticas, mas deve haver em seu interior algum teste de condi√ß√£o que
force a parada do la√ßo. Veremos isso em breve.

## Loops

<br>

No loop `while`, normalmente a condi√ß√£o envolve uma vari√°vel de
controle, em que devemos nos preocupar atualiz√°-la no interior do la√ßo
para que em alguma itera√ß√£o a condi√ß√£o do loop se torne falsa. Note, no
c√≥digo abaixo, que `x` √© incrimentada, e isso garante que em algum
momento a condi√ß√£o `x <= 3` se tornar√° falsa.

<br>

```{python}
x = 1
while x <= 3:
  print(x)
  x += 1
```

## Loops

<br>

No c√≥digo abaixo, s√£o gerados valores pseudo-aleat√≥rios no intervalo
fechado $[0, 10]$, em que os valores pares s√£o armazenados no objeto
`lista_pares` e todos os valores (par ou n√£o) s√£o acumulados no objeto
`acumulado`. O la√ßo para, quando a condi√ß√£o `acumulado <= 100` n√£o for
mais atendia.

<br>

```{python}
#| results: hold

# Biblioteca com m√©todos para gera√ß√£o de n√∫meros
# pseudo-aleat√≥rios.
import random

# Fixando uma semente que garante que os
# n√∫meros gerados aleatoriamente ser√£o
# sempre os mesmos ao executarmos todo
# o c√≥digo que segue.
random.seed(0)
lista_pares = []
acumulado = 0

while acumulado <= 100:
    valor = random.randint(0, 10)
    if(valor % 2 == 0):
        lista_pares.append(valor)
    acumulado +=  valor

print(f"Valor acumulado: {acumulado}")
print(f"Lista com os pares: {lista_pares}")
```

## Loops

<br>

Em muitas vezes √© √∫til utilizar o la√ßo `while` quando n√£o sabemos o
n√∫mero de itera√ß√µes que ser√° realizado. Pense em um problema em que a
vari√°vel de controle na condi√ß√£o do `while` √© aleat√≥ria. Veja o caso
abaixo:

<br>

```{python}
import random

random.seed(0)

i = 0
lista = list()
while i <= 5:
  i = random.randint(0, 10)
  lista.append(i)

print(f"lista = {lista}")
```

Simplesmente olando para o c√≥digo acima, n√£o seria poss√≠vel dizer quais
os valores em a quantidade de elementos em `lista`. Isso porqu√™ a
vari√°vel de controle `i` √© obtida de forma pseudo-aleat√≥ria.

## Loops

<br>

A instr√ß√£o de loop `for` √© √∫til quando o conjunto que iremos iterar est√°
bem definido, isto √©, conhecemos o conjunto e a quantidade de elementos.

<br>

Nesse sentido, a estrutura de repeti√ß√£o `for` torna-se adequada para
iterarmos em uma estrutura de dados, como uma lista, tupla, conjunto ou
dicion√°rio.

<br>

``` python
for i in <conjunto>:
  instru√ß√µes associadas
  ao bloco de instru√ß√µes
  for
```

<br>

Na forma geral acima, `<conjunto>` √© alguma estrutura de dados de Python
e n√£o necessariamente objetos da classe `set`. √â tudo aquilo que voc√™
deseja percorrer, normalmente uma lista, tupla, dicion√°rio, conjunto,
arrays de Numpy, Data Frame de Pandas, ou toda e qualquer outra
estrutura de dados.

## Loops

<br>

Onde voc√™ consegue utilizar a instru√ß√£o `for` voc√™ tamb√©m conseguir√°
utilizar a instur√ß√£o `while`, uma vez que tudo que voc√™ poder√° fazer
utilizando um `for` tamb√©m poder√° ser feito com um `while`. Por√©m, o uso
do `for` √© mais adequado quando conhecemos a estrutura de queremos
iterar, uma vez que n√£o precisamos nos preocupara o comprimento dela.

<br>

[Exemplo]{.red}: No exemplo que segue, o c√≥digo toma a raiz quadrada dos
elementos da lista `x` e acumula o seu valor. Compare o uso das
instru√ß√µes `for` e do `whilhe` resolvendo o mesmo problema.

<br>

::: {.panel-tabset group="elif"}
## Utilizando `for`

```{python}
import random
import math

x = [1.2, 4.3, 0.22, 4.3, 5.52, 3.63, 1.01, 2.2]

acumulado = 0
for i in x:
   acumulado += math.sqrt(i)

print(f"Sqrt(acumulado) = {round(acumulado, 2)}")
```

## Utilizando `while`

```{python}
import random
import math

x = [1.2, 4.3, 0.22, 4.3, 5.52, 3.63, 1.01, 2.2]
n = len(x) # Comprimento da estrutura de dados x
acumulado = 0
i = 0 # Vari√°vel de controle do la√ßo while
while i < n:
   acumulado += math.sqrt(x[i])
   i += 1

print(f"Sqrt(acumulado) = {round(acumulado, 2)}")
```
:::

## Loops

<br>

Podemos utiliza a fun√ß√£o `range` para gerar listas simples. A fun√ß√£o
`range` n√£o retorna um objeto da classe `list` proprieamente dito. A
fun√ß√£o `range` ir√° retornar um gerador.

<br>

Iremos falar mais a frente como construir nossos geradores, que s√£o
objetos que permitem percorrer os itens de uma cole√ß√£o (como uma lista
ou string) de forma sequencial, por√©m, sem armazenar toda a sequ√™ncia na
mem√≥ria.

<br>

```{python}
for i in range(5):
  print(f"i = {i}")
```

## Loops

<br>

[Exemplo]{.red}: Voc√™ tamb√©m poder√° utilizar mais vari√°veis para poder
iterar, a depender da dimens√£o de cada elemento do objeto que deseja
percorrer. Note que no exemplo abaixo, cada elemento de `obj_1` √© uma
tupla com tr√™s elementos e cada elemento de `obj_2` √© uma lista com cada
elemento sendo uma outra lista com tr√™s elementos. Voc√™ poderia criar
`obj_3` de forma an√°loga sendo uma tupla de tuplas com tr√™s elementos.

<br>

```{python}
# Uma lista de tuplas:
obj_1 = [("S√£o Paulo", "S√£o Paulo", "Sudeste"), ("Rio de Janeiro", "Rio de Janeiro", "Sudeste"), ("Belo Horizonte", "Minas Gerais", "Sudeste")]

# Uma lista de listas:
obj_2 = [["S√£o Paulo", "S√£o Paulo", "Sudeste"], ["Rio de Janeiro", "Rio de Janeiro", "Sudeste"], ["Belo Horizonte", "Minas Gerais", "Sudeste"]]

for x, y, z in obj_1:
    print("Cidade:", x, "| Estado:", y, "| Regi√£o:", z)

for x, y, z in obj_2:
    print("Cidade:", x, "| Estado:", y, "| Regi√£o:", z)
```

## `range` e `enumerate`

<br>

Voc√™ poder√° transformar um `range` em uma lista ou tupla, envolvendo
`range` por `list` ou `tuple`, respectivamente. Se n√£o for especificado
um valor m√≠nimo, o gerador come√ßar√° em `0`.

<br>

```{python}
#| results: hold
#| output-location: column-fragment
r1 = range(5)
r2 = range(2, 5)

for i in r1:
  print(f"{i}")

print("\n")

for i in r2:
  print(f"{i}")
```

<br>

Note que a o √∫ltimo elemento n√£o √© incluindo, do mesmo modo quando
utilizamos fatiamento de listas e tuplas, e queremos acessar um
subconjunto.

## `range` e `enumerate`

<br>

A fun√ß√£o `range()` adimite tr√™s argumentos, o primeiro e o segundo dizem
respeito ao in√≠cio e fim da sequ√™ncia (fim n√£o incluso) e o terceiro
refere-se ao passo da sequ√™ncia. Estude o c√≥digo que segue. A fun√ß√£o
`itre()` constroi um iterador que √© uma sequ√™ncia de valores, acessadas
uma de cada vez, com a fun√ß√£o `next()` ou com o m√©todo `__next__()`

<br>

```{python}
#| results: hold
# Criando uma gerador de sequ√™ncia de valores convertendo-o
# para um iterador com a instru√ß√£o iter():
x = iter(range(0, 20, 2))

# Verificando o comprimento do iterador x:
n = x.__length_hint__()

# Obtendo o primeiro elemento do iterador x:
p1 = x.__next__() # ou next(x)

# Obtendo o segundo elemento do iterador x:
p2 = x.__next__() # ou next(x)

print(f"p1 = {p1}")
print(f"p2 = {p2}")
```

<br>

Note que a cada chamada de `__next()__`, damos um passo no iterador,
isto √©, acessamos o pr√≥ximo elemento.

## `range` e `enumerate`

<br>

Com a fun√ß√£o `enumarate`, poderemos ampliar as funcionalidades do loop
`for` de forma f√°cil. Muitas vezes desejamos acessar o elemento de uma
sequ√™ncia e sua posi√ß√£o.

<br>

Normalmente √© utilizada para iterar sobre uma lista e adicionar um
√≠ndice num√©rico a cada item. Ela √© muito √∫til quando precisamos acessar
tanto o item da lista quanto o seu √≠ndice, pois evita que seja
necess√°rio criar uma contagem manual.

<br>

```{python}
frutas = ["uva", "ma√ß√£", "lim√£o", "uva", "banana", "morango"]

for i, v in enumerate(frutas):
  print(f"{i} = {v}")
```

## `range` e `enumerate`

<br> <br>

A fun√ß√£o `range()` cria uma sequ√™ncia de valores inteiros. A partir de
m√©todos da biblioteca Numpy, que ser√£o apresentados mais adiante no
curso, saberemos criar uma sequ√™ncia de valores reais. Os m√©todos da
biblioteca Numpy s√£o computacionalmente eficientes, mas nada impede que
voc√™ crie um c√≥digo para retornar uma lista de valores do tipo `float`.
Bastaria utilizar uma estrutura de repeti√ß√£o.

<br>

Algumas observa√ß√µes a respeito do c√≥digo anterior. A fun√ß√£o
`enumerate()` retorna um objeto enumerado a partir do valor `0` (zero).
Caso tenha interesse em come√ßar a enumera√ß√£o por outro valor, passe o
valor iniciar como segundo argumento da fun√ß√£o, isto √©, passe o valor de
inc√≠cio ao argumento `start` da fun√ß√£o `enumerate()`.

<br>

Com o m√©todo `enumerate()` conseguiremos enumear listas, tuplas,
dicion√°rios e conjuntos.

## `range` e `enumerate`

<br>

[Exemplo]{.red}: Percorrendo uma lista, tupla, dicion√°rio e conjuntos em
Python. Note que no loop `for` duas vari√°veis, `a` e `b` foram
utilizadas, assim como no exemplo anterior. Isso se deve ao fato de que
a fun√ß√£o enumerate retorna um objeto enumer√°vel com duas informa√ß√µes.
Veja, por exemplo, que o retorno de `list(enumerate(x))` √© uma lista de
tuplas com dois elementos.

<br>

``` python
x = [[1, 2, 3], [4, 5, 6]]
y = ((1, 2, 3), (4, 5, 6))
z = {1, 2, 3, 4, 5, 6}
w = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}

# Enumerando x:
for a, b in enumerate(x):
   print(f"{a}: {b}")

# Enumerando y:
for a, b in enumerate(y):
   print(f"{a}: {b}")

# Enumerando z:
for a, b in enumerate(z):
   print(f"{a}: {b}")

# Enumerando w:
for a, b in enumerate(w):
   print(f"{a}: {b}")

# Convertendo um enumerate para uma lista:
print(list(enumerate(x)))
```

## `zip`

<br>

A fun√ß√£o `zip` em Python √© utilizada para juntar elementos de diferentes
sequ√™ncias (como listas, tuplas ou strings) em pares. Ela retorna um
objeto iter√°vel, chamado de "zip object", que pode ser convertido em uma
lista, tupla ou dicion√°rio.

<br>

```{python}
lista1 = [1, 2, 3]
lista2 = [4, 5, 6, 7]
zip_obj = zip(lista1, lista2)
resultado = list(zip_obj)
print(resultado)
```

## `zip`

<br>

No exemplo anterior, note que as tuplas foram formadas at√© a quantidade
de elementos da lista menor. Se voc√™ desejar completar os elementos
faltantes das listas de dimens√µes menores com um valor padr√£o, a fun√ß√£o
`zip_longest` pode ser uma solu√ß√£o, bastando informar o valor faltante
ao argumento `fillvalue`. Ela funciona de forma semelhante a fun√ß√£o
`zip` padr√£o, por√©m, permite acrescentar um valor padr√£o para completar
as sequ√™ncias incompletas.

<br>

```{python}
from itertools  import zip_longest

lista1 = [1, 2, 3]
lista2 = [4, 5, 6, 7]
# Preenchendo com 0 os elementos de lista1:
zip_obj = zip_longest(lista1, lista2, fillvalue = 0)
resultado = list(zip_obj)
print(resultado)
```

## Desempacotamento

<br>

O desempacotamento, tamb√©m conhecido como **unpacking** em ingl√™s, √© uma
t√©cnica utilizada em Python para atribuir os elementos de uma cole√ß√£o,
como listas, tuplas, conjuntos e dicion√°rios, a vari√°veis individuais.
Isso pode ser muito √∫til quando precisamos trabalhar com dados
estruturados e queremos acessar os elementos de forma mais f√°cil e
organizada. Estude o c√≥digo abaixo. Note que `*` √© utilizado para
indicar que a vari√°vel ao lado ir√° receber os elementos extras.

<br>

```{python}
nomes = ["Emanuelle", "Waleska", "Almeida", "Farias"]

# Desempacotando os elementos de "nomes" e atribuindo
# √†s vari√°veis nome1 √† nome4:
nome1, nome2, nome3, nome4 = nomes

# Poder√≠amos estar interessados em fazer
# uma atribui√ß√£o parcial. Os objetos
# "a" e "b" ir√£o receber o primeiro
# e os demais elementos, respectivamente:
a, *b = nomes

print(f"a = {a} e b = {b}")
```

## Desempacotamento

<br>

A t√©cnica de desempacotamento tamb√©m poder√° ser utilizada em dicion√°rios
para desempacotar chaves e valores. Por exemplo:

<br>

```{python}
# Dicion√°rio com nomes de pessoas
# e suas respectivas idades:
pessoas = {'Maria': 20, 'Jo√£o': 10, 'Laura': 25}

nome, *demais_nomes = pessoas.keys()
idade, *demais_idades = pessoas.values()

print(f'Meu nome √© {nome} e tenho {idade} anos!')
```

## Loops aninhados

<br>

Se a l√≥gica do problema que voc√™ precisa resolver exigir, voc√™ poder√°
aninhar loops, assim como poder√° aninhar estruturas de condi√ß√µes como
`if` e `else` abordadas anteriormente.

<br>

[Exemplo]{.red}: Tabuada de 1 a 10 utilizando duas estrutudas de
repeti√ß√£o `for` aninhadas. Voc√™ poderia resolver o mesmo problema
utilizando `while`. Por√©m, escolher o loop `for` √© conveninente, uma vez
que sabemos exatamente sobre quais conjuntos deveremos iterar. Com o
`for` n√£o preicisamos, nesse caso, nos preocuparmos com incremento de
vari√°veis.

<br>

::: {.panel-tabset group="elif"}
## Utilizando `for`

``` python
for i in range(1, 11):

   print(f"{15*'-'}")

   for j in range(1, 11):
        result = i * j
        print(f"{i} x {j} = {result}")
```

## Utilizando `while`

``` python
i = 1
while i < 11:
    print(f"{15*'-'}")
    j = 1
    while j < 11:
        result = i * j
        print(f"{i} x {j} = {result}")
        j += 1
    i += 1
```
:::

## `break` e `continue`

<br>

As instru√ß√µes `break` e `continue` s√£o utilizadas para controlar o fluxo
de execu√ß√£o de loops, `for` e `while`, em Python. A primeira (`break`),
√© √∫til quando desejamos interromper toda a execu√ß√£o do loop, antes mesmo
do final da condi√ß√£o do loop `while` ser atendida ou antes do loop `for`
iterar sobre um objeto iter√°vel. J√° a segunda (`continue`) √© √∫til quando
desejamos saltar uma determinada itera√ß√£o, tamb√©m podendo ser aplicada
tanto na instru√ß√£o `for` quando `while`.

<br>

Seja `break` ou `continue`, ambas necessitam estar associadas a uma
instru√ß√£o condicional, isto √©, associados √† um `if` ou `else` no
interior do la√ßo que ser√° interrompido pelo uso do `break` ou cuja a
itera√ß√£o ser√° saltada para pr√≥xima itera√ß√£o com o uso do `continue`.

## `break` e `continue`

<br>

[Exemplo]{.red}: O c√≥digo a seguir gera um n√∫mero aleat√≥rio entre 1 e 10
e armazena-o na vari√°vel magic_number. O jogador ent√£o tenta adivinhar o
n√∫mero m√°gico usando o comando input. Se o jogador acertar o n√∫mero
m√°gico, o loop √© interrompido usando o comando break e o jogo termina.
Caso contr√°rio, o jogador √© instru√≠do a tentar novamente.

<br>

``` python
# M√≥dulo Python para gera√ß√£o de n√∫meros
# pseudo-aleat√≥rios:
import random

# Fixando uma semente:
random.seed(0)

# Gerando uma observa√ß√£o inteira no
# intervalo fechado [1, 10]:
magic_number = random.randint(1, 10)

while True:
    guess = int(input("Adivinhe o n√∫mero m√°gico entre 1 e 10: "))
    if guess == magic_number:
        print("Acertou!")
        break
    else:
        print("Tente novamente.")
```

## `break` e `continue`

<br>

[Exemplo]{.red}: O c√≥digo identifica se um n√∫mero inteiro maior que 2 √©
um n√∫mero primo. Ser√° considerado primo, todo n√∫mero inteiro maior que 1
que √© divis√≠vel apenas por 1 ou por ele mesmo. O la√ßo `while` apenas ir√°
terminar, caso o n√∫mero informado n√£o seja primo. Note que no segundo
loop (la√ßo `for`), `j` ir√° variar de `2` √† `num - 1`.

<br>

``` python
while True:

    num = int(input("Insira um n√∫mero inteiro: "))

    if type(num) != int or num < 2:
        print("Por favor, insira um n√∫mero inteiro maior que 2")
        continue

    for j in range(2, num):
        if num % j == 0:
            print("N√£o √© primo. La√ßo interrompido.")
            break
    else:
        print("√â primo. Continuando o la√ßo...")
        continue
    break
```

## Biblioteca `turtle` üê¢

<br>

O Turtle ("Tartaruga" em ingl√™s) √© um m√≥dulo do Python para desenhar
utilizando a l√≥gica de programa√ß√£o. √â uma extens√£o da linguagem de
programa√ß√£o chamada
[Logo](https://en.wikipedia.org/wiki/Logo_(programming_language)), a
qual foi criada em 1967.

<br>

A ideia principal do Turtle √© que temos uma Tartaruga em um canvas (tela
para desenho), onde utilizamos comandos estruturados em uma determinada
l√≥gica para criarmos o nosso desenho.

<br>

A ideia principal √© praticar l√≥gica de programa√ß√£o desenhando.

<br>

![](gifs/lapis.gif)

## Biblioteca `turtle` üê¢

<br>

Abrindo uma janela para desenhar usando instru√ß√µes de `turtle`:

<br>

::: {.panel-tabset group="elif"}
## C√≥digo

``` python
# Importando o m√≥dulo:
import turtle

# Utilizando a fun√ß√£o Turtle() do m√≥dulo turtle:
tartaruga = turtle.Turtle()

# Escolhendo o formato do cursor. Poderia ser:
# "turtle", "arrow", "blank", "circle", "square" e
# "triangle":
tartaruga.shape("turtle")

tartaruga.color("blue") # Colocando uma cor na tartaruga.

turtle.exitonclick() # Permite fechar a janela clicando.
turtle.bye() # Finaliza a inst√¢ncia do objeto tartaruga.
```

## V√≠deo

![](videos/turtle_01.webm)
:::

## Biblioteca `turtle` üê¢

<br>

Voc√™ poder√° alterar a cor e movimentar a tartaruga para frente ou para
tr√°s, com base para onde a tartaruga est√° "olhando" utilizando os
m√©todos `color()`, `forward()` e `back()`, respectivamente. Comandos
como `right()` e `left()` movimenta o cursor uma quantidade de graus
para direta e esquerda, respectivamente. Alguns outros detalhes no
c√≥digo que segue. Leia sempre os coment√°rios! Voc√™ poder√° obter cores em
diversas ferramentas na internet. Por exemplo, clique
[AQUI](https://trinket.io/docs/colors).

<br>

::: {.panel-tabset group="elif"}
## C√≥digo

``` python
import turtle

tartaruga = turtle.Turtle()
tartaruga.shape("turtle")

# Aumentando a largura da caneta:
tartaruga.pensize(6)

# Desenhando um c√≠ruclo de raio 150 pixels:
tartaruga.circle(150)

# Alterando a cor da caneta
# Informando a cor em nota√ß√£o hexadecial
# Sistema RGB:
tartaruga.color("#ec407a")

# Desenhando um quadrado de lados medindo
# 150 pixels:
tartaruga.forward(155)
tartaruga.left(90)
tartaruga.forward(300)
tartaruga.left(90)
tartaruga.forward(300)
tartaruga.left(90)
tartaruga.forward(300)
tartaruga.left(90)
tartaruga.home() # Retorna √† origem do sistema de coordenadas

# Permite fechar a janela clicando nela:
turtle.exitonclick()
# Finaliza o objeto caneta:
turtle.bye()
```

## V√≠deo

![](videos/turtle_02.webm)
:::

## Biblioteca `turtle` üê¢

<br>

Um m√©todo √∫til √© o de levantar a caneta (m√©todo `penup()`). Por exemplo,
voc√™ poderia estar interessado em tracejar. Estude o c√≥digo que segue:

<br>

::: {.panel-tabset group="elif"}
## C√≥digo

``` python
import turtle

tartaruga = turtle.Turtle() # Abrindo janela.
tartaruga.pensize(4) # Espessura do tra√ßo.
tartaruga.shape("turtle") # Formato do cursor.

# Desenhando uma linha, a partir da origem
for i in range(11):
    tartaruga.pendown() # Colocando a caneta no "papel"
    tartaruga.fd(10) # mesmo que t.forward(10)
    tartaruga.penup() # Levantando a caneta
    tartaruga.fd(10) # mesmo que t.forward(10)

for i in range(11):
    tartaruga.pendown() # Colocando a caneta no "papel"
    tartaruga.circle(10*i + 100) # Desenhando c√≠ruclos

# Permite fechar a janela clicando nela:
turtle.exitonclick()
# Finaliza o objeto caneta:
turtle.bye()
```

## V√≠deo

![](videos/turtle_03.webm)
:::

## Biblioteca `turtle` üê¢

<br>

Podemos estar interessados em tracejar at√© um ponto espec√≠fico, al√©m de
preencher com alguma cor, uma regi√£o. No c√≥digo abaixo, os m√©todos
`fillcolor()`, `begin_fill()`, `end_fill()`, entre outros s√£o
apresentados. Estude o c√≥digo e entenda o que cada m√©todo faz.
Experimentar √© a melhor forma de aprender! Demais coment√°rios
encontram-se no c√≥digo abaixo.

<br>

::: {.panel-tabset group="elif"}
## C√≥digo

``` python
import turtle

# A classe Screen() √© √∫til para gerenciar a
# janela em que iremos desenhar:
tela = turtle.Screen()
tela.bgcolor("#ec407a") # Atribuindo uma cor ao background.

# A classe Turtle cont√©m m√©todos para desenhar
# na tela:
tartaruga = turtle.Turtle()

# Espessura da caneta:
tartaruga.pensize(4)

# Desenhando um tri√¢ngulo:
tartaruga.shape("turtle")

tartaruga.fillcolor("blue") # Cor do preenchimento do tri√¢ngulo.
tartaruga.begin_fill() # Informando onde ir√° come√ßar o preenchimento.
tartaruga.pendown() # Colocando a caneta no papel.
tartaruga.sety(250) # Sobe 250 p√≠xel para cima.
tartaruga.setpos(250,0) # Desenhando dolocal anterior da caneta at√© o ponto (250, 0).
tartaruga.home() # Riscando uma reta do local onde a caneta est√° at√© a origem.
tartaruga.end_fill() # Diz onde termina o preenchimento.

# Permite fechar a janela clicando nela:
turtle.exitonclick()
# Finaliza o objeto caneta:
turtle.bye()
```

## V√≠deo

![](videos/turtle_04.webm)
:::

## Exerc√≠cios üìö

<br>

[Exerc√≠cio]{.red}: Crie um programa em Python que itere sobre um
dicion√°rio de produtos de supermercado e imprima o nome do produto e seu
pre√ßo correspondente. O dicion√°rio deve conter pelo menos 5 itens. Use
um la√ßo for para iterar sobre o dicion√°rio.

<br>

[Exerc√≠cio]{.red}: Encontre a primeira raiz quadrada perfeita de um
n√∫mero maior ou igual a 100. Utilize `if`, `else` e `break`.

<br>

[Exerc√≠cio]{.red}: Escreva um programa em Python que imprima todos os
n√∫meros primos entre 1 e 100. Utilize o la√ßo `while` para iterar de 1 a
100 e dentro do la√ßo, verifique se o n√∫mero atual √© primo ou n√£o usando
um outro la√ßo for. Se o n√∫mero for primo, imprima-o. Caso contr√°rio, use
a instru√ß√£o continue para pular para a pr√≥xima itera√ß√£o.

## Exerc√≠cios üìö

<br>

[Exerc√≠cio]{.red}: Implemente um c√≥digo Python, utilizando la√ßos, de
forma que forne√ßa a seguinte sa√≠da:

<br>

```{python}
#| echo: false
for i in range(1, 4):
    for j in range(1, 4):
        print(i, j)
```

<br>

[Exerc√≠cio]{.red}: Crie um programa que calcule a soma dos n√∫meros
√≠mpares entre 1 e 100, usando um loop. Al√©m disso, o programa deve
contar quantos n√∫meros √≠mpares existem entre 1 e 100 e imprimir o
resultado.

## Exerc√≠cios üìö

<br> <br>

[Exerc√≠cio]{.red}: Salve em uma lista todos os n√∫meros perfeitos entre 1
e 1000 Um n√∫mero √© dito perfeito quando a soma dos seus divisores
(exceto ele mesmo) √© igual a ele mesmo. Por exemplo, o n√∫mero 6 √©
perfeito, pois 1 + 2 + 3 = 6.

<br>

[Exerc√≠cio]{.red}: Crie um programa, em Python, que calcule o fatorial
de um n√∫mero `n`. Denfini√ß√£o: definimos como fatorial de $n$,
matematicamente escrevemos $n!$, como sendo:

$$n! = n \times (n-1) \times (n-2) \times \cdots \times 1,$$ com
$0! = 0$.

## Exerc√≠cios üìö

<br>

[Exerc√≠cio]{.red}: Escreva um programa, em Python, em que dever√°
aproximar o valor de $\pi = 3.141592653589793\cdots$, at√© uma precis√£o
`e = 1e-3`, ou seja, o resultado da aproxima√ß√£o `result` deve ser tal
que $|result - math.pi| \leq \mathrm{e}$. O programa dever√° utilizar
para aproxima√ß√£o com base na serie abaixo. Note que aproximar $\pi/4$
equivale a aproximar $\pi$, bastando multiplicarmos por 4 a aproxima√ß√£o
de $\pi/4$.

<br>

$$\pi/4 = \sum_{n = 0}^{\infty} = \frac{2}{(4n + 1)(4n + 3)}.$$ <br>

[Exerc√≠cio]{.red}: Crie um programa, em Python, que aproxime o valor de
$\mathrm{e}^x$, utilizando a s√©rie de pot√™ncia abaixo:

$$\mathrm{e}^x = \sum_{n=0}^\infty \frac{x^n}{n!} = 1 + x + \frac{x^2}{2!} + \frac{x^3}{3!} + \cdots.$$
**Dica**: N√£o poderemos fazer uma soma infinita. Sendo assim, seu c√≥digo
dever√° especificar o n√∫mero de termos que ser√£o somados. Al√©m disso,
voc√™ poder√° utilizar os m√©todos matem√°ticos da biblioteca `math`.

## Exerc√≠cios üìö

<br>

[Exerc√≠cio]{.red}: Crie um programa, em Python, que aproxime o valor de
$\sin(x)$ com base na s√©rie de pot√™ncia abaixo at√© uma precis√£o menor ou
igual √† `e = 1e-3`, ou seja, o resultado da aproxima√ß√£o `result` deve
ser tal que $|result - math.sin(x)| \leq \mathrm{e}$.

<br>

$$\sin(x) = \sum_{n = 0}^{\infty}\frac{(-1)^n x^{2n + 1}}{(2n + 1)!} = x - \frac{x^3}{3!} + \frac{x^5}{5!} - \frac{x^7}{7!} + \cdots.$$
<br>

[Exerc√≠cio]{.red}: Sua empresa possui v√°rias filiais espalhadas pelo
pa√≠s e deseja calcular a m√©dia de vendas de cada produto em cada uma das
filiais. Os dados encontram-se no dicion√°rio fornecido logo abaixo. Note
que cada elemento do dicion√°rio `vendas` √© um dicion√°rio de uma filial.

<br>

```{python}
vendas = {
    'filial1': {
        'produto1': [10, 20, 30, 40],
        'produto2': [15, 25, 35],
        'produto3': [5, 15]
    },
    'filial2': {
        'produto1': [15, 25, 35],
        'produto2': [20, 30, 40],
        'produto3': [10, 20, 30]
    },
    'filial3': {
        'produto1': [20, 30, 40, 50],
        'produto2': [25, 35, 45],
        'produto3': [15, 25]
    }
}
```

Escreva um c√≥digo Python que itere sobre o dicion√°rio acima e calcule a
m√©dia de vendas de cada produto em cada filial. **Dica**: √© conveniente
que o programa retorne um dicion√°rio an√°logo ao fornecido, por√©m, com
uma m√©dia de cada produto.

## Exerc√≠cios üìö

<br>

[Exerc√≠cio]{.red}: Utilizando a biblioteca `turtle`, crie um c√≥digo em
Python para desenhar 36 quadrados em uma janela. Cada quadrado dever√°
ter um lado de comprimento 100 pixels e dever√° ser desenhado com um
√¢ngulo de rota√ß√£o de 10 graus em rela√ß√£o ao quadrado anterior. Utilize a
a espessura da caneta igual √† 4. Se tudo for implementado corretamente,
a imagem a ser gerada ser√° id√™ntica a de baixo:

<br>

![](imgs/turtle_exercicio_01.png){width="100"}

## Exerc√≠cios üìö

<br>

[Exerc√≠cio]{.red}: Crie um c√≥digo em Python, para desenhar a imagem
abaixo, utilizando a biblioteca `turtle`. O c√≥digo dever√° desenhar
quadrados, com o tamanho dos lados variando em 5 pixels em cada
quadrado. Voc√™ dever√° desenhar 50 quadrados:

<br>

![](imgs/quadrados_turtle.png){width="30%"}

## Exerc√≠cios üìö

<br>

[Exerc√≠cio]{.red}: Crie um c√≥digo em Python que retorne em forma de
"√°rvore" numerada abaixo:

<br>

```{python}
#| echo: false
for i in range(1, 11):
    for j in range(1, i + 1):
        print(j, end=" ")
    print("")
```

<br>

**Dica**: A fun√ß√£o `print()` possui o argumento `end` que permite
controlarmos as separa√ß√µes em cada `print`. Por padr√£o, a separa√ß√£o √©
`\n`, isto √©, nova linha.

## Exerc√≠cios üìö

<br>

[Exerc√≠cio]{.red}: Implemente, utilizando instru√ß√µes de loop, um c√≥digo
Python e construa a "√°rvore" abaixo:

<br>

```{python}
#| echo: false

for i in range(7):
    for j in range(i+1):
        if j % 2 == 0:
            print("+", end = "")
        else:
            print("-", end = "")
    print("\n")
```

## List Comprehensions

<br>

A ideia por tr√°s de [list
comprehensions](https://pt.wikipedia.org/wiki/Compreens%C3%A3o_de_lista)
em Python √© fornecer uma forma concisa de criar listas baseadas em um
iter√°vel.

<br>

Elas s√£o importantes porque permitem que voc√™ execute opera√ß√µes em cada
elemento de um iter√°vel e produza uma nova lista como resultado, tudo em
uma √∫nica linha de c√≥digo, tornando o seu c√≥digo mais enxuto e leg√≠vel.

<br>

Al√©m disso, [list
comprehensions](https://pt.wikipedia.org/wiki/Compreens%C3%A3o_de_lista)
s√£o geralmente mais r√°pidas do que loops comuns devido a sua otimiza√ß√£o
interna.

<br>

O conceito de list comprehensions foi herdado do
[Haskell](https://en.wikipedia.org/wiki/Haskell), uma linguagem de
[programa√ß√£o
funcional](https://pt.wikipedia.org/wiki/Programa%C3%A7%C3%A3o_funcional).
Desde ent√£o, ele se tornou um recurso comum em muitas linguagens de
programa√ß√£o, incluindo Python.

<br>

![Logo da linguagem de programa√ß√£o Haskell. Haskell √© uma linguagem de
programa√ß√£o com paradigma de programa√ß√£o funcional. Python herdou alguns
conceitos do paradigma de programa√ß√£o funcional. O conceito de list
comprehensions √© um deles.](imgs/haskell.png){width="40%"}

## List Comprehensions

<br>

A forma geral de escrita de uma list comprehensions √©:

<br>

``` python
[expression for item in iterable if condition]
```

<br>

em que:

<br>

::: nonincremental
1.  `expression` √© uma express√£o de retorno. S√£o os elementos que ir√£o
    compor sua lista;
2.  `item` √© o elemento que ir√° variar no iter√°vel. A depender do
    iter√°vel, pode ser mais de um elemento;
3.  `iterable` √© um objeto iter√°vel. Pode ser uma lista, tupla,
    conjunto, entre outros;
4.  `condition` √© uma cl√°usula opcional que especifica uma condi√ß√£o
para filtrar os elementos do iter√°vel.
:::

## List Comprehensions

<br>

[Exemplo]{.red}: introduzindo os valores de `2 * x` em uma lista `L`
utilizando a instru√ß√£o `for` e o conceito de list comprehensions.

<br>

::: {.panel-tabset group="elif"}
## Usando list comprehensions

<br>

```{python}
L = [2 * x for x in range(10)]
print(L)
```

## Usando `for`

<br>

```{python}
L = []
for x in range(10):
  L.append(2 * x)
print(L)
```
:::

## List Comprehensions

<br>

Tambe·∏ø poderemos utilizar list comprehensions para criar listas mais
complexas, como por exemplo:

<br>

```{python}
y = [(x , 2 * x) for x in [1, 2, 3]]
print(y)
```

<br>

No exemplo acima, criamos uma lista de tuplas, em que o primeiro
elemento de cada tupla s√£o os respectivos valores de `x` e o segundo √©
`2 * x`. Um outro exemplo:

<br>

```{python}
y = [(x, y) for *x, y in [(4, 2, 3), (10, 1, 2), (8, 7, 9)]]
print(y)
```

<br>

Note que `*x` √© uma simples desempacotamento de tuplas que ser√£o
divididas em duas partes, `*x` e `y`, respectivamente.

<br>

## List Comprehensions

<br>

[Exemplo]{.red}: A express√£o poder√° conter fun√ß√µes matem√°ticas dos
itens. Em breve, quando voc√™ aprender a criar suas fun√ß√µes em Python,
poder√° utiliz√°-las em compreens√µes de listas para construir listas de
valores que desejar. O c√≥digo que segue resultar√° em uma lista que √© o
resultado da soma da ra√≠z quadrada do primeiro elemento da tupla com o
seno do segundo elemento, se a soma dos elementos for par.

<br>

```{python}
import math
L = [(1, 5), (2, 4), (3, 4), (6, 2), (2, 1)]

operacao = [round(math.sqrt(x) + math.sin(y), 4) for x, y in L if (x + y) % 2 == 0]

print(operacao)
```

## List Comprehensions

<br>

Compreens√£o de listas tamb√©m podem ser aninhadas. Por exemplo, considere a lista de listas abaixo:

<br>

```{python}
m = [
  [1, 2, 3, 4],
  [5, 6, 7, 8],
  [9, 10, 11, 12]
]
```

<br>

[Um pequeno par√™ntese]{.red}:

<br>

voc√™ poder√° pensar em listas de listas como arrays, uma vez que com a
biblioteca Numpy, √∫til para computa√ß√£o num√©rica em Python, arrays s√£o
escritos como lista de listas. Arrays 2d s√£o comumente chamdos de
matrizes e 1d pode ser entendido como um vetor. No caso mais gen√©rico
(arrays N-dimensionais), chamamos simplesmente de arrays.

<br>

A linguagem Python n√£o suporta arrays nativamente. Por√©m, isso n√£o √© um problema, pois arrays s√£o bem implementados na biblioteca Numpy. Em
breve falaremos da biblioteca Numpy.

<br>

Alguns materiais citam `m`, como uma matriz, assumindo que voc√™ estar√°
usando a biblioteca Numpy. Por√©m, lembre-se: **n√£o h√° suporte nativo √†
arrays em Python, e `m` √© apenas uma lista de listas**.

## List Comprehensions

<br>

Voltando ao que fal√°vamos: **aninhamento de compreens√µes de listas**, e seja `m` na forma anterior (um lista de listas). Por√©m, para melhorar a explica√ß√£o, imagine sendo uma matriz com 3 linhas e 4 colunas ($3 \times 4$).

<br>

Vamos tentar reescrever essa matriz fazendo as colunas virarem as
linhas, isto √©, vamos transpor o objeto `m`. Isso poder√° ser realizado
utilizando aninhamento de compreens√µes de listas. Veja:

<br>

```{python}
m = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]
[[linha[i] for linha in m] for i in range(4)]
```

<br>

[Exerc√≠c√≠o]{.red}: Refa√ßa o exemplo acima utilizando o la√ßo `for`.

## Exerc√≠cios üìö

<br>

[Exerc√≠cio]{.red}: Dado uma lista de n√∫meros inteiros, crie uma nova
lista com cada n√∫mero elevado ao quadrado. Resolva o exerc√≠cio de duas
formas: use loop e o conceito de list comprehension.

<br>

[Exerc√≠cio]{.red}: Dado a lista de strings abaixo, crie uma nova lista
com as strings filtradas que t√™m mais de 5 caracteres e, em seguida,
converta as letras em mai√∫sculas. Resolva o exerc√≠cio de duas formas:
utilizando instru√ß√£o de loop e usando o conceito de list comprehension.

<br>

``` python
strings = ['ol√°', 'mundo', 'python', 'linguagem', 'programa√ß√£o']
```

<br>

[Exerc√≠cio]{.red}: Considere uma lista `l = range(10)`. Construa dois
programas em Python, que resulte uma uma lista acumulada de `l`, ou
seja, que devolva a sequ√™ncia de valores acumulados
`[0, 1, 3, 5, 7, 9, 11, 13, 15, 17]`. O primeiro dever√° utilizar apenas alguma instru√ß√£o de repeti√ß√£o e o segundo dever√° utilizar list
comprehensions.

```{python}
#| echo: false
#| eval: false
x = range(10)
r = [0]
r.extend([x[i] + x[i-1] for i in range(1, 10, 1)])
```

## Exerc√≠cios üìö

<br>

[Exerc√≠cio]{.red}: Na sequ√™ncia de 2 √† 100, encontre os n√∫meros primos.
Lembre-se que n√∫meros primos s√£o todos os n√∫meros maiores que 1 que s√£o
divis√≠veis apenas por ele mesmo. Resolva de duas formas. A primeira
utiliza√ß√£o apenas instru√ß√µes de repeti√ß√£o e a segunda utilizando list
comprehensions. **Dica**: a fun√ß√£o `all()` ir√° retornar `True` se todos os elementos de uma cole√ß√£o (list, conjunto, tuplas) s√£o verdadeiros. Por exemplo, `all(i % 2 == 0 for i in [1, 2, 3, 4])` retorna `False`, pois h√° elementos em `[1, 2, 3, 4]` que n√£o s√£o pares.

```{python}
#| eval: false
#| echo: false
x = range(2, 101)
[i for i in x if all(i % num != 0 for num in range(2, i - 1))]
```

<br>

[Exerc√≠cio]{.red}: Utilize uma list comprehension para gerar uma lista
de palavras de `lista`. Utilize o m√©todo `split()` de um objeto da
classe `str`. Por exemplo, experimente o uso do m√©todo `split()`
testando `"Pedro Rafael".split(' ')`.

``` python
#| eval: false
#| echo: false
s1 = "Bem vindo ao curso de Python"
s2 = "Python √© uma linguagem de programa√ß√£o legal"
s3 = "Python √© importante para abrir oportunidades"

lista = [s1, s2, s3]
```

<!-- ```{python} -->

<!-- #| eval: false -->

<!-- #| echo: false -->

<!-- s1 = "Bem vindo ao curso de Python" -->

<!-- s2 = "Python √© uma linguagem de programa√ß√£o legal" -->

<!-- s3 = "Python √© importante para abrir oportunidades" -->

<!-- lista = [s1, s2, s3] -->

<!-- [x.split(" ") for x in lista] -->

<!-- ``` -->

## Fun√ß√µes

<br>

::: columns
::: {.column width="70%"}
Para que possamos criar c√≥digos consistentes, √© essencial que possamos
contruir nossas pr√≥prias fun√ß√µes. Envolver o c√≥digo em uma fun√ß√£o que
ser√° chamada isoladamente ou far√° composi√ß√µes com outras fun√ß√µes √© de
grande import√¢ncia para que venhamos programar de forma eficiente.

<br>

**Algumas vantagens em criar fun√ß√µes** üì¶

1.  [Reutiliza√ß√£o de c√≥digo]{.red}: Ao criar suas pr√≥prias fun√ß√µes, voc√™
    pode reutiliz√°-las em v√°rios projetos, economizando tempo e esfor√ßo.

2.  [Organiza√ß√£o]{.red}: Fun√ß√µes personalizadas ajudam a organizar o
    c√≥digo, tornando-o mais leg√≠vel e f√°cil de entender.

3.  [Manuten√ß√£o]{.red}: Ao ter uma estrutura de fun√ß√µes claramente
    definida, √© mais f√°cil manter e atualizar o c√≥digo, sem afetar
    outras partes do projeto.

4.  [Flexibilidade]{.red}: Ao criar suas pr√≥prias fun√ß√µes, voc√™ tem
mais liberdade para adapt√°-las √†s suas necessidades espec√≠ficas.
:::

::: {.column width="30%"}
![](gifs/funcao.gif)
:::
:::

## Fun√ß√µes {background-image="imgs/rawpixel/image-from-rawpixel-id-6169173-jpeg.jpg" background-position="right" background-size="contain"}

<br>

::: columns
::: {.column width="70%"}
**As fun√ß√µes possui algumas caracter√≠sticas**:

<br>

::: nonincremental
1.  Possuem um [nome]{.red}: nome que identificar√° a fun√ß√£o e √∫til, para invocar a fun√ß√£o;

2.  Podem conter [par√¢metros]{.red} (0 ou mais): d√£o flexibilidade a
    fun√ß√£o, permitindo, por exemplo, mudar o comportamento da fun√ß√£o
    ou passar dados que ser√£o processados no interior da fun√ß√£o;

3.  Podem conter [docstrings]{.red} (opcional, mas recomendado): uma
    string de documenta√ß√£o, √∫til para descrever resumidamente as a√ß√µes
    da fun√ß√£o;

4.  Possuem um [corpo]{.red}: c√≥digos que realizar√£o as a√ß√µes que a
    fun√ß√£o destina-se a fazer;

5.  Podem retornar algo ([retorno]{.red} opcional): objeto ou conjunto
    de objetos retornados pela fun√ß√£o. Algumas fun√ß√µes podem n√£o
    retornar nada, por exemplo, fun√ß√µes que alteram nome de arquivos
    em um diret√≥rio √© um exemplo de um **procedimento** (fun√ß√£o sem
    retorno).
:::
:::

::: {.column width="30%"}
:::
:::

## Fun√ß√µes

<br>

**Forma geral da defini√ß√£o de uma fun√ß√£o em**
`r fontawesome::fa("python", "black")`:

<br>

``` python
def nome_da_funcao(par√¢metros):
  """Docstring:
  Uma informa√ß√£o geral sobre o que a fun√ß√£o faz
  """
  <comandos>
  retorno (opcional)
```

<br>

[Exemplo]{.red}: A fun√ß√£o `pares(x, par = True)` possui dois argumentos, em que `x` √© uma lista ou tupla e ir√° retornar uma lista apenas com valores pares, se `par = True`. Caso contr√°rio, ir√° retornar os valores √≠mpares.

<br>

```{python}
valores = [1, 6, 2, 12, -2, 7, 3, 9, 8]

def pares(x, par = True):

    """Essa fun√ß√£o ir√° retornar os valores pares da lista x
    se par = True. Caso contr√°rio, ir√° retornar os valores
    √≠mpares de x.
    """

    # Lista vazia:
    v = []

    for i in valores:
        if par and i % 2 == 0:
            v.append(i)
        else:
            if i % 2 != 0:
              v.append(i)

    # Retornando a lista v:
    return v

print(f"A lista com os valores pares: {pares(valores)}")
print(f"A lista com os valores √≠mpares: {pares(valores, False)}")
```

## Fun√ß√µes {background-image="imgs/Clouds2.jpg" background-opacity="0.4"}

<br>

No c√≥digo da fun√ß√£o `pares(x, par = True)`, perceba que √© poss√≠vel
introduzir valores padr√µes, isto √©, pode-se ter argumentos com valores
padr√µes previamente definidos. Nesse exemplo, note que `par = True`.
Perceba que no primeiro `print`, ao fazer `pares(valores)` √© equivalente a fazer `pares(valores, par = True)` ou, simplesmente
`pares(valores, True)`.

<br>

Note tamb√©m que se tiv√©ssemos feito `pares(x = valores, True)` ocorreria um erro. Isso, porque, ao passarmos argumentos especificando o nome do argumento, todos os demais argumentos teriam que ser passados de forma nomeada. Daria certo ter feito `pares(valores, par = True)`, mas n√£o dar√° se fizermos `pares(x = valores, True)`.

<br>

Argumentos passados de forma n√£o nomeadas s√£o chamados de [argumentos
posicionais]{.red}, j√° os que s√£o passados de forma nomeada s√£o chamados de [argumentos nomeados]{.red}.

## Fun√ß√µes

<br>

**Como regra, lembre-se**:

<br>

> Em uma chamada de fun√ß√£o, argumentos nomeados devem vir depois dos
> argumentos posicionais, ok?

<br>

![](gifs/thumbs-up-nod.gif)

## Fun√ß√µes

<br>

Poderemos obrigar que alguns argumentos sejam passados de forma
posicional ou de forma nomeada, utilizando [par√¢metros
especiais](https://docs.python.org/pt-br/3/tutorial/controlflow.html#keyword-arguments).

<br>

``` python
def f(pos1, pos2, /, pos_or_kwd, *, kwd1, kwd2):
      ----------    -----------     ----------
        |             |                  |
        |        Positional ou nomeado   |
        |                                - Apenas nomeado
        -- Apenas posicional
```

<br>

![](gifs/hum.gif)

## Fun√ß√µes

<br>

[Exemplo]{.red}: Nesse exemplo, os par√¢metros `x` e `y` s√£o
obrigatoriamente n√£o nomeados, isto √©, s√£o posicionais, j√° o par√¢metro
`z` dever√° obrigatoriamente ser nomeado.

<br>

``` python
def retorna_tupla(x, y, /, *, z):
    """A fun√ß√£o recebe os argumentos x, y, e z
    e ir√° retornar uma tupla com as informa√ß√µes
    passadas.
    """
    return x, y, z

retorna_tupla(1, 2, z = 3)
# Dar√° erro, pois z deve ser nomeado:
retorna_tupla(1, 2, 3)
# Dar√° erro, pois x e y s√£o posicionais:
retorna_tupla(x = 1, y = 2, z = 3)
```

## Fun√ß√µes

<br>

Voc√™ poder√° definir fun√ß√µes no interior de outras fun√ß√µes. Normalmente
definimos uma fun√ß√£o dentro de outra, quando as fun√ß√µes internas √† uma
outra fun√ß√£o n√£o de interesse fora dela. Fun√ß√µes definidas no interior
de outra fun√ß√£o s√≥ s√£o reconhecidas dentro da fun√ß√£o que cont√©m.

<br>

```{python}
def media3(x, y, z):
    """Fun√ß√£o que receber tr√™s n√∫meros e retorna a m√©dia"""
    def soma(x, y, z):
        return x + y + z

    return soma(x, y, z)/3

print(f"M√©dia: {media3(7.8, 8.87, 9.43)}")
```

Voc√™ poder√° consultar a
[docstring](https://docs.python.org/pt-br/3/tutorial/controlflow.html#tut-docstrings) de uma fun√ß√£o, utilizando o m√©todo m√°gico `__doc__`. Por exemplo, `media3.__doc__`. Toda fun√ß√£o que possui uma docstring, ter√° o m√©todo `__doc__` para permitir o acesso.

## Fun√ß√µes

<br>

Um conceito importante para se atentar, em Python, √© o conceito de
[passagem por refer√™ncia]{.red} e [passagem por valor]{.red}.

<br>

![Nesse exemplo, temos que `cup` √© um objeto que ser√° passado para a
fun√ß√£o `fillCup()`. Perceba que ana passagem por refer√™ncia, o objeto
original √© passado e na passagem por valor uma c√≥pia do objeto √© passado para a fun√ß√£o.](gifs/pass-by-reference-vs-pass-by-value-animation.gif){width="350"}

## Fun√ß√µes

<br>

Muitas fun√ß√µes em Python n√£o realizam c√≥pias do objeto passado como
argumento. Essas fun√ß√µes agem sobre o endere√ßo de mem√≥ria original do
objeto e as modifica√ß√µes alteram o objeto original.

<br>

V√°rios m√©todos em Python agem sobre o objeto original. Por exemplo, o
m√©todo `sort()` de objetos da classe `list` ordena uma lista por
refer√™ncia:

<br>

```{python}
# Lista original:
x = [9, 5, -1, 0, 2, 6, 8, 7]
y = x.copy()

# Veja que mesmo sem reatribuir o resultado novamente
# para x utilizando o operador "=", o objeto x foi
# alterado:
x.sort() # O m√©todo sort() agiu sobre o objeto original.

# Para n√£o alterar x, ao inv√©s de ter executado a linha logo
# acima (x.sort()), poder√≠amos ter realizado uma c√≥pia de x:
y.sort() # Apenas y (c√≥pia de x) seria ordenada.
```

## Fun√ß√µes

<br>

Nas nossas fun√ß√µes em Python, todos os objetos mut√°veis como listas,
dicion√°rios e conjuntos, s√£o passados para a fun√ß√£o por refer√™ncia. N√£o √© √† toa, que esses objetos mut√°veis possuem o m√©todo `copy`, √∫til quando n√£o desejarmos fazer refer√™cia ao objeto original.

<br>

[Exemplo]{.red}: A lista passada como argumento para a fun√ß√£o `nome()`
ser√° alterada, pois a passagem de um objeto mut√°vel, nesse caso uma
lista, ser√° passada por refer√™ncia.

```{python}
def nome(x):
    for i in range(len(x)):
        if x[i] > 0:
            x[i] = "+"
        else:
            if x[i] == 0:
                x[i] = 0
            else:
                x[i] = "-"
# Objeto x antes do uso da fun√ß√£o nome():
x = [1, 2, -1, 0, -4, 10]
nome(x)
print(f"x: {x}")
```

## Fun√ß√µes

<br>

::: {.panel-tabset group="elif"}
## Alterando `x`

Aqui, perceba que `x` √© um objeto (no caso uma lista) declarada fora da fun√ß√£o, ao passar `x` como argumento, n√£o ser√° realizado uma c√≥pia.
Portanto, a fun√ß√£o ir√° modificar a lista `x = [1, 2, -1, 0, -4, 10]`:

```{python}
def nome(x):
    for i in range(len(x)):
        if x[i] > 0:
            x[i] = "+"
        else:
            if x[i] == 0:
                x[i] = 0
            else:
                x[i] = "-"
# Objeto x antes do uso da fun√ß√£o nome():
x = [1, 2, -1, 0, -4, 10]
nome(x)
print(f"x: {x}")
```

## Protegendo o `x`

<br>

Se n√£o √© sua inten√ß√£o alterar os valores verdadeiros de um objeto
mut√°vel que ir√° passar como argumento de uma fun√ß√£o, lembre-se de fazer uma c√≥pia no interior da fun√ß√£o:

<br>

```{python}
#| results: hold
def nome(x):
    x_cop = x.copy() # Criando uma c√≥pia de x.
    for i in range(len(x_cop)):
        if x_cop[i] > 0:
            x_cop[i] = "+"
        else:
            if x_cop[i] == 0:
                x_cop[i] = 0
            else:
                x_cop[i] = "-"
    return x_cop
# Objeto x antes do uso da fun√ß√£o nome():
x = [1, 2, -1, 0, -4, 10]
r = nome(x)
print(f"x: {x}")
print(f"r: {r}")
```
:::

## Escopo de vari√°veis

<br>

Quando usamos fun√ß√µes, come√ßamos a trabalhar com vari√°veis internas
([vari√°veis locais]{.red}) e com vari√°veis externas ([vari√°veis
globais]{.red}).

<br>

Uma vari√°vel local a uma fun√ß√£o existe apenas dentro dela, sendo
inicializada a cada chamada √† fun√ß√£o.

<br>

Uma vari√°vel global √© definda fora de uma fun√ß√£o, podendo ser vista por
todas as fun√ß√µes do m√≥dulo (programa) e por todos os m√≥dulos que
importam o m√≥dulo que a definiu. Entenda o c√≥digo que segue e sua sa√≠da.
Por que o valor de `a` n√£o mudou?

<br>

```{python}
#| results: hold
#| output-location: column-fragment
a = 17

def muda_e_imprime():
    a = 8
    print(f"'a' dentro da fun√ß√£o: {a}")

print(f"'a' antes de mudar: {a}")
muda_e_imprime()
print(f"'a' depois de mudar: {a}")
```

## Escopo de vari√°veis

<br>

E se houvesse apenas a vari√°vel `a` definida no escopo fora da fun√ß√£o
`muda_e_imprime()`? √â poss√≠vel? Como ficaria a sa√≠da? Estude o c√≥digo:

<br>

```{python}
#| results: hold
#| output-location: column-fragment
a = 17

def muda_e_imprime():
    print(f"'a' dentro da fun√ß√£o: {a}")

print(f"'a' antes de mudar: {a}")
muda_e_imprime()
print(f"'a' depois de mudar: {a}")
```

<br>

**Vari√°veis globais s√£o reconhecidas no escopo local, caso nesse escopo n√£o haja nenhum outro objeto com o mesmo nome.**

## Escopo de vari√°veis

<br>

Uma outra situa√ß√£o √© quando temos uma vari√°vel local no escopo de uma
fun√ß√£o e desejamos modificar uma vari√°vel no escopo global com o mesmo
nome. Isso √© poss√≠vel utilizando a instru√ß√£o `global`. Perceba que a
vari√°vel `a` declarada fora do escopo da fun√ß√£o ir√° ter o seu valor
alterado, uma vez que especificamos que a fun√ß√£o dever√° enxergar a
defini√ß√£o de `a` no escopo mais geral.

<br>

```{python}
#| results: hold
#| output-location: column-fragment

a = 17

def muda_e_imprime():
    global a
    a = 8
    print(f"'a' dentro da fun√ß√£o: {a}")

print(f"'a' antes de mudar: {a}")
muda_e_imprime()
print(f"'a' depois de mudar: {a}")
```

## Escopo de vari√°veis

<br>

√â importante deixar claro que a utiliza√ß√£o da instru√ß√£o `global` em
excesso em seu c√≥digo poder√° gerar problemas. √â perigoso alterar, por
meio de fun√ß√µes, o escopo de vari√°veis globais. Isso poder√° gerar bugs
que s√£o dif√≠ceis de serem identificados. Isso n√£o impede de voc√™
utilizar, mas fa√ßa com modera√ß√£o e em caso de extrema necessidade, ok?

<br>

![](gifs/ok.gif)

## Desempacotando par√¢metros

<br>

Outra flexibilidade da linguagem Python √© a possibilidade de passar
par√¢metros empacotados em uma lista. Considere o exemplo que segue:

<br>

```{python}
# Uma fun√ß√£o simples com dois argumentos:
def soma(x, y):
  """Recebe dois valores num√©ricos e retorna a soma."""
  return x + y

l = [1.5, 0.2]
soma(*l)
```

<br>

Para desempacotar os valores de uma lista, utilizamos a nota√ß√£o `*`
antes do nome da lista (no caso `l`) que √© passado como argumento para a fun√ß√£o (no caso `soma()`).

## Fun√ß√µes varargs

<br>

Um recurso de grande import√¢ncia na defini√ß√µes de fun√ß√µes √© a
poss√≠bilidade de criarmos fun√ß√µes
[varargs](https://en.wikipedia.org/wiki/Variadic_function), isto √©,
fun√ß√µes com uma quantidade indeterminada (vari√°dica) de argumentos.

<br>

[Exemplo]{.red}: A fun√ß√£o abaixo poder√° receber uma quantidade
indeterminada (vari√°vel) de argumentos. A sintaxe √© muito pr√≥xima a
sintaxe de desempacotamento de argumentos. Por√©m, no exemplo anterior,
note que a quantidade de argumentos √© determin√≠stica (no caso 2). Aqui, temos que a nota√ß√£o `*` foi utilizada no argumento `args` durante a defini√ß√£o da fun√ß√£o.

<br>

```{python}
def funcao_varargs(*args):
    for arg in args:
        print(arg)

funcao_varargs(1, 2, 3)
```

## Fun√ß√µes varargs

<br>

Poderemos criar fun√ß√µes que combinem par√¢metros obrigat√≥rios e uma lista
vari√°vel de par√¢metros. N√£o h√° nenhuma restri√ß√£o quanto √† isso.

<br>

```{python}
#| results: hold
def imprime_maior(mensagem = "Maior: ", *args):
  maior = None
  for e in args:
    if maior is None or maior < e:
      maior = e
  print(mensagem, maior)

imprime_maior(1, 10, -1, 0)
imprime_maior("M√°ximo: ", 1, 10, -1, 0)
imprime_maior("Valor maior: ", 1, 10, -1, 0)
```

## Fun√ß√µes varargs

<br>

Tamb√©m poderemos passar um n√∫mero vari√°vel de argumentos nomeados
(chave-valor) para uma fun√ß√£o. Normalmente denotamos esse argumento por `**kwargs`. O nome `kwargs` √© opcional (voc√™ poderia dar qualquer outro nome), mas que √© normalmente utilizado, assim como `args` quando usamos `*args` para introduzir um n√∫mero vari√°vel de argumentos n√£o nomeados em uma fun√ß√£o. Por exemplo, voc√™ poderia chamar de `*a` e `**b` respectivamente.

<br>

```{python}
def funcao_kwargs(**kwargs):
    for key, value in kwargs.items():
        print(f"> {key}: {value}")

funcao_kwargs(primeiro_nome = "Pedro", segundo_nome = "Rafael")
```

<br>

`kwargs.items()` retorna um objeto da classe `dict_items`, cujos
elementos s√£o tuplas de pares (chave, valor).

## Fun√ß√µes lambda

<br> <br>

Muitas vezes √© √∫til decompormos nossos problemas em fun√ß√µes, e em muitas
situa√ß√µes as [fun√ß√µes lambda]{.red}, tamb√©m conhecida como [fun√ß√µes
an√¥nimas]{.red}, s√£o √∫teis nesse papel.

<br>

Um uso muito comun de fun√ß√µes lambda √© quando desejamos modificar os
argumentos de uma fun√ß√£o e quando precisamos iterar sobre essa fun√ß√£o
utilizando um funcional.

<br>

Entenda como funcional a fun√ß√£o que recebe como argumento uma outra
fun√ß√£o e retorna uma lista/array. O uso de funcionais √© muito comum na
comunidade R. Veja o pacote
[purrr](https://purrr.tidyverse.org/reference/index.html).

<br>

Tamb√©m poderemos utilizar esse conceito em Python, muito embora poucas
pessoas o exploram.

## Fun√ß√µes lambda

<br>

Considere o exemplo, em que temos uma simples fun√ß√£o de nome `soma2` que √© respons√°vel por somar dois valores. Considere que queremos iterar apenas em `y` e somar a cada termo o valor de $\pi$. N√£o precisaremos reimplementar uma nova fun√ß√£o `soma2` que possui apenas `y` como argumento com `x` constante. Usar o conceito de fun√ß√µes lambda resolver√° o nosso problema e √© muito √∫til na computa√ß√£o cient√≠fica. Veja:

<br>

```{python}
import math

# Sequ√™ncia de valores a serem somados:
sequencia_y = range(0, 5)

# Fun√ß√£o de 2 argumentos que soma x e y:
def soma2(x, y):
    return x + y

def funcional(f, seq):
    r = []

    for v in seq:
        r.append(f(v))

    return r

# Iterando sobre sequencia_y usando o funcional.
# O objetivo √© somar y a constante math.pi. Note
# Que n√£o precisamos criar uma nova fun√ß√£o com
# x sendo constante.
funcional(lambda y: soma2(math.pi, y), sequencia_y)
```

## Funcional `map`

<br>

O que fizemos, no exemplo anterior, tamb√©m poderia ter sido feito
utilizando o funcional `map()`. Na verdade, por ele √© a forma mais
conveniente, por ser computacionalmente mais eficiente, al√©m de utilizar
o conceito de iterador. Veja:

<br>

```{python}
import math

# Sequ√™ncia de valores a serem somados:
sequencia_y = range(0, 5)

list(map(lambda y: soma2(math.pi, y), sequencia_y))
```

<br>

O funcional `map()` retorna um iterador. Sendo assim, para que seja
poss√≠vel ter a lista com todos os valores, voc√™ poder√° usar a fun√ß√£o
`list()`. A vantagem do iterador √© que os elementos n√£o s√£o carregados
todos de uma √∫nica vez na mem√≥ria. Caso voc√™ n√£o converta o iterador
para uma lista, use fun√ß√£o `next()` ou ou m√©todo `__next__` do iterador para acessar seus elementos. üëç


## Funcional `reduce`

<br>

Um outro funcional √∫til, dipon√≠vel no m√≥dulo `functools` de Python √© o `reduce()`. Note que ele √© um funcional, pois recebe como argumento uma fun√ß√£o e retorna um valor.

<br>

Aplicar uma fun√ß√£o de dois argumentos cumulativamente aos itens de uma sequ√™ncia ou iter√°vel, da esquerda para a direita, de modo a reduzir o iter√°vel a um √∫nico valor. Estude o c√≥digo que segue:

<br>

```{python}
import functools as fct
import math

l = [1, 6, 7, 10, 2, 8, 4]

# Fun√ß√£o com dois argumentos.
def acumular(x, y):
    return math.cos(x) + math.sin(y)

# Somando math.cos(x) + math.sin(y),
# iterando em l.
fct.reduce(acumular, l)
```

## Funcional `reduce`

<br>

No exemplo anterior, m√©todo `reduce()` substitui em `acumular()` os dois primeiro elementos de `l` na primeira itera√ß√£o, e nas demais substitui o resultado de `acumular()` e o pr√≥ximo termo da lista `l`.

## Funcional `reduce`

<br>

Abaixo segue como implementar a l√≥gica do funcional `reduce`. A fun√ß√£o `meu_reduce()` utiliza instru√ß√µes de loop para implementar o funcionamento l√≥gico do funcional `reduce`. Estude o c√≥digo:

<br>

```{python}
#| results: hold

import functools as fct
import math


l = [1, 6, 7, 10, 2, 8, 4]

def acumular(x, y):
    return math.cos(x) + math.sin(y)

def meu_reduce(f, x):

    acumulando = f(x[0], x[1])

    for i in x[2:]:
        acumulando = f(acumulando, i)

    return acumulando

meu_reduce(acumular, l)

# O m√©todo reduce() √© computacionalmente
# mais eficiente:
fct.reduce(acumular, l)
```

## Fun√ß√µes recursivas

## Closures

## Fun√ß√µes geradoras

## Tratamento de erro

## Decoradores
